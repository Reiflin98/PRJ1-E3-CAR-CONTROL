
BIL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000008d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000862  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  000008d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000908  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013c1  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f01  00000000  00000000  00001e09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e5  00000000  00000000  00002d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  000036f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070f  00000000  00000000  000038b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027d  00000000  00000000  00003fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004240  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7c c0       	rjmp	.+248    	; 0xfa <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
   a:	00 00       	nop
   c:	03 c1       	rjmp	.+518    	; 0x214 <__vector_3>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	7c c0       	rjmp	.+248    	; 0x11e <__bad_interrupt>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	6c c0       	rjmp	.+216    	; 0x11e <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	5c c0       	rjmp	.+184    	; 0x11e <__bad_interrupt>
  66:	00 00       	nop
  68:	5a c0       	rjmp	.+180    	; 0x11e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	46 c0       	rjmp	.+140    	; 0x11e <__bad_interrupt>
  92:	00 00       	nop
  94:	44 c0       	rjmp	.+136    	; 0x11e <__bad_interrupt>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	40 c0       	rjmp	.+128    	; 0x11e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
  e2:	00 00       	nop
  e4:	aa 00       	.word	0x00aa	; ????
  e6:	af 00       	.word	0x00af	; ????
  e8:	b4 00       	.word	0x00b4	; ????
  ea:	b9 00       	.word	0x00b9	; ????
  ec:	c8 00       	.word	0x00c8	; ????
  ee:	cd 00       	.word	0x00cd	; ????
  f0:	d2 00       	.word	0x00d2	; ????
  f2:	d7 00       	.word	0x00d7	; ????
  f4:	dc 00       	.word	0x00dc	; ????
  f6:	e1 00       	.word	0x00e1	; ????
  f8:	e6 00       	.word	0x00e6	; ????

000000fa <__ctors_end>:
  fa:	11 24       	eor	r1, r1
  fc:	1f be       	out	0x3f, r1	; 63
  fe:	cf ef       	ldi	r28, 0xFF	; 255
 100:	d1 e2       	ldi	r29, 0x21	; 33
 102:	de bf       	out	0x3e, r29	; 62
 104:	cd bf       	out	0x3d, r28	; 61
 106:	00 e0       	ldi	r16, 0x00	; 0
 108:	0c bf       	out	0x3c, r16	; 60

0000010a <__do_clear_bss>:
 10a:	22 e0       	ldi	r18, 0x02	; 2
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a1 30       	cpi	r26, 0x01	; 1
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	8d d0       	rcall	.+282    	; 0x236 <main>
 11c:	a0 c3       	rjmp	.+1856   	; 0x85e <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <initSystem>:
{
 	initFrontLight();
 	initRearLight();
// 	initUnderglow();
// 	initMP3();
	initMotor();
 120:	99 d0       	rcall	.+306    	; 0x254 <initMotor>
	initSwitchPort();
 122:	67 c0       	rjmp	.+206    	; 0x1f2 <initSwitchPort>
 124:	08 95       	ret

00000126 <driveControl>:
 126:	cf 93       	push	r28
	
}

void driveControl()
{
 128:	df 93       	push	r29
	
	PORTB |= 0b00000001;
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	85 b9       	out	0x05, r24	; 5
	PORTB &= 0b11111110;
 130:	85 b1       	in	r24, 0x05	; 5
 132:	8e 7f       	andi	r24, 0xFE	; 254
 134:	85 b9       	out	0x05, r24	; 5
	int ned_af_bakke = 0;
 136:	c0 e0       	ldi	r28, 0x00	; 0
 138:	d0 e0       	ldi	r29, 0x00	; 0
	//_delay_ms(5000);
	//turnOnFront();
	//turnOnRear();
	//
	do{
		switch (counter)
 13a:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 13e:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__bss_end>
 142:	eb 30       	cpi	r30, 0x0B	; 11
 144:	f1 05       	cpc	r31, r1
 146:	08 f0       	brcs	.+2      	; 0x14a <driveControl+0x24>
 148:	45 c0       	rjmp	.+138    	; 0x1d4 <driveControl+0xae>
 14a:	88 27       	eor	r24, r24
 14c:	ee 58       	subi	r30, 0x8E	; 142
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	8f 4f       	sbci	r24, 0xFF	; 255
 152:	7d c3       	rjmp	.+1786   	; 0x84e <__tablejump2__>
		{
		case 0:
			carDrive(30,2);
 154:	62 e0       	ldi	r22, 0x02	; 2
 156:	8e e1       	ldi	r24, 0x1E	; 30
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	b6 d0       	rcall	.+364    	; 0x2c8 <carDrive>
			break;
 15c:	3b c0       	rjmp	.+118    	; 0x1d4 <driveControl+0xae>
		
		case 1: //Brik 1
			carDrive(50, 4); //Nedsæt hastigheden lidt (Bakke snart)
 15e:	64 e0       	ldi	r22, 0x04	; 4
 160:	82 e3       	ldi	r24, 0x32	; 50
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	b1 d0       	rcall	.+354    	; 0x2c8 <carDrive>
			break;
 166:	36 c0       	rjmp	.+108    	; 0x1d4 <driveControl+0xae>
			
		case 2: //Brik 2
			carDrive(80, 2); //Bakke start - hastighed ydeligere ned
 168:	62 e0       	ldi	r22, 0x02	; 2
 16a:	80 e5       	ldi	r24, 0x50	; 80
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	ac d0       	rcall	.+344    	; 0x2c8 <carDrive>
			break;
 170:	31 c0       	rjmp	.+98     	; 0x1d4 <driveControl+0xae>
			
		case 3: //Brik 3
			if (ned_af_bakke < 500)
 172:	c4 3f       	cpi	r28, 0xF4	; 244
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	d8 07       	cpc	r29, r24
			{
				carDrive(-17, 1); //Hastighed ned inden bakken kører ned
 178:	34 f4       	brge	.+12     	; 0x186 <driveControl+0x60>
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	8f ee       	ldi	r24, 0xEF	; 239
 17e:	9f ef       	ldi	r25, 0xFF	; 255
 180:	a3 d0       	rcall	.+326    	; 0x2c8 <carDrive>
				ned_af_bakke++;
 182:	21 96       	adiw	r28, 0x01	; 1
				
			}else{
				carDrive(30, 7);
 184:	27 c0       	rjmp	.+78     	; 0x1d4 <driveControl+0xae>
 186:	67 e0       	ldi	r22, 0x07	; 7
 188:	8e e1       	ldi	r24, 0x1E	; 30
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	9d d0       	rcall	.+314    	; 0x2c8 <carDrive>
			
			break;
		
			
		case 4: //Brik 4
			carDrive(70, 2); //HAstigheden op - bunden af bakken
 18e:	22 c0       	rjmp	.+68     	; 0x1d4 <driveControl+0xae>
 190:	62 e0       	ldi	r22, 0x02	; 2
 192:	86 e4       	ldi	r24, 0x46	; 70
 194:	90 e0       	ldi	r25, 0x00	; 0
			break;
 196:	98 d0       	rcall	.+304    	; 0x2c8 <carDrive>
			
		case 5: //Brik 5
			carDrive(50, 8); //hastigheden lidt ned - gør klar til snart at stoppe
 198:	1d c0       	rjmp	.+58     	; 0x1d4 <driveControl+0xae>
 19a:	68 e0       	ldi	r22, 0x08	; 8
 19c:	82 e3       	ldi	r24, 0x32	; 50
 19e:	90 e0       	ldi	r25, 0x00	; 0
			break;
 1a0:	93 d0       	rcall	.+294    	; 0x2c8 <carDrive>
			
		case 6: //Brik 6
			carDrive(-40, 1); //Kør tilbage til refleksbrik 5
 1a2:	18 c0       	rjmp	.+48     	; 0x1d4 <driveControl+0xae>
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	88 ed       	ldi	r24, 0xD8	; 216
 1a8:	9f ef       	ldi	r25, 0xFF	; 255
			break;
			
		case 7: //Brik 6
			carDrive(-50, 2); //Refelksbrik 6 igen
 1aa:	8e d0       	rcall	.+284    	; 0x2c8 <carDrive>
 1ac:	13 c0       	rjmp	.+38     	; 0x1d4 <driveControl+0xae>
 1ae:	62 e0       	ldi	r22, 0x02	; 2
 1b0:	8e ec       	ldi	r24, 0xCE	; 206
			break;
 1b2:	9f ef       	ldi	r25, 0xFF	; 255
			
		case 8: //Brik 5
			carDrive(70, 1); //Kør frem igen
 1b4:	89 d0       	rcall	.+274    	; 0x2c8 <carDrive>
 1b6:	0e c0       	rjmp	.+28     	; 0x1d4 <driveControl+0xae>
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	86 e4       	ldi	r24, 0x46	; 70
			break;
 1bc:	90 e0       	ldi	r25, 0x00	; 0
			
		case 9: //Brik 5
			carDrive(70, 2); //Kør frem igen
 1be:	84 d0       	rcall	.+264    	; 0x2c8 <carDrive>
 1c0:	09 c0       	rjmp	.+18     	; 0x1d4 <driveControl+0xae>
 1c2:	62 e0       	ldi	r22, 0x02	; 2
 1c4:	86 e4       	ldi	r24, 0x46	; 70
 1c6:	90 e0       	ldi	r25, 0x00	; 0
			break;
			
		case 10: //Brik 6
			carDrive(50, 7); //Kør frem igen	
 1c8:	7f d0       	rcall	.+254    	; 0x2c8 <carDrive>
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <driveControl+0xae>
 1cc:	67 e0       	ldi	r22, 0x07	; 7
 1ce:	82 e3       	ldi	r24, 0x32	; 50
 1d0:	90 e0       	ldi	r25, 0x00	; 0
			
			
			
		}

	}while (counter < 11); //Går ud af do-while når refliksbrik 7 er nået
 1d2:	7a d0       	rcall	.+244    	; 0x2c8 <carDrive>
 1d4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1d8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__bss_end>
 1dc:	0b 97       	sbiw	r24, 0x0b	; 11
 1de:	0c f4       	brge	.+2      	; 0x1e2 <driveControl+0xbc>
	
	carStop();
 1e0:	ac cf       	rjmp	.-168    	; 0x13a <driveControl+0x14>
 1e2:	4b d0       	rcall	.+150    	; 0x27a <carStop>
	//playStop();
	//
	//turnOffUnder();
	//turnOffFront();
	//turnOffRear();
	counter = 0;
 1e4:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__bss_end>
 1e8:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <initSwitchPort>:

// Læser alle switches samtidigt
unsigned char switchStatus()
{
  return (~PINA);
}
 1f2:	11 b8       	out	0x01, r1	; 1
 1f4:	08 95       	ret

000001f6 <switchOn>:
// Returnerer TRUE, hvis switchen med nummeret
// "switch_nr" er aktiveret - ellers returneres FALSE
unsigned char switchOn(unsigned char switch_nr)
{
unsigned char mask;
  if (switch_nr <= MAX_SWITCH_NR)
 1f6:	88 30       	cpi	r24, 0x08	; 8
 1f8:	58 f4       	brcc	.+22     	; 0x210 <switchOn+0x1a>
  {
    mask = 0b00000001 << switch_nr;
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <switchOn+0xe>
 200:	22 0f       	add	r18, r18
 202:	33 1f       	adc	r19, r19
 204:	8a 95       	dec	r24
 206:	e2 f7       	brpl	.-8      	; 0x200 <switchOn+0xa>
    return (~PINA & mask);
 208:	80 b1       	in	r24, 0x00	; 0
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	08 95       	ret
  }
  else
    return 0;
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	08 95       	ret

00000214 <__vector_3>:
volatile unsigned char counter = 0;

// Left right detection
unsigned char detection = 0;


 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	8f 93       	push	r24
//Initialiser interrupt counter - husk playReflex();
 220:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 224:	8f 5f       	subi	r24, 0xFF	; 255
 226:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
		//detection = 1;
		//TCNT1 = 62411;
		//TCCR1B |= 0b00000101;

	//}else
	//{
 22a:	8f 91       	pop	r24
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <main>:
{
	turnOnRearLightDrive();
	TCCR4B = 0b00000000;
}

//ISR(TIMER1_OVF_vect){
 236:	78 94       	sei
	//detection = 0;
 238:	84 e0       	ldi	r24, 0x04	; 4
 23a:	8d bb       	out	0x1d, r24	; 29
	//TCCR1B &= 0b11111000;
 23c:	80 e3       	ldi	r24, 0x30	; 48
 23e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
	sei();
	EIMSK=0b00000100;
	EICRA=0b00110000;
	
	//timer
	//TCCR1A = 0b00000000;
 242:	6e df       	rcall	.-292    	; 0x120 <initSystem>
	//TCCR1B = 0b00000000;
 244:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
	//TIMSK1 = 0b00000001;
	
	
	//Timer til reflex
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	d5 df       	rcall	.-86     	; 0x1f6 <switchOn>
 24c:	88 23       	and	r24, r24
	//TCCR1A = 0b00000000;
	//TCCR1B = 0b00000000;
 24e:	e1 f3       	breq	.-8      	; 0x248 <main+0x12>
 250:	6a df       	rcall	.-300    	; 0x126 <driveControl>
 252:	fa cf       	rjmp	.-12     	; 0x248 <main+0x12>

00000254 <initMotor>:
#define F_CPU 16000000
#include <util/delay.h>

void initMotor(void)
{
	OCR1A = 0x3FF;
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	93 e0       	ldi	r25, 0x03	; 3
 258:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 25c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	TCCR1A = 0b11000011;
 260:	83 ec       	ldi	r24, 0xC3	; 195
 262:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = 0b00000000;
 266:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	DDRB = 0b11111111;
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00001001;
 26e:	89 e0       	ldi	r24, 0x09	; 9
 270:	85 b9       	out	0x05, r24	; 5
	PORTB &= 0b11111110;
 272:	85 b1       	in	r24, 0x05	; 5
 274:	8e 7f       	andi	r24, 0xFE	; 254
 276:	85 b9       	out	0x05, r24	; 5
 278:	08 95       	ret

0000027a <carStop>:
}


void carStop()
{
	while (OCR1A != 0x3FF)
 27a:	0e c0       	rjmp	.+28     	; 0x298 <carStop+0x1e>
	{
		OCR1A++;
 27c:	e8 e8       	ldi	r30, 0x88	; 136
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	91 81       	ldd	r25, Z+1	; 0x01
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	91 83       	std	Z+1, r25	; 0x01
 288:	80 83       	st	Z, r24
		turnOnRearLightBreak();
 28a:	e9 d0       	rcall	.+466    	; 0x45e <turnOnRearLightBreak>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28c:	8f e9       	ldi	r24, 0x9F	; 159
 28e:	9f e0       	ldi	r25, 0x0F	; 15
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <carStop+0x16>
 294:	00 c0       	rjmp	.+0      	; 0x296 <carStop+0x1c>
 296:	00 00       	nop
}


void carStop()
{
	while (OCR1A != 0x3FF)
 298:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 29c:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 2a0:	8f 3f       	cpi	r24, 0xFF	; 255
 2a2:	93 40       	sbci	r25, 0x03	; 3
 2a4:	59 f7       	brne	.-42     	; 0x27c <carStop+0x2>
	{
		OCR1A++;
		turnOnRearLightBreak();
		_delay_ms(1);
	}
	TCCR1B = (0b11111000 & TCCR1B);
 2a6:	e1 e8       	ldi	r30, 0x81	; 129
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	88 7f       	andi	r24, 0xF8	; 248
 2ae:	80 83       	st	Z, r24
 2b0:	08 95       	ret

000002b2 <delay_ms>:
	return;
}

void delay_ms(unsigned char milliseconds)
{
	while(milliseconds > 0)
 2b2:	07 c0       	rjmp	.+14     	; 0x2c2 <delay_ms+0x10>
	{
		milliseconds--;
 2b4:	81 50       	subi	r24, 0x01	; 1
 2b6:	ef e9       	ldi	r30, 0x9F	; 159
 2b8:	ff e0       	ldi	r31, 0x0F	; 15
 2ba:	31 97       	sbiw	r30, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <delay_ms+0x8>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <delay_ms+0xe>
 2c0:	00 00       	nop
	return;
}

void delay_ms(unsigned char milliseconds)
{
	while(milliseconds > 0)
 2c2:	81 11       	cpse	r24, r1
 2c4:	f7 cf       	rjmp	.-18     	; 0x2b4 <delay_ms+0x2>
	{
		milliseconds--;
		_delay_ms(1);
	}
 2c6:	08 95       	ret

000002c8 <carDrive>:
	
}


void carDrive(int speed, char acceleration)
{
 2c8:	bf 92       	push	r11
 2ca:	cf 92       	push	r12
 2cc:	df 92       	push	r13
 2ce:	ef 92       	push	r14
 2d0:	ff 92       	push	r15
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	1f 92       	push	r1
 2dc:	1f 92       	push	r1
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
 2e2:	8c 01       	movw	r16, r24
 2e4:	b6 2e       	mov	r11, r22

	if(speed == 100){
 2e6:	84 36       	cpi	r24, 0x64	; 100
 2e8:	91 05       	cpc	r25, r1
 2ea:	11 f4       	brne	.+4      	; 0x2f0 <carDrive+0x28>
	speed = 99;
 2ec:	03 e6       	ldi	r16, 0x63	; 99
 2ee:	10 e0       	ldi	r17, 0x00	; 0
	}
	volatile int requestedSpeed = (1023-((sqrt(speed * speed))*(1023/100))); 
 2f0:	00 9f       	mul	r16, r16
 2f2:	60 01       	movw	r12, r0
 2f4:	01 9f       	mul	r16, r17
 2f6:	d0 0c       	add	r13, r0
 2f8:	d0 0c       	add	r13, r0
 2fa:	11 24       	eor	r1, r1
 2fc:	0d 2c       	mov	r0, r13
 2fe:	00 0c       	add	r0, r0
 300:	ee 08       	sbc	r14, r14
 302:	ff 08       	sbc	r15, r15
 304:	c7 01       	movw	r24, r14
 306:	b6 01       	movw	r22, r12
 308:	5c d1       	rcall	.+696    	; 0x5c2 <__floatsisf>
 30a:	4e d2       	rcall	.+1180   	; 0x7a8 <sqrt>
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	40 e2       	ldi	r20, 0x20	; 32
 312:	51 e4       	ldi	r21, 0x41	; 65
 314:	e2 d1       	rcall	.+964    	; 0x6da <__mulsf3>
 316:	9b 01       	movw	r18, r22
 318:	ac 01       	movw	r20, r24
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	70 ec       	ldi	r23, 0xC0	; 192
 31e:	8f e7       	ldi	r24, 0x7F	; 127
 320:	94 e4       	ldi	r25, 0x44	; 68
 322:	b7 d0       	rcall	.+366    	; 0x492 <__subsf3>
 324:	1b d1       	rcall	.+566    	; 0x55c <__fixsfsi>
 326:	7a 83       	std	Y+2, r23	; 0x02
 328:	69 83       	std	Y+1, r22	; 0x01
	
	if (speed == 0) //bilen skal holde stille.
 32a:	01 15       	cp	r16, r1
 32c:	11 05       	cpc	r17, r1
 32e:	11 f4       	brne	.+4      	; 0x334 <carDrive+0x6c>
	{
		carStop();
 330:	a4 df       	rcall	.-184    	; 0x27a <carStop>
 332:	89 c0       	rjmp	.+274    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		return;
 334:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	}
	if ((TCCR1B & 0b00000010) == 0)
 338:	81 fd       	sbrc	r24, 1
 33a:	05 c0       	rjmp	.+10     	; 0x346 <carDrive+0x7e>
 33c:	e1 e8       	ldi	r30, 0x81	; 129
	{
		TCCR1B = TCCR1B | 0b00000010;
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	82 60       	ori	r24, 0x02	; 2
 344:	80 83       	st	Z, r24
 346:	11 23       	and	r17, r17
	}
	if (speed < 0) //bilen skal køre baglæns.
 348:	0c f0       	brlt	.+2      	; 0x34c <carDrive+0x84>
 34a:	3f c0       	rjmp	.+126    	; 0x3ca <carDrive+0x102>
 34c:	85 b1       	in	r24, 0x05	; 5
	{
		if (PORTB == 0b00001000) //hvis bit 3 er sat, kører bilen fremad.
 34e:	88 30       	cpi	r24, 0x08	; 8
 350:	a1 f4       	brne	.+40     	; 0x37a <carDrive+0xb2>
 352:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		{
			if (OCR1A == 0x3FF) //tjekker om bilen holder stille.
 356:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 35a:	8f 3f       	cpi	r24, 0xFF	; 255
 35c:	93 40       	sbci	r25, 0x03	; 3
 35e:	11 f4       	brne	.+4      	; 0x364 <carDrive+0x9c>
 360:	15 b8       	out	0x05, r1	; 5
			{
				PORTB = 0b00000000; //clearer bit 3, så bilen bakker. 
 362:	71 c0       	rjmp	.+226    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 364:	e8 e8       	ldi	r30, 0x88	; 136
			}
			else
			{
				OCR1A++;
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	91 81       	ldd	r25, Z+1	; 0x01
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	91 83       	std	Z+1, r25	; 0x01
				turnOnRearLightBreak();
 370:	80 83       	st	Z, r24
 372:	75 d0       	rcall	.+234    	; 0x45e <turnOnRearLightBreak>
				delay_ms(acceleration);
 374:	8b 2d       	mov	r24, r11
 376:	9d df       	rcall	.-198    	; 0x2b2 <delay_ms>
 378:	66 c0       	rjmp	.+204    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 37a:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			}
		}
		
		else //bilen kører allerede baglæns.
		{
			if (OCR1A < requestedSpeed) //hvis bilen kører for hurtigt.
 37e:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	9a 81       	ldd	r25, Y+2	; 0x02
 386:	28 17       	cp	r18, r24
 388:	39 07       	cpc	r19, r25
 38a:	58 f4       	brcc	.+22     	; 0x3a2 <carDrive+0xda>
			{
				OCR1A++;
 38c:	e8 e8       	ldi	r30, 0x88	; 136
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	91 81       	ldd	r25, Z+1	; 0x01
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	91 83       	std	Z+1, r25	; 0x01
				turnOnRearLightBreak();
 398:	80 83       	st	Z, r24
 39a:	61 d0       	rcall	.+194    	; 0x45e <turnOnRearLightBreak>
				delay_ms(acceleration);
 39c:	8b 2d       	mov	r24, r11
 39e:	89 df       	rcall	.-238    	; 0x2b2 <delay_ms>
 3a0:	52 c0       	rjmp	.+164    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 3a2:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			}
			else if (OCR1A > requestedSpeed) //hvis bilen kører for langsomt.
 3a6:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	9a 81       	ldd	r25, Y+2	; 0x02
 3ae:	82 17       	cp	r24, r18
 3b0:	93 07       	cpc	r25, r19
 3b2:	08 f0       	brcs	.+2      	; 0x3b6 <carDrive+0xee>
 3b4:	48 c0       	rjmp	.+144    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			{
				OCR1A--;
 3b6:	e8 e8       	ldi	r30, 0x88	; 136
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	91 81       	ldd	r25, Z+1	; 0x01
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	91 83       	std	Z+1, r25	; 0x01
 3c2:	80 83       	st	Z, r24
				delay_ms(acceleration);
 3c4:	8b 2d       	mov	r24, r11
 3c6:	75 df       	rcall	.-278    	; 0x2b2 <delay_ms>
 3c8:	3e c0       	rjmp	.+124    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 3ca:	85 b1       	in	r24, 0x05	; 5
		}
	}
	
	else //bilen skal køre forlæns.
	{
		if (PORTB == 0b00001000) //hvis bit 3 er sat, kører bilen fremad.
 3cc:	88 30       	cpi	r24, 0x08	; 8
 3ce:	39 f5       	brne	.+78     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3d0:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		{
			if (OCR1A < requestedSpeed) //hvis bilen kører for hurtigt.
 3d4:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3d8:	89 81       	ldd	r24, Y+1	; 0x01
 3da:	9a 81       	ldd	r25, Y+2	; 0x02
 3dc:	28 17       	cp	r18, r24
 3de:	39 07       	cpc	r19, r25
			{
				OCR1A++;
 3e0:	58 f4       	brcc	.+22     	; 0x3f8 <carDrive+0x130>
 3e2:	e8 e8       	ldi	r30, 0x88	; 136
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	91 81       	ldd	r25, Z+1	; 0x01
 3ea:	01 96       	adiw	r24, 0x01	; 1
 3ec:	91 83       	std	Z+1, r25	; 0x01
				turnOnRearLightBreak();
 3ee:	80 83       	st	Z, r24
 3f0:	36 d0       	rcall	.+108    	; 0x45e <turnOnRearLightBreak>
				delay_ms(acceleration);
 3f2:	8b 2d       	mov	r24, r11
 3f4:	5e df       	rcall	.-324    	; 0x2b2 <delay_ms>
 3f6:	27 c0       	rjmp	.+78     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 3f8:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			}
			else if (OCR1A > requestedSpeed) //hvis bilen kører for langsomt.
 3fc:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 400:	89 81       	ldd	r24, Y+1	; 0x01
 402:	9a 81       	ldd	r25, Y+2	; 0x02
 404:	82 17       	cp	r24, r18
 406:	93 07       	cpc	r25, r19
 408:	f0 f4       	brcc	.+60     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			{
				OCR1A = OCR1A-1;
 40a:	e8 e8       	ldi	r30, 0x88	; 136
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	91 81       	ldd	r25, Z+1	; 0x01
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	91 83       	std	Z+1, r25	; 0x01
 416:	80 83       	st	Z, r24
				delay_ms(acceleration);
 418:	8b 2d       	mov	r24, r11
 41a:	4b df       	rcall	.-362    	; 0x2b2 <delay_ms>
 41c:	14 c0       	rjmp	.+40     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 41e:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
				return;
			}	
		}
		else //bilen køererer baglæns.
		{
			if (OCR1A == 0x3FF) //tjekker om bilen holder stille.
 422:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 426:	8f 3f       	cpi	r24, 0xFF	; 255
 428:	93 40       	sbci	r25, 0x03	; 3
			{
				PORTB = 0b00001000; //setter bit 3, så bilen køererererer forlæns.
 42a:	19 f4       	brne	.+6      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42c:	88 e0       	ldi	r24, 0x08	; 8
 42e:	85 b9       	out	0x05, r24	; 5
			}
			else
			{
				OCR1A++;
 430:	0a c0       	rjmp	.+20     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 432:	e8 e8       	ldi	r30, 0x88	; 136
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	80 81       	ld	r24, Z
 438:	91 81       	ldd	r25, Z+1	; 0x01
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	91 83       	std	Z+1, r25	; 0x01
				turnOnRearLightBreak();
 43e:	80 83       	st	Z, r24
 440:	0e d0       	rcall	.+28     	; 0x45e <turnOnRearLightBreak>
				delay_ms(acceleration);
 442:	8b 2d       	mov	r24, r11
 444:	36 df       	rcall	.-404    	; 0x2b2 <delay_ms>
 446:	0f 90       	pop	r0
			}
		}

	}
}
 448:	0f 90       	pop	r0
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	1f 91       	pop	r17
 450:	0f 91       	pop	r16
 452:	ff 90       	pop	r15
 454:	ef 90       	pop	r14
 456:	df 90       	pop	r13
 458:	cf 90       	pop	r12
 45a:	bf 90       	pop	r11
 45c:	08 95       	ret

0000045e <turnOnRearLightBreak>:
 45e:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCCR4B = 0b00000000;
}

void turnOnRearLightBreak (void)
{
	if (OCR3A!=1023)
 462:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 466:	8f 3f       	cpi	r24, 0xFF	; 255
 468:	93 40       	sbci	r25, 0x03	; 3
 46a:	61 f0       	breq	.+24     	; 0x484 <turnOnRearLightBreak+0x26>
	{
		TCCR3B = 0b00000001;
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
		OCR3A=1023;
 472:	8f ef       	ldi	r24, 0xFF	; 255
 474:	93 e0       	ldi	r25, 0x03	; 3
 476:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 47a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
		TCCR4B = 0b00000101;
 47e:	85 e0       	ldi	r24, 0x05	; 5
 480:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
	}
	
	TCNT4 = 57724;
 484:	8c e7       	ldi	r24, 0x7C	; 124
 486:	91 ee       	ldi	r25, 0xE1	; 225
 488:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
 48c:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
 490:	08 95       	ret

00000492 <__subsf3>:
 492:	50 58       	subi	r21, 0x80	; 128

00000494 <__addsf3>:
 494:	bb 27       	eor	r27, r27
 496:	aa 27       	eor	r26, r26
 498:	0e d0       	rcall	.+28     	; 0x4b6 <__addsf3x>
 49a:	e5 c0       	rjmp	.+458    	; 0x666 <__fp_round>
 49c:	d6 d0       	rcall	.+428    	; 0x64a <__fp_pscA>
 49e:	30 f0       	brcs	.+12     	; 0x4ac <__addsf3+0x18>
 4a0:	db d0       	rcall	.+438    	; 0x658 <__fp_pscB>
 4a2:	20 f0       	brcs	.+8      	; 0x4ac <__addsf3+0x18>
 4a4:	31 f4       	brne	.+12     	; 0x4b2 <__addsf3+0x1e>
 4a6:	9f 3f       	cpi	r25, 0xFF	; 255
 4a8:	11 f4       	brne	.+4      	; 0x4ae <__addsf3+0x1a>
 4aa:	1e f4       	brtc	.+6      	; 0x4b2 <__addsf3+0x1e>
 4ac:	cb c0       	rjmp	.+406    	; 0x644 <__fp_nan>
 4ae:	0e f4       	brtc	.+2      	; 0x4b2 <__addsf3+0x1e>
 4b0:	e0 95       	com	r30
 4b2:	e7 fb       	bst	r30, 7
 4b4:	c1 c0       	rjmp	.+386    	; 0x638 <__fp_inf>

000004b6 <__addsf3x>:
 4b6:	e9 2f       	mov	r30, r25
 4b8:	e7 d0       	rcall	.+462    	; 0x688 <__fp_split3>
 4ba:	80 f3       	brcs	.-32     	; 0x49c <__addsf3+0x8>
 4bc:	ba 17       	cp	r27, r26
 4be:	62 07       	cpc	r22, r18
 4c0:	73 07       	cpc	r23, r19
 4c2:	84 07       	cpc	r24, r20
 4c4:	95 07       	cpc	r25, r21
 4c6:	18 f0       	brcs	.+6      	; 0x4ce <__addsf3x+0x18>
 4c8:	71 f4       	brne	.+28     	; 0x4e6 <__addsf3x+0x30>
 4ca:	9e f5       	brtc	.+102    	; 0x532 <__addsf3x+0x7c>
 4cc:	ff c0       	rjmp	.+510    	; 0x6cc <__fp_zero>
 4ce:	0e f4       	brtc	.+2      	; 0x4d2 <__addsf3x+0x1c>
 4d0:	e0 95       	com	r30
 4d2:	0b 2e       	mov	r0, r27
 4d4:	ba 2f       	mov	r27, r26
 4d6:	a0 2d       	mov	r26, r0
 4d8:	0b 01       	movw	r0, r22
 4da:	b9 01       	movw	r22, r18
 4dc:	90 01       	movw	r18, r0
 4de:	0c 01       	movw	r0, r24
 4e0:	ca 01       	movw	r24, r20
 4e2:	a0 01       	movw	r20, r0
 4e4:	11 24       	eor	r1, r1
 4e6:	ff 27       	eor	r31, r31
 4e8:	59 1b       	sub	r21, r25
 4ea:	99 f0       	breq	.+38     	; 0x512 <__addsf3x+0x5c>
 4ec:	59 3f       	cpi	r21, 0xF9	; 249
 4ee:	50 f4       	brcc	.+20     	; 0x504 <__addsf3x+0x4e>
 4f0:	50 3e       	cpi	r21, 0xE0	; 224
 4f2:	68 f1       	brcs	.+90     	; 0x54e <__addsf3x+0x98>
 4f4:	1a 16       	cp	r1, r26
 4f6:	f0 40       	sbci	r31, 0x00	; 0
 4f8:	a2 2f       	mov	r26, r18
 4fa:	23 2f       	mov	r18, r19
 4fc:	34 2f       	mov	r19, r20
 4fe:	44 27       	eor	r20, r20
 500:	58 5f       	subi	r21, 0xF8	; 248
 502:	f3 cf       	rjmp	.-26     	; 0x4ea <__addsf3x+0x34>
 504:	46 95       	lsr	r20
 506:	37 95       	ror	r19
 508:	27 95       	ror	r18
 50a:	a7 95       	ror	r26
 50c:	f0 40       	sbci	r31, 0x00	; 0
 50e:	53 95       	inc	r21
 510:	c9 f7       	brne	.-14     	; 0x504 <__addsf3x+0x4e>
 512:	7e f4       	brtc	.+30     	; 0x532 <__addsf3x+0x7c>
 514:	1f 16       	cp	r1, r31
 516:	ba 0b       	sbc	r27, r26
 518:	62 0b       	sbc	r22, r18
 51a:	73 0b       	sbc	r23, r19
 51c:	84 0b       	sbc	r24, r20
 51e:	ba f0       	brmi	.+46     	; 0x54e <__addsf3x+0x98>
 520:	91 50       	subi	r25, 0x01	; 1
 522:	a1 f0       	breq	.+40     	; 0x54c <__addsf3x+0x96>
 524:	ff 0f       	add	r31, r31
 526:	bb 1f       	adc	r27, r27
 528:	66 1f       	adc	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	88 1f       	adc	r24, r24
 52e:	c2 f7       	brpl	.-16     	; 0x520 <__addsf3x+0x6a>
 530:	0e c0       	rjmp	.+28     	; 0x54e <__addsf3x+0x98>
 532:	ba 0f       	add	r27, r26
 534:	62 1f       	adc	r22, r18
 536:	73 1f       	adc	r23, r19
 538:	84 1f       	adc	r24, r20
 53a:	48 f4       	brcc	.+18     	; 0x54e <__addsf3x+0x98>
 53c:	87 95       	ror	r24
 53e:	77 95       	ror	r23
 540:	67 95       	ror	r22
 542:	b7 95       	ror	r27
 544:	f7 95       	ror	r31
 546:	9e 3f       	cpi	r25, 0xFE	; 254
 548:	08 f0       	brcs	.+2      	; 0x54c <__addsf3x+0x96>
 54a:	b3 cf       	rjmp	.-154    	; 0x4b2 <__addsf3+0x1e>
 54c:	93 95       	inc	r25
 54e:	88 0f       	add	r24, r24
 550:	08 f0       	brcs	.+2      	; 0x554 <__addsf3x+0x9e>
 552:	99 27       	eor	r25, r25
 554:	ee 0f       	add	r30, r30
 556:	97 95       	ror	r25
 558:	87 95       	ror	r24
 55a:	08 95       	ret

0000055c <__fixsfsi>:
 55c:	04 d0       	rcall	.+8      	; 0x566 <__fixunssfsi>
 55e:	68 94       	set
 560:	b1 11       	cpse	r27, r1
 562:	b5 c0       	rjmp	.+362    	; 0x6ce <__fp_szero>
 564:	08 95       	ret

00000566 <__fixunssfsi>:
 566:	98 d0       	rcall	.+304    	; 0x698 <__fp_splitA>
 568:	88 f0       	brcs	.+34     	; 0x58c <__fixunssfsi+0x26>
 56a:	9f 57       	subi	r25, 0x7F	; 127
 56c:	90 f0       	brcs	.+36     	; 0x592 <__fixunssfsi+0x2c>
 56e:	b9 2f       	mov	r27, r25
 570:	99 27       	eor	r25, r25
 572:	b7 51       	subi	r27, 0x17	; 23
 574:	a0 f0       	brcs	.+40     	; 0x59e <__fixunssfsi+0x38>
 576:	d1 f0       	breq	.+52     	; 0x5ac <__fixunssfsi+0x46>
 578:	66 0f       	add	r22, r22
 57a:	77 1f       	adc	r23, r23
 57c:	88 1f       	adc	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	1a f0       	brmi	.+6      	; 0x588 <__fixunssfsi+0x22>
 582:	ba 95       	dec	r27
 584:	c9 f7       	brne	.-14     	; 0x578 <__fixunssfsi+0x12>
 586:	12 c0       	rjmp	.+36     	; 0x5ac <__fixunssfsi+0x46>
 588:	b1 30       	cpi	r27, 0x01	; 1
 58a:	81 f0       	breq	.+32     	; 0x5ac <__fixunssfsi+0x46>
 58c:	9f d0       	rcall	.+318    	; 0x6cc <__fp_zero>
 58e:	b1 e0       	ldi	r27, 0x01	; 1
 590:	08 95       	ret
 592:	9c c0       	rjmp	.+312    	; 0x6cc <__fp_zero>
 594:	67 2f       	mov	r22, r23
 596:	78 2f       	mov	r23, r24
 598:	88 27       	eor	r24, r24
 59a:	b8 5f       	subi	r27, 0xF8	; 248
 59c:	39 f0       	breq	.+14     	; 0x5ac <__fixunssfsi+0x46>
 59e:	b9 3f       	cpi	r27, 0xF9	; 249
 5a0:	cc f3       	brlt	.-14     	; 0x594 <__fixunssfsi+0x2e>
 5a2:	86 95       	lsr	r24
 5a4:	77 95       	ror	r23
 5a6:	67 95       	ror	r22
 5a8:	b3 95       	inc	r27
 5aa:	d9 f7       	brne	.-10     	; 0x5a2 <__fixunssfsi+0x3c>
 5ac:	3e f4       	brtc	.+14     	; 0x5bc <__fixunssfsi+0x56>
 5ae:	90 95       	com	r25
 5b0:	80 95       	com	r24
 5b2:	70 95       	com	r23
 5b4:	61 95       	neg	r22
 5b6:	7f 4f       	sbci	r23, 0xFF	; 255
 5b8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ba:	9f 4f       	sbci	r25, 0xFF	; 255
 5bc:	08 95       	ret

000005be <__floatunsisf>:
 5be:	e8 94       	clt
 5c0:	09 c0       	rjmp	.+18     	; 0x5d4 <__floatsisf+0x12>

000005c2 <__floatsisf>:
 5c2:	97 fb       	bst	r25, 7
 5c4:	3e f4       	brtc	.+14     	; 0x5d4 <__floatsisf+0x12>
 5c6:	90 95       	com	r25
 5c8:	80 95       	com	r24
 5ca:	70 95       	com	r23
 5cc:	61 95       	neg	r22
 5ce:	7f 4f       	sbci	r23, 0xFF	; 255
 5d0:	8f 4f       	sbci	r24, 0xFF	; 255
 5d2:	9f 4f       	sbci	r25, 0xFF	; 255
 5d4:	99 23       	and	r25, r25
 5d6:	a9 f0       	breq	.+42     	; 0x602 <__floatsisf+0x40>
 5d8:	f9 2f       	mov	r31, r25
 5da:	96 e9       	ldi	r25, 0x96	; 150
 5dc:	bb 27       	eor	r27, r27
 5de:	93 95       	inc	r25
 5e0:	f6 95       	lsr	r31
 5e2:	87 95       	ror	r24
 5e4:	77 95       	ror	r23
 5e6:	67 95       	ror	r22
 5e8:	b7 95       	ror	r27
 5ea:	f1 11       	cpse	r31, r1
 5ec:	f8 cf       	rjmp	.-16     	; 0x5de <__floatsisf+0x1c>
 5ee:	fa f4       	brpl	.+62     	; 0x62e <__floatsisf+0x6c>
 5f0:	bb 0f       	add	r27, r27
 5f2:	11 f4       	brne	.+4      	; 0x5f8 <__floatsisf+0x36>
 5f4:	60 ff       	sbrs	r22, 0
 5f6:	1b c0       	rjmp	.+54     	; 0x62e <__floatsisf+0x6c>
 5f8:	6f 5f       	subi	r22, 0xFF	; 255
 5fa:	7f 4f       	sbci	r23, 0xFF	; 255
 5fc:	8f 4f       	sbci	r24, 0xFF	; 255
 5fe:	9f 4f       	sbci	r25, 0xFF	; 255
 600:	16 c0       	rjmp	.+44     	; 0x62e <__floatsisf+0x6c>
 602:	88 23       	and	r24, r24
 604:	11 f0       	breq	.+4      	; 0x60a <__floatsisf+0x48>
 606:	96 e9       	ldi	r25, 0x96	; 150
 608:	11 c0       	rjmp	.+34     	; 0x62c <__floatsisf+0x6a>
 60a:	77 23       	and	r23, r23
 60c:	21 f0       	breq	.+8      	; 0x616 <__floatsisf+0x54>
 60e:	9e e8       	ldi	r25, 0x8E	; 142
 610:	87 2f       	mov	r24, r23
 612:	76 2f       	mov	r23, r22
 614:	05 c0       	rjmp	.+10     	; 0x620 <__floatsisf+0x5e>
 616:	66 23       	and	r22, r22
 618:	71 f0       	breq	.+28     	; 0x636 <__floatsisf+0x74>
 61a:	96 e8       	ldi	r25, 0x86	; 134
 61c:	86 2f       	mov	r24, r22
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	2a f0       	brmi	.+10     	; 0x62e <__floatsisf+0x6c>
 624:	9a 95       	dec	r25
 626:	66 0f       	add	r22, r22
 628:	77 1f       	adc	r23, r23
 62a:	88 1f       	adc	r24, r24
 62c:	da f7       	brpl	.-10     	; 0x624 <__floatsisf+0x62>
 62e:	88 0f       	add	r24, r24
 630:	96 95       	lsr	r25
 632:	87 95       	ror	r24
 634:	97 f9       	bld	r25, 7
 636:	08 95       	ret

00000638 <__fp_inf>:
 638:	97 f9       	bld	r25, 7
 63a:	9f 67       	ori	r25, 0x7F	; 127
 63c:	80 e8       	ldi	r24, 0x80	; 128
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	60 e0       	ldi	r22, 0x00	; 0
 642:	08 95       	ret

00000644 <__fp_nan>:
 644:	9f ef       	ldi	r25, 0xFF	; 255
 646:	80 ec       	ldi	r24, 0xC0	; 192
 648:	08 95       	ret

0000064a <__fp_pscA>:
 64a:	00 24       	eor	r0, r0
 64c:	0a 94       	dec	r0
 64e:	16 16       	cp	r1, r22
 650:	17 06       	cpc	r1, r23
 652:	18 06       	cpc	r1, r24
 654:	09 06       	cpc	r0, r25
 656:	08 95       	ret

00000658 <__fp_pscB>:
 658:	00 24       	eor	r0, r0
 65a:	0a 94       	dec	r0
 65c:	12 16       	cp	r1, r18
 65e:	13 06       	cpc	r1, r19
 660:	14 06       	cpc	r1, r20
 662:	05 06       	cpc	r0, r21
 664:	08 95       	ret

00000666 <__fp_round>:
 666:	09 2e       	mov	r0, r25
 668:	03 94       	inc	r0
 66a:	00 0c       	add	r0, r0
 66c:	11 f4       	brne	.+4      	; 0x672 <__fp_round+0xc>
 66e:	88 23       	and	r24, r24
 670:	52 f0       	brmi	.+20     	; 0x686 <__fp_round+0x20>
 672:	bb 0f       	add	r27, r27
 674:	40 f4       	brcc	.+16     	; 0x686 <__fp_round+0x20>
 676:	bf 2b       	or	r27, r31
 678:	11 f4       	brne	.+4      	; 0x67e <__fp_round+0x18>
 67a:	60 ff       	sbrs	r22, 0
 67c:	04 c0       	rjmp	.+8      	; 0x686 <__fp_round+0x20>
 67e:	6f 5f       	subi	r22, 0xFF	; 255
 680:	7f 4f       	sbci	r23, 0xFF	; 255
 682:	8f 4f       	sbci	r24, 0xFF	; 255
 684:	9f 4f       	sbci	r25, 0xFF	; 255
 686:	08 95       	ret

00000688 <__fp_split3>:
 688:	57 fd       	sbrc	r21, 7
 68a:	90 58       	subi	r25, 0x80	; 128
 68c:	44 0f       	add	r20, r20
 68e:	55 1f       	adc	r21, r21
 690:	59 f0       	breq	.+22     	; 0x6a8 <__fp_splitA+0x10>
 692:	5f 3f       	cpi	r21, 0xFF	; 255
 694:	71 f0       	breq	.+28     	; 0x6b2 <__fp_splitA+0x1a>
 696:	47 95       	ror	r20

00000698 <__fp_splitA>:
 698:	88 0f       	add	r24, r24
 69a:	97 fb       	bst	r25, 7
 69c:	99 1f       	adc	r25, r25
 69e:	61 f0       	breq	.+24     	; 0x6b8 <__fp_splitA+0x20>
 6a0:	9f 3f       	cpi	r25, 0xFF	; 255
 6a2:	79 f0       	breq	.+30     	; 0x6c2 <__fp_splitA+0x2a>
 6a4:	87 95       	ror	r24
 6a6:	08 95       	ret
 6a8:	12 16       	cp	r1, r18
 6aa:	13 06       	cpc	r1, r19
 6ac:	14 06       	cpc	r1, r20
 6ae:	55 1f       	adc	r21, r21
 6b0:	f2 cf       	rjmp	.-28     	; 0x696 <__fp_split3+0xe>
 6b2:	46 95       	lsr	r20
 6b4:	f1 df       	rcall	.-30     	; 0x698 <__fp_splitA>
 6b6:	08 c0       	rjmp	.+16     	; 0x6c8 <__fp_splitA+0x30>
 6b8:	16 16       	cp	r1, r22
 6ba:	17 06       	cpc	r1, r23
 6bc:	18 06       	cpc	r1, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	f1 cf       	rjmp	.-30     	; 0x6a4 <__fp_splitA+0xc>
 6c2:	86 95       	lsr	r24
 6c4:	71 05       	cpc	r23, r1
 6c6:	61 05       	cpc	r22, r1
 6c8:	08 94       	sec
 6ca:	08 95       	ret

000006cc <__fp_zero>:
 6cc:	e8 94       	clt

000006ce <__fp_szero>:
 6ce:	bb 27       	eor	r27, r27
 6d0:	66 27       	eor	r22, r22
 6d2:	77 27       	eor	r23, r23
 6d4:	cb 01       	movw	r24, r22
 6d6:	97 f9       	bld	r25, 7
 6d8:	08 95       	ret

000006da <__mulsf3>:
 6da:	0b d0       	rcall	.+22     	; 0x6f2 <__mulsf3x>
 6dc:	c4 cf       	rjmp	.-120    	; 0x666 <__fp_round>
 6de:	b5 df       	rcall	.-150    	; 0x64a <__fp_pscA>
 6e0:	28 f0       	brcs	.+10     	; 0x6ec <__mulsf3+0x12>
 6e2:	ba df       	rcall	.-140    	; 0x658 <__fp_pscB>
 6e4:	18 f0       	brcs	.+6      	; 0x6ec <__mulsf3+0x12>
 6e6:	95 23       	and	r25, r21
 6e8:	09 f0       	breq	.+2      	; 0x6ec <__mulsf3+0x12>
 6ea:	a6 cf       	rjmp	.-180    	; 0x638 <__fp_inf>
 6ec:	ab cf       	rjmp	.-170    	; 0x644 <__fp_nan>
 6ee:	11 24       	eor	r1, r1
 6f0:	ee cf       	rjmp	.-36     	; 0x6ce <__fp_szero>

000006f2 <__mulsf3x>:
 6f2:	ca df       	rcall	.-108    	; 0x688 <__fp_split3>
 6f4:	a0 f3       	brcs	.-24     	; 0x6de <__mulsf3+0x4>

000006f6 <__mulsf3_pse>:
 6f6:	95 9f       	mul	r25, r21
 6f8:	d1 f3       	breq	.-12     	; 0x6ee <__mulsf3+0x14>
 6fa:	95 0f       	add	r25, r21
 6fc:	50 e0       	ldi	r21, 0x00	; 0
 6fe:	55 1f       	adc	r21, r21
 700:	62 9f       	mul	r22, r18
 702:	f0 01       	movw	r30, r0
 704:	72 9f       	mul	r23, r18
 706:	bb 27       	eor	r27, r27
 708:	f0 0d       	add	r31, r0
 70a:	b1 1d       	adc	r27, r1
 70c:	63 9f       	mul	r22, r19
 70e:	aa 27       	eor	r26, r26
 710:	f0 0d       	add	r31, r0
 712:	b1 1d       	adc	r27, r1
 714:	aa 1f       	adc	r26, r26
 716:	64 9f       	mul	r22, r20
 718:	66 27       	eor	r22, r22
 71a:	b0 0d       	add	r27, r0
 71c:	a1 1d       	adc	r26, r1
 71e:	66 1f       	adc	r22, r22
 720:	82 9f       	mul	r24, r18
 722:	22 27       	eor	r18, r18
 724:	b0 0d       	add	r27, r0
 726:	a1 1d       	adc	r26, r1
 728:	62 1f       	adc	r22, r18
 72a:	73 9f       	mul	r23, r19
 72c:	b0 0d       	add	r27, r0
 72e:	a1 1d       	adc	r26, r1
 730:	62 1f       	adc	r22, r18
 732:	83 9f       	mul	r24, r19
 734:	a0 0d       	add	r26, r0
 736:	61 1d       	adc	r22, r1
 738:	22 1f       	adc	r18, r18
 73a:	74 9f       	mul	r23, r20
 73c:	33 27       	eor	r19, r19
 73e:	a0 0d       	add	r26, r0
 740:	61 1d       	adc	r22, r1
 742:	23 1f       	adc	r18, r19
 744:	84 9f       	mul	r24, r20
 746:	60 0d       	add	r22, r0
 748:	21 1d       	adc	r18, r1
 74a:	82 2f       	mov	r24, r18
 74c:	76 2f       	mov	r23, r22
 74e:	6a 2f       	mov	r22, r26
 750:	11 24       	eor	r1, r1
 752:	9f 57       	subi	r25, 0x7F	; 127
 754:	50 40       	sbci	r21, 0x00	; 0
 756:	8a f0       	brmi	.+34     	; 0x77a <__mulsf3_pse+0x84>
 758:	e1 f0       	breq	.+56     	; 0x792 <__mulsf3_pse+0x9c>
 75a:	88 23       	and	r24, r24
 75c:	4a f0       	brmi	.+18     	; 0x770 <__mulsf3_pse+0x7a>
 75e:	ee 0f       	add	r30, r30
 760:	ff 1f       	adc	r31, r31
 762:	bb 1f       	adc	r27, r27
 764:	66 1f       	adc	r22, r22
 766:	77 1f       	adc	r23, r23
 768:	88 1f       	adc	r24, r24
 76a:	91 50       	subi	r25, 0x01	; 1
 76c:	50 40       	sbci	r21, 0x00	; 0
 76e:	a9 f7       	brne	.-22     	; 0x75a <__mulsf3_pse+0x64>
 770:	9e 3f       	cpi	r25, 0xFE	; 254
 772:	51 05       	cpc	r21, r1
 774:	70 f0       	brcs	.+28     	; 0x792 <__mulsf3_pse+0x9c>
 776:	60 cf       	rjmp	.-320    	; 0x638 <__fp_inf>
 778:	aa cf       	rjmp	.-172    	; 0x6ce <__fp_szero>
 77a:	5f 3f       	cpi	r21, 0xFF	; 255
 77c:	ec f3       	brlt	.-6      	; 0x778 <__mulsf3_pse+0x82>
 77e:	98 3e       	cpi	r25, 0xE8	; 232
 780:	dc f3       	brlt	.-10     	; 0x778 <__mulsf3_pse+0x82>
 782:	86 95       	lsr	r24
 784:	77 95       	ror	r23
 786:	67 95       	ror	r22
 788:	b7 95       	ror	r27
 78a:	f7 95       	ror	r31
 78c:	e7 95       	ror	r30
 78e:	9f 5f       	subi	r25, 0xFF	; 255
 790:	c1 f7       	brne	.-16     	; 0x782 <__mulsf3_pse+0x8c>
 792:	fe 2b       	or	r31, r30
 794:	88 0f       	add	r24, r24
 796:	91 1d       	adc	r25, r1
 798:	96 95       	lsr	r25
 79a:	87 95       	ror	r24
 79c:	97 f9       	bld	r25, 7
 79e:	08 95       	ret
 7a0:	11 f4       	brne	.+4      	; 0x7a6 <__mulsf3_pse+0xb0>
 7a2:	0e f4       	brtc	.+2      	; 0x7a6 <__mulsf3_pse+0xb0>
 7a4:	4f cf       	rjmp	.-354    	; 0x644 <__fp_nan>
 7a6:	3e c0       	rjmp	.+124    	; 0x824 <__fp_mpack>

000007a8 <sqrt>:
 7a8:	77 df       	rcall	.-274    	; 0x698 <__fp_splitA>
 7aa:	d0 f3       	brcs	.-12     	; 0x7a0 <__mulsf3_pse+0xaa>
 7ac:	99 23       	and	r25, r25
 7ae:	d9 f3       	breq	.-10     	; 0x7a6 <__mulsf3_pse+0xb0>
 7b0:	ce f3       	brts	.-14     	; 0x7a4 <__mulsf3_pse+0xae>
 7b2:	9f 57       	subi	r25, 0x7F	; 127
 7b4:	55 0b       	sbc	r21, r21
 7b6:	87 ff       	sbrs	r24, 7
 7b8:	43 d0       	rcall	.+134    	; 0x840 <__fp_norm2>
 7ba:	00 24       	eor	r0, r0
 7bc:	a0 e6       	ldi	r26, 0x60	; 96
 7be:	40 ea       	ldi	r20, 0xA0	; 160
 7c0:	90 01       	movw	r18, r0
 7c2:	80 58       	subi	r24, 0x80	; 128
 7c4:	56 95       	lsr	r21
 7c6:	97 95       	ror	r25
 7c8:	28 f4       	brcc	.+10     	; 0x7d4 <sqrt+0x2c>
 7ca:	80 5c       	subi	r24, 0xC0	; 192
 7cc:	66 0f       	add	r22, r22
 7ce:	77 1f       	adc	r23, r23
 7d0:	88 1f       	adc	r24, r24
 7d2:	20 f0       	brcs	.+8      	; 0x7dc <sqrt+0x34>
 7d4:	26 17       	cp	r18, r22
 7d6:	37 07       	cpc	r19, r23
 7d8:	48 07       	cpc	r20, r24
 7da:	30 f4       	brcc	.+12     	; 0x7e8 <sqrt+0x40>
 7dc:	62 1b       	sub	r22, r18
 7de:	73 0b       	sbc	r23, r19
 7e0:	84 0b       	sbc	r24, r20
 7e2:	20 29       	or	r18, r0
 7e4:	31 29       	or	r19, r1
 7e6:	4a 2b       	or	r20, r26
 7e8:	a6 95       	lsr	r26
 7ea:	17 94       	ror	r1
 7ec:	07 94       	ror	r0
 7ee:	20 25       	eor	r18, r0
 7f0:	31 25       	eor	r19, r1
 7f2:	4a 27       	eor	r20, r26
 7f4:	58 f7       	brcc	.-42     	; 0x7cc <sqrt+0x24>
 7f6:	66 0f       	add	r22, r22
 7f8:	77 1f       	adc	r23, r23
 7fa:	88 1f       	adc	r24, r24
 7fc:	20 f0       	brcs	.+8      	; 0x806 <sqrt+0x5e>
 7fe:	26 17       	cp	r18, r22
 800:	37 07       	cpc	r19, r23
 802:	48 07       	cpc	r20, r24
 804:	30 f4       	brcc	.+12     	; 0x812 <sqrt+0x6a>
 806:	62 0b       	sbc	r22, r18
 808:	73 0b       	sbc	r23, r19
 80a:	84 0b       	sbc	r24, r20
 80c:	20 0d       	add	r18, r0
 80e:	31 1d       	adc	r19, r1
 810:	41 1d       	adc	r20, r1
 812:	a0 95       	com	r26
 814:	81 f7       	brne	.-32     	; 0x7f6 <sqrt+0x4e>
 816:	b9 01       	movw	r22, r18
 818:	84 2f       	mov	r24, r20
 81a:	91 58       	subi	r25, 0x81	; 129
 81c:	88 0f       	add	r24, r24
 81e:	96 95       	lsr	r25
 820:	87 95       	ror	r24
 822:	08 95       	ret

00000824 <__fp_mpack>:
 824:	9f 3f       	cpi	r25, 0xFF	; 255
 826:	31 f0       	breq	.+12     	; 0x834 <__fp_mpack_finite+0xc>

00000828 <__fp_mpack_finite>:
 828:	91 50       	subi	r25, 0x01	; 1
 82a:	20 f4       	brcc	.+8      	; 0x834 <__fp_mpack_finite+0xc>
 82c:	87 95       	ror	r24
 82e:	77 95       	ror	r23
 830:	67 95       	ror	r22
 832:	b7 95       	ror	r27
 834:	88 0f       	add	r24, r24
 836:	91 1d       	adc	r25, r1
 838:	96 95       	lsr	r25
 83a:	87 95       	ror	r24
 83c:	97 f9       	bld	r25, 7
 83e:	08 95       	ret

00000840 <__fp_norm2>:
 840:	91 50       	subi	r25, 0x01	; 1
 842:	50 40       	sbci	r21, 0x00	; 0
 844:	66 0f       	add	r22, r22
 846:	77 1f       	adc	r23, r23
 848:	88 1f       	adc	r24, r24
 84a:	d2 f7       	brpl	.-12     	; 0x840 <__fp_norm2>
 84c:	08 95       	ret

0000084e <__tablejump2__>:
 84e:	ee 0f       	add	r30, r30
 850:	ff 1f       	adc	r31, r31
 852:	88 1f       	adc	r24, r24
 854:	8b bf       	out	0x3b, r24	; 59
 856:	07 90       	elpm	r0, Z+
 858:	f6 91       	elpm	r31, Z
 85a:	e0 2d       	mov	r30, r0
 85c:	19 94       	eijmp

0000085e <_exit>:
 85e:	f8 94       	cli

00000860 <__stop_program>:
 860:	ff cf       	rjmp	.-2      	; 0x860 <__stop_program>
