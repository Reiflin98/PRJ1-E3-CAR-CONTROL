
BIL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000008e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000870  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  000008e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000914  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000153d  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f24  00000000  00000000  00001f99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a0e  00000000  00000000  00002ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  000038cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072c  00000000  00000000  00003aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ba  00000000  00000000  000041d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000448a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7c c0       	rjmp	.+248    	; 0xfa <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
   a:	00 00       	nop
   c:	0f c1       	rjmp	.+542    	; 0x22c <__vector_3>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	7c c0       	rjmp	.+248    	; 0x11e <__bad_interrupt>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	6c c0       	rjmp	.+216    	; 0x11e <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	5c c0       	rjmp	.+184    	; 0x11e <__bad_interrupt>
  66:	00 00       	nop
  68:	5a c0       	rjmp	.+180    	; 0x11e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	46 c0       	rjmp	.+140    	; 0x11e <__bad_interrupt>
  92:	00 00       	nop
  94:	44 c0       	rjmp	.+136    	; 0x11e <__bad_interrupt>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	40 c0       	rjmp	.+128    	; 0x11e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
  e2:	00 00       	nop
  e4:	aa 00       	.word	0x00aa	; ????
  e6:	b0 00       	.word	0x00b0	; ????
  e8:	b6 00       	.word	0x00b6	; ????
  ea:	bc 00       	.word	0x00bc	; ????
  ec:	cd 00       	.word	0x00cd	; ????
  ee:	d3 00       	.word	0x00d3	; ????
  f0:	d9 00       	.word	0x00d9	; ????
  f2:	df 00       	.word	0x00df	; ????
  f4:	e5 00       	.word	0x00e5	; ????
  f6:	eb 00       	.word	0x00eb	; ????
  f8:	f1 00       	.word	0x00f1	; ????

000000fa <__ctors_end>:
  fa:	11 24       	eor	r1, r1
  fc:	1f be       	out	0x3f, r1	; 63
  fe:	cf ef       	ldi	r28, 0xFF	; 255
 100:	d1 e2       	ldi	r29, 0x21	; 33
 102:	de bf       	out	0x3e, r29	; 62
 104:	cd bf       	out	0x3d, r28	; 61
 106:	00 e0       	ldi	r16, 0x00	; 0
 108:	0c bf       	out	0x3c, r16	; 60

0000010a <__do_clear_bss>:
 10a:	22 e0       	ldi	r18, 0x02	; 2
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a1 30       	cpi	r26, 0x01	; 1
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	99 d0       	rcall	.+306    	; 0x24e <main>
 11c:	a7 c3       	rjmp	.+1870   	; 0x86c <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <initSystem>:
{
 	//initFrontLight();
 	//initRearLight();
// 	initUnderglow();
// 	initMP3();
	initMotor();
 120:	a5 d0       	rcall	.+330    	; 0x26c <initMotor>
	initSwitchPort();
 122:	73 c0       	rjmp	.+230    	; 0x20a <initSwitchPort>
 124:	08 95       	ret

00000126 <driveControl>:
 126:	cf 93       	push	r28
	
}

void driveControl()
{
 128:	df 93       	push	r29
	
	PORTB |= 0b00000001;
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	85 b9       	out	0x05, r24	; 5
	PORTB &= 0b11111110;
 130:	85 b1       	in	r24, 0x05	; 5
 132:	8e 7f       	andi	r24, 0xFE	; 254
 134:	85 b9       	out	0x05, r24	; 5
	int ned_af_bakke = 0;
 136:	c0 e0       	ldi	r28, 0x00	; 0
 138:	d0 e0       	ldi	r29, 0x00	; 0
	//_delay_ms(5000);
	//turnOnFront();
	//turnOnRear();
	//
	do{
		switch (counter)
 13a:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 13e:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__bss_end>
 142:	eb 30       	cpi	r30, 0x0B	; 11
 144:	f1 05       	cpc	r31, r1
 146:	08 f0       	brcs	.+2      	; 0x14a <driveControl+0x24>
 148:	51 c0       	rjmp	.+162    	; 0x1ec <driveControl+0xc6>
 14a:	88 27       	eor	r24, r24
 14c:	ee 58       	subi	r30, 0x8E	; 142
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	8f 4f       	sbci	r24, 0xFF	; 255
 152:	84 c3       	rjmp	.+1800   	; 0x85c <__tablejump2__>
		{
		case 0:
			carDrive(50,1500);
 154:	6c ed       	ldi	r22, 0xDC	; 220
 156:	75 e0       	ldi	r23, 0x05	; 5
 158:	82 e3       	ldi	r24, 0x32	; 50
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	ba d0       	rcall	.+372    	; 0x2d2 <carDrive>
			break;
 15e:	46 c0       	rjmp	.+140    	; 0x1ec <driveControl+0xc6>
		
		case 1: //Brik 1
			carDrive(60, 2500); //Nedsæt hastigheden lidt (Bakke snart)
 160:	64 ec       	ldi	r22, 0xC4	; 196
 162:	79 e0       	ldi	r23, 0x09	; 9
 164:	8c e3       	ldi	r24, 0x3C	; 60
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	b4 d0       	rcall	.+360    	; 0x2d2 <carDrive>
			break;
 16a:	40 c0       	rjmp	.+128    	; 0x1ec <driveControl+0xc6>
			
		case 2: //Brik 2
			carDrive(90, 3000); //Bakke start - hastighed ydeligere ned
 16c:	68 eb       	ldi	r22, 0xB8	; 184
 16e:	7b e0       	ldi	r23, 0x0B	; 11
 170:	8a e5       	ldi	r24, 0x5A	; 90
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	ae d0       	rcall	.+348    	; 0x2d2 <carDrive>
			break;
 176:	3a c0       	rjmp	.+116    	; 0x1ec <driveControl+0xc6>
			
		case 3: //Brik 3
			if (ned_af_bakke < 850)
 178:	c2 35       	cpi	r28, 0x52	; 82
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	d8 07       	cpc	r29, r24
 17e:	3c f4       	brge	.+14     	; 0x18e <driveControl+0x68>
			{
				carDrive(-80, 0); //Hastighed ned inden bakken kører ned
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	80 eb       	ldi	r24, 0xB0	; 176
 186:	9f ef       	ldi	r25, 0xFF	; 255
 188:	a4 d0       	rcall	.+328    	; 0x2d2 <carDrive>
				ned_af_bakke++;
 18a:	21 96       	adiw	r28, 0x01	; 1
				
			}else{
				carDrive(30, 4500);
 18c:	2f c0       	rjmp	.+94     	; 0x1ec <driveControl+0xc6>
 18e:	64 e9       	ldi	r22, 0x94	; 148
 190:	71 e1       	ldi	r23, 0x11	; 17
 192:	8e e1       	ldi	r24, 0x1E	; 30
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	9d d0       	rcall	.+314    	; 0x2d2 <carDrive>
			
			break;
		
			
		case 4: //Brik 4
			carDrive(70, 1500); //HAstigheden op - bunden af bakken
 198:	29 c0       	rjmp	.+82     	; 0x1ec <driveControl+0xc6>
 19a:	6c ed       	ldi	r22, 0xDC	; 220
 19c:	75 e0       	ldi	r23, 0x05	; 5
 19e:	86 e4       	ldi	r24, 0x46	; 70
 1a0:	90 e0       	ldi	r25, 0x00	; 0
			break;
 1a2:	97 d0       	rcall	.+302    	; 0x2d2 <carDrive>
			
		case 5: //Brik 5
			carDrive(40, 6000); //hastigheden lidt ned - gør klar til snart at stoppe
 1a4:	23 c0       	rjmp	.+70     	; 0x1ec <driveControl+0xc6>
 1a6:	60 e7       	ldi	r22, 0x70	; 112
 1a8:	77 e1       	ldi	r23, 0x17	; 23
 1aa:	88 e2       	ldi	r24, 0x28	; 40
 1ac:	90 e0       	ldi	r25, 0x00	; 0
			break;
 1ae:	91 d0       	rcall	.+290    	; 0x2d2 <carDrive>
			
		case 6: //Brik 6
			carDrive(-60, 100); //Kør tilbage til refleksbrik 5
 1b0:	1d c0       	rjmp	.+58     	; 0x1ec <driveControl+0xc6>
 1b2:	64 e6       	ldi	r22, 0x64	; 100
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	84 ec       	ldi	r24, 0xC4	; 196
 1b8:	9f ef       	ldi	r25, 0xFF	; 255
			break;
 1ba:	8b d0       	rcall	.+278    	; 0x2d2 <carDrive>
			
		case 7: //Brik 6
			carDrive(-60, 1500); //Refelksbrik 6 igen
 1bc:	17 c0       	rjmp	.+46     	; 0x1ec <driveControl+0xc6>
 1be:	6c ed       	ldi	r22, 0xDC	; 220
 1c0:	75 e0       	ldi	r23, 0x05	; 5
 1c2:	84 ec       	ldi	r24, 0xC4	; 196
 1c4:	9f ef       	ldi	r25, 0xFF	; 255
			break;
 1c6:	85 d0       	rcall	.+266    	; 0x2d2 <carDrive>
			
		case 8: //Brik 5
			carDrive(70, 200); //Kør frem igen
 1c8:	11 c0       	rjmp	.+34     	; 0x1ec <driveControl+0xc6>
 1ca:	68 ec       	ldi	r22, 0xC8	; 200
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	86 e4       	ldi	r24, 0x46	; 70
 1d0:	90 e0       	ldi	r25, 0x00	; 0
			break;
			
		case 9: //Brik 5
			carDrive(70, 1000); //Kør frem igen
 1d2:	7f d0       	rcall	.+254    	; 0x2d2 <carDrive>
 1d4:	0b c0       	rjmp	.+22     	; 0x1ec <driveControl+0xc6>
 1d6:	68 ee       	ldi	r22, 0xE8	; 232
 1d8:	73 e0       	ldi	r23, 0x03	; 3
 1da:	86 e4       	ldi	r24, 0x46	; 70
 1dc:	90 e0       	ldi	r25, 0x00	; 0
			break;
 1de:	79 d0       	rcall	.+242    	; 0x2d2 <carDrive>
			
		case 10: //Brik 6
			carDrive(50, 6000); //Kør frem igen	
 1e0:	05 c0       	rjmp	.+10     	; 0x1ec <driveControl+0xc6>
 1e2:	60 e7       	ldi	r22, 0x70	; 112
 1e4:	77 e1       	ldi	r23, 0x17	; 23
 1e6:	82 e3       	ldi	r24, 0x32	; 50
 1e8:	90 e0       	ldi	r25, 0x00	; 0
			
			
			
		}

	}while (counter < 11); //Går ud af do-while når refliksbrik 7 er nået
 1ea:	73 d0       	rcall	.+230    	; 0x2d2 <carDrive>
 1ec:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1f0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__bss_end>
 1f4:	0b 97       	sbiw	r24, 0x0b	; 11
 1f6:	0c f4       	brge	.+2      	; 0x1fa <driveControl+0xd4>
	
	carStop();
 1f8:	a0 cf       	rjmp	.-192    	; 0x13a <driveControl+0x14>
 1fa:	4b d0       	rcall	.+150    	; 0x292 <carStop>
	//playStop();
	//
	//turnOffUnder();
	//turnOffFront();
	//turnOffRear();
	counter = 0;
 1fc:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__bss_end>
 200:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <initSwitchPort>:

// Læser alle switches samtidigt
unsigned char switchStatus()
{
  return (~PINA);
}
 20a:	11 b8       	out	0x01, r1	; 1
 20c:	08 95       	ret

0000020e <switchOn>:
// Returnerer TRUE, hvis switchen med nummeret
// "switch_nr" er aktiveret - ellers returneres FALSE
unsigned char switchOn(unsigned char switch_nr)
{
unsigned char mask;
  if (switch_nr <= MAX_SWITCH_NR)
 20e:	88 30       	cpi	r24, 0x08	; 8
 210:	58 f4       	brcc	.+22     	; 0x228 <switchOn+0x1a>
  {
    mask = 0b00000001 << switch_nr;
 212:	21 e0       	ldi	r18, 0x01	; 1
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <switchOn+0xe>
 218:	22 0f       	add	r18, r18
 21a:	33 1f       	adc	r19, r19
 21c:	8a 95       	dec	r24
 21e:	e2 f7       	brpl	.-8      	; 0x218 <switchOn+0xa>
    return (~PINA & mask);
 220:	80 b1       	in	r24, 0x00	; 0
 222:	80 95       	com	r24
 224:	82 23       	and	r24, r18
 226:	08 95       	ret
  }
  else
    return 0;
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	08 95       	ret

0000022c <__vector_3>:
unsigned char detection = 0;


//Initialiser interrupt counter - husk playReflex();
ISR(INT2_vect) //refleks registreret
{
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	8f 93       	push	r24
	counter++;
 238:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>

	//}else
	//{
		
	//}
}
 242:	8f 91       	pop	r24
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <main>:



int main(void)
{
	sei();
 24e:	78 94       	sei
	EIMSK=0b00000100;
 250:	84 e0       	ldi	r24, 0x04	; 4
 252:	8d bb       	out	0x1d, r24	; 29
	EICRA=0b00110000;
 254:	80 e3       	ldi	r24, 0x30	; 48
 256:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
	
	//Timer til reflex
	//TCCR1A = 0b00000000;
	//TCCR1B = 0b00000000;
	
	initSystem();
 25a:	62 df       	rcall	.-316    	; 0x120 <initSystem>
	counter = 0;
 25c:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
	
    while (1) 
    {
		if (switchOn(1) != 0)
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	d5 df       	rcall	.-86     	; 0x20e <switchOn>
 264:	88 23       	and	r24, r24
		{
			driveControl(); //start driveControl / System
 266:	e1 f3       	breq	.-8      	; 0x260 <main+0x12>
 268:	5e df       	rcall	.-324    	; 0x126 <driveControl>
 26a:	fa cf       	rjmp	.-12     	; 0x260 <main+0x12>

0000026c <initMotor>:
	while(milliseconds > 0)
	{
		milliseconds--;
		_delay_ms(1);
	}
}
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	93 e0       	ldi	r25, 0x03	; 3
 270:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 274:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 278:	83 ec       	ldi	r24, 0xC3	; 195
 27a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 27e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 282:	8f ef       	ldi	r24, 0xFF	; 255
 284:	84 b9       	out	0x04, r24	; 4
 286:	89 e0       	ldi	r24, 0x09	; 9
 288:	85 b9       	out	0x05, r24	; 5
 28a:	85 b1       	in	r24, 0x05	; 5
 28c:	8e 7f       	andi	r24, 0xFE	; 254
 28e:	85 b9       	out	0x05, r24	; 5
 290:	08 95       	ret

00000292 <carStop>:
 292:	08 c0       	rjmp	.+16     	; 0x2a4 <carStop+0x12>
 294:	e8 e8       	ldi	r30, 0x88	; 136
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	91 81       	ldd	r25, Z+1	; 0x01
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	91 83       	std	Z+1, r25	; 0x01
 2a0:	80 83       	st	Z, r24
 2a2:	e4 d0       	rcall	.+456    	; 0x46c <turnOnRearLightBreak>
 2a4:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 2a8:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 2ac:	8f 3f       	cpi	r24, 0xFF	; 255
 2ae:	93 40       	sbci	r25, 0x03	; 3
 2b0:	89 f7       	brne	.-30     	; 0x294 <carStop+0x2>
 2b2:	e1 e8       	ldi	r30, 0x81	; 129
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	88 7f       	andi	r24, 0xF8	; 248
 2ba:	80 83       	st	Z, r24
 2bc:	08 95       	ret

000002be <delay_us>:

void delay_us(int mikrosekunder)
{
	while(mikrosekunder > 0)
 2be:	05 c0       	rjmp	.+10     	; 0x2ca <delay_us+0xc>
	{
		mikrosekunder--;
 2c0:	01 97       	sbiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c2:	25 e0       	ldi	r18, 0x05	; 5
 2c4:	2a 95       	dec	r18
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <delay_us+0x6>
 2c8:	00 00       	nop
	}
}

void delay_us(int mikrosekunder)
{
	while(mikrosekunder > 0)
 2ca:	18 16       	cp	r1, r24
 2cc:	19 06       	cpc	r1, r25
 2ce:	c4 f3       	brlt	.-16     	; 0x2c0 <delay_us+0x2>
	{
		mikrosekunder--;
		_delay_us(1);
	}
 2d0:	08 95       	ret

000002d2 <carDrive>:
	
}


void carDrive(int speed, int acceleration)
{
 2d2:	af 92       	push	r10
 2d4:	bf 92       	push	r11
 2d6:	cf 92       	push	r12
 2d8:	df 92       	push	r13
 2da:	ef 92       	push	r14
 2dc:	ff 92       	push	r15
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	1f 92       	push	r1
 2e8:	1f 92       	push	r1
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
 2ee:	8c 01       	movw	r16, r24
 2f0:	5b 01       	movw	r10, r22

	if(speed == 100){
 2f2:	84 36       	cpi	r24, 0x64	; 100
 2f4:	91 05       	cpc	r25, r1
 2f6:	11 f4       	brne	.+4      	; 0x2fc <carDrive+0x2a>
	speed = 99;
 2f8:	03 e6       	ldi	r16, 0x63	; 99
 2fa:	10 e0       	ldi	r17, 0x00	; 0
	}
	volatile int requestedSpeed = (1023-((sqrt(speed * speed))*(1023/100))); 
 2fc:	00 9f       	mul	r16, r16
 2fe:	60 01       	movw	r12, r0
 300:	01 9f       	mul	r16, r17
 302:	d0 0c       	add	r13, r0
 304:	d0 0c       	add	r13, r0
 306:	11 24       	eor	r1, r1
 308:	0d 2c       	mov	r0, r13
 30a:	00 0c       	add	r0, r0
 30c:	ee 08       	sbc	r14, r14
 30e:	ff 08       	sbc	r15, r15
 310:	c7 01       	movw	r24, r14
 312:	b6 01       	movw	r22, r12
 314:	5d d1       	rcall	.+698    	; 0x5d0 <__floatsisf>
 316:	4f d2       	rcall	.+1182   	; 0x7b6 <sqrt>
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	40 e2       	ldi	r20, 0x20	; 32
 31e:	51 e4       	ldi	r21, 0x41	; 65
 320:	e3 d1       	rcall	.+966    	; 0x6e8 <__mulsf3>
 322:	9b 01       	movw	r18, r22
 324:	ac 01       	movw	r20, r24
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	70 ec       	ldi	r23, 0xC0	; 192
 32a:	8f e7       	ldi	r24, 0x7F	; 127
 32c:	94 e4       	ldi	r25, 0x44	; 68
 32e:	b8 d0       	rcall	.+368    	; 0x4a0 <__subsf3>
 330:	1c d1       	rcall	.+568    	; 0x56a <__fixsfsi>
 332:	7a 83       	std	Y+2, r23	; 0x02
 334:	69 83       	std	Y+1, r22	; 0x01
	
	if (speed == 0) //bilen skal holde stille.
 336:	01 15       	cp	r16, r1
 338:	11 05       	cpc	r17, r1
 33a:	11 f4       	brne	.+4      	; 0x340 <carDrive+0x6e>
	{
		carStop();
 33c:	aa df       	rcall	.-172    	; 0x292 <carStop>
 33e:	89 c0       	rjmp	.+274    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		return;
 340:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	}
	if ((TCCR1B & 0b00000010) == 0)
 344:	81 fd       	sbrc	r24, 1
 346:	05 c0       	rjmp	.+10     	; 0x352 <carDrive+0x80>
 348:	e1 e8       	ldi	r30, 0x81	; 129
	{
		TCCR1B = TCCR1B | 0b00000010;
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	82 60       	ori	r24, 0x02	; 2
 350:	80 83       	st	Z, r24
 352:	11 23       	and	r17, r17
	}
	if (speed < 0) //bilen skal køre baglæns.
 354:	0c f0       	brlt	.+2      	; 0x358 <carDrive+0x86>
 356:	3f c0       	rjmp	.+126    	; 0x3d6 <carDrive+0x104>
 358:	85 b1       	in	r24, 0x05	; 5
	{
		if (PORTB == 0b00001000) //hvis bit 3 er sat, kører bilen fremad.
 35a:	88 30       	cpi	r24, 0x08	; 8
 35c:	a1 f4       	brne	.+40     	; 0x386 <carDrive+0xb4>
 35e:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		{
			if (OCR1A == 0x3FF) //tjekker om bilen holder stille.
 362:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 366:	8f 3f       	cpi	r24, 0xFF	; 255
 368:	93 40       	sbci	r25, 0x03	; 3
 36a:	11 f4       	brne	.+4      	; 0x370 <carDrive+0x9e>
 36c:	15 b8       	out	0x05, r1	; 5
			{
				PORTB = 0b00000000; //clearer bit 3, så bilen bakker. 
 36e:	71 c0       	rjmp	.+226    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 370:	e8 e8       	ldi	r30, 0x88	; 136
			}
			else
			{
				OCR1A++;
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	91 81       	ldd	r25, Z+1	; 0x01
 378:	01 96       	adiw	r24, 0x01	; 1
 37a:	91 83       	std	Z+1, r25	; 0x01
				turnOnRearLightBreak();
 37c:	80 83       	st	Z, r24
 37e:	76 d0       	rcall	.+236    	; 0x46c <turnOnRearLightBreak>
				delay_us(acceleration);
 380:	c5 01       	movw	r24, r10
 382:	9d df       	rcall	.-198    	; 0x2be <delay_us>
 384:	66 c0       	rjmp	.+204    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 386:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			}
		}
		
		else //bilen kører allerede baglæns.
		{
			if (OCR1A < requestedSpeed) //hvis bilen kører for hurtigt.
 38a:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 38e:	89 81       	ldd	r24, Y+1	; 0x01
 390:	9a 81       	ldd	r25, Y+2	; 0x02
 392:	28 17       	cp	r18, r24
 394:	39 07       	cpc	r19, r25
 396:	58 f4       	brcc	.+22     	; 0x3ae <carDrive+0xdc>
			{
				OCR1A++;
 398:	e8 e8       	ldi	r30, 0x88	; 136
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	91 81       	ldd	r25, Z+1	; 0x01
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	91 83       	std	Z+1, r25	; 0x01
				turnOnRearLightBreak();
 3a4:	80 83       	st	Z, r24
 3a6:	62 d0       	rcall	.+196    	; 0x46c <turnOnRearLightBreak>
				delay_us(acceleration);
 3a8:	c5 01       	movw	r24, r10
 3aa:	89 df       	rcall	.-238    	; 0x2be <delay_us>
 3ac:	52 c0       	rjmp	.+164    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 3ae:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			}
			else if (OCR1A > requestedSpeed) //hvis bilen kører for langsomt.
 3b2:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	9a 81       	ldd	r25, Y+2	; 0x02
 3ba:	82 17       	cp	r24, r18
 3bc:	93 07       	cpc	r25, r19
 3be:	08 f0       	brcs	.+2      	; 0x3c2 <carDrive+0xf0>
 3c0:	48 c0       	rjmp	.+144    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
			{
				OCR1A--;
 3c2:	e8 e8       	ldi	r30, 0x88	; 136
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	91 81       	ldd	r25, Z+1	; 0x01
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	91 83       	std	Z+1, r25	; 0x01
 3ce:	80 83       	st	Z, r24
				delay_us(acceleration);
 3d0:	c5 01       	movw	r24, r10
 3d2:	75 df       	rcall	.-278    	; 0x2be <delay_us>
 3d4:	3e c0       	rjmp	.+124    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 3d6:	85 b1       	in	r24, 0x05	; 5
		}
	}
	
	else //bilen skal køre forlæns.
	{
		if (PORTB == 0b00001000) //hvis bit 3 er sat, kører bilen fremad.
 3d8:	88 30       	cpi	r24, 0x08	; 8
 3da:	39 f5       	brne	.+78     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 3dc:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		{
			if (OCR1A < requestedSpeed) //hvis bilen kører for hurtigt.
 3e0:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3e4:	89 81       	ldd	r24, Y+1	; 0x01
 3e6:	9a 81       	ldd	r25, Y+2	; 0x02
 3e8:	28 17       	cp	r18, r24
 3ea:	39 07       	cpc	r19, r25
			{
				OCR1A++;
 3ec:	58 f4       	brcc	.+22     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3ee:	e8 e8       	ldi	r30, 0x88	; 136
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	91 81       	ldd	r25, Z+1	; 0x01
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	91 83       	std	Z+1, r25	; 0x01
				turnOnRearLightBreak();
 3fa:	80 83       	st	Z, r24
 3fc:	37 d0       	rcall	.+110    	; 0x46c <turnOnRearLightBreak>
				delay_us(acceleration);
 3fe:	c5 01       	movw	r24, r10
 400:	5e df       	rcall	.-324    	; 0x2be <delay_us>
 402:	27 c0       	rjmp	.+78     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 404:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			}
			else if (OCR1A > requestedSpeed) //hvis bilen kører for langsomt.
 408:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 40c:	89 81       	ldd	r24, Y+1	; 0x01
 40e:	9a 81       	ldd	r25, Y+2	; 0x02
 410:	82 17       	cp	r24, r18
 412:	93 07       	cpc	r25, r19
 414:	f0 f4       	brcc	.+60     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
			{
				OCR1A = OCR1A-1;
 416:	e8 e8       	ldi	r30, 0x88	; 136
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	91 81       	ldd	r25, Z+1	; 0x01
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	91 83       	std	Z+1, r25	; 0x01
 422:	80 83       	st	Z, r24
				delay_us(acceleration);
 424:	c5 01       	movw	r24, r10
 426:	4b df       	rcall	.-362    	; 0x2be <delay_us>
 428:	14 c0       	rjmp	.+40     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 42a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
				return;
			}	
		}
		else //bilen køererer baglæns.
		{
			if (OCR1A == 0x3FF) //tjekker om bilen holder stille.
 42e:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 432:	8f 3f       	cpi	r24, 0xFF	; 255
 434:	93 40       	sbci	r25, 0x03	; 3
			{
				PORTB = 0b00001000; //setter bit 3, så bilen køererererer forlæns.
 436:	19 f4       	brne	.+6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 438:	88 e0       	ldi	r24, 0x08	; 8
 43a:	85 b9       	out	0x05, r24	; 5
			}
			else
			{
				OCR1A++;
 43c:	0a c0       	rjmp	.+20     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 43e:	e8 e8       	ldi	r30, 0x88	; 136
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	80 81       	ld	r24, Z
 444:	91 81       	ldd	r25, Z+1	; 0x01
 446:	01 96       	adiw	r24, 0x01	; 1
 448:	91 83       	std	Z+1, r25	; 0x01
				turnOnRearLightBreak();
 44a:	80 83       	st	Z, r24
 44c:	0f d0       	rcall	.+30     	; 0x46c <turnOnRearLightBreak>
				delay_us(acceleration);
 44e:	c5 01       	movw	r24, r10
 450:	36 df       	rcall	.-404    	; 0x2be <delay_us>
 452:	0f 90       	pop	r0
			}
		}

	}
}
 454:	0f 90       	pop	r0
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	1f 91       	pop	r17
 45c:	0f 91       	pop	r16
 45e:	ff 90       	pop	r15
 460:	ef 90       	pop	r14
 462:	df 90       	pop	r13
 464:	cf 90       	pop	r12
 466:	bf 90       	pop	r11
 468:	af 90       	pop	r10
 46a:	08 95       	ret

0000046c <turnOnRearLightBreak>:
 46c:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCCR4B = 0b00000000;
}

void turnOnRearLightBreak (void)
{
	if (OCR3A!=1023)
 470:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 474:	8f 3f       	cpi	r24, 0xFF	; 255
 476:	93 40       	sbci	r25, 0x03	; 3
 478:	61 f0       	breq	.+24     	; 0x492 <turnOnRearLightBreak+0x26>
	{
		TCCR3B = 0b00000001;
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
		OCR3A=1023;
 480:	8f ef       	ldi	r24, 0xFF	; 255
 482:	93 e0       	ldi	r25, 0x03	; 3
 484:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 488:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
		TCCR4B = 0b00000101;
 48c:	85 e0       	ldi	r24, 0x05	; 5
 48e:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
	}
	
	TCNT4 = 57724;
 492:	8c e7       	ldi	r24, 0x7C	; 124
 494:	91 ee       	ldi	r25, 0xE1	; 225
 496:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
 49a:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
 49e:	08 95       	ret

000004a0 <__subsf3>:
 4a0:	50 58       	subi	r21, 0x80	; 128

000004a2 <__addsf3>:
 4a2:	bb 27       	eor	r27, r27
 4a4:	aa 27       	eor	r26, r26
 4a6:	0e d0       	rcall	.+28     	; 0x4c4 <__addsf3x>
 4a8:	e5 c0       	rjmp	.+458    	; 0x674 <__fp_round>
 4aa:	d6 d0       	rcall	.+428    	; 0x658 <__fp_pscA>
 4ac:	30 f0       	brcs	.+12     	; 0x4ba <__addsf3+0x18>
 4ae:	db d0       	rcall	.+438    	; 0x666 <__fp_pscB>
 4b0:	20 f0       	brcs	.+8      	; 0x4ba <__addsf3+0x18>
 4b2:	31 f4       	brne	.+12     	; 0x4c0 <__addsf3+0x1e>
 4b4:	9f 3f       	cpi	r25, 0xFF	; 255
 4b6:	11 f4       	brne	.+4      	; 0x4bc <__addsf3+0x1a>
 4b8:	1e f4       	brtc	.+6      	; 0x4c0 <__addsf3+0x1e>
 4ba:	cb c0       	rjmp	.+406    	; 0x652 <__fp_nan>
 4bc:	0e f4       	brtc	.+2      	; 0x4c0 <__addsf3+0x1e>
 4be:	e0 95       	com	r30
 4c0:	e7 fb       	bst	r30, 7
 4c2:	c1 c0       	rjmp	.+386    	; 0x646 <__fp_inf>

000004c4 <__addsf3x>:
 4c4:	e9 2f       	mov	r30, r25
 4c6:	e7 d0       	rcall	.+462    	; 0x696 <__fp_split3>
 4c8:	80 f3       	brcs	.-32     	; 0x4aa <__addsf3+0x8>
 4ca:	ba 17       	cp	r27, r26
 4cc:	62 07       	cpc	r22, r18
 4ce:	73 07       	cpc	r23, r19
 4d0:	84 07       	cpc	r24, r20
 4d2:	95 07       	cpc	r25, r21
 4d4:	18 f0       	brcs	.+6      	; 0x4dc <__addsf3x+0x18>
 4d6:	71 f4       	brne	.+28     	; 0x4f4 <__addsf3x+0x30>
 4d8:	9e f5       	brtc	.+102    	; 0x540 <__addsf3x+0x7c>
 4da:	ff c0       	rjmp	.+510    	; 0x6da <__fp_zero>
 4dc:	0e f4       	brtc	.+2      	; 0x4e0 <__addsf3x+0x1c>
 4de:	e0 95       	com	r30
 4e0:	0b 2e       	mov	r0, r27
 4e2:	ba 2f       	mov	r27, r26
 4e4:	a0 2d       	mov	r26, r0
 4e6:	0b 01       	movw	r0, r22
 4e8:	b9 01       	movw	r22, r18
 4ea:	90 01       	movw	r18, r0
 4ec:	0c 01       	movw	r0, r24
 4ee:	ca 01       	movw	r24, r20
 4f0:	a0 01       	movw	r20, r0
 4f2:	11 24       	eor	r1, r1
 4f4:	ff 27       	eor	r31, r31
 4f6:	59 1b       	sub	r21, r25
 4f8:	99 f0       	breq	.+38     	; 0x520 <__addsf3x+0x5c>
 4fa:	59 3f       	cpi	r21, 0xF9	; 249
 4fc:	50 f4       	brcc	.+20     	; 0x512 <__addsf3x+0x4e>
 4fe:	50 3e       	cpi	r21, 0xE0	; 224
 500:	68 f1       	brcs	.+90     	; 0x55c <__addsf3x+0x98>
 502:	1a 16       	cp	r1, r26
 504:	f0 40       	sbci	r31, 0x00	; 0
 506:	a2 2f       	mov	r26, r18
 508:	23 2f       	mov	r18, r19
 50a:	34 2f       	mov	r19, r20
 50c:	44 27       	eor	r20, r20
 50e:	58 5f       	subi	r21, 0xF8	; 248
 510:	f3 cf       	rjmp	.-26     	; 0x4f8 <__addsf3x+0x34>
 512:	46 95       	lsr	r20
 514:	37 95       	ror	r19
 516:	27 95       	ror	r18
 518:	a7 95       	ror	r26
 51a:	f0 40       	sbci	r31, 0x00	; 0
 51c:	53 95       	inc	r21
 51e:	c9 f7       	brne	.-14     	; 0x512 <__addsf3x+0x4e>
 520:	7e f4       	brtc	.+30     	; 0x540 <__addsf3x+0x7c>
 522:	1f 16       	cp	r1, r31
 524:	ba 0b       	sbc	r27, r26
 526:	62 0b       	sbc	r22, r18
 528:	73 0b       	sbc	r23, r19
 52a:	84 0b       	sbc	r24, r20
 52c:	ba f0       	brmi	.+46     	; 0x55c <__addsf3x+0x98>
 52e:	91 50       	subi	r25, 0x01	; 1
 530:	a1 f0       	breq	.+40     	; 0x55a <__addsf3x+0x96>
 532:	ff 0f       	add	r31, r31
 534:	bb 1f       	adc	r27, r27
 536:	66 1f       	adc	r22, r22
 538:	77 1f       	adc	r23, r23
 53a:	88 1f       	adc	r24, r24
 53c:	c2 f7       	brpl	.-16     	; 0x52e <__addsf3x+0x6a>
 53e:	0e c0       	rjmp	.+28     	; 0x55c <__addsf3x+0x98>
 540:	ba 0f       	add	r27, r26
 542:	62 1f       	adc	r22, r18
 544:	73 1f       	adc	r23, r19
 546:	84 1f       	adc	r24, r20
 548:	48 f4       	brcc	.+18     	; 0x55c <__addsf3x+0x98>
 54a:	87 95       	ror	r24
 54c:	77 95       	ror	r23
 54e:	67 95       	ror	r22
 550:	b7 95       	ror	r27
 552:	f7 95       	ror	r31
 554:	9e 3f       	cpi	r25, 0xFE	; 254
 556:	08 f0       	brcs	.+2      	; 0x55a <__addsf3x+0x96>
 558:	b3 cf       	rjmp	.-154    	; 0x4c0 <__addsf3+0x1e>
 55a:	93 95       	inc	r25
 55c:	88 0f       	add	r24, r24
 55e:	08 f0       	brcs	.+2      	; 0x562 <__addsf3x+0x9e>
 560:	99 27       	eor	r25, r25
 562:	ee 0f       	add	r30, r30
 564:	97 95       	ror	r25
 566:	87 95       	ror	r24
 568:	08 95       	ret

0000056a <__fixsfsi>:
 56a:	04 d0       	rcall	.+8      	; 0x574 <__fixunssfsi>
 56c:	68 94       	set
 56e:	b1 11       	cpse	r27, r1
 570:	b5 c0       	rjmp	.+362    	; 0x6dc <__fp_szero>
 572:	08 95       	ret

00000574 <__fixunssfsi>:
 574:	98 d0       	rcall	.+304    	; 0x6a6 <__fp_splitA>
 576:	88 f0       	brcs	.+34     	; 0x59a <__fixunssfsi+0x26>
 578:	9f 57       	subi	r25, 0x7F	; 127
 57a:	90 f0       	brcs	.+36     	; 0x5a0 <__fixunssfsi+0x2c>
 57c:	b9 2f       	mov	r27, r25
 57e:	99 27       	eor	r25, r25
 580:	b7 51       	subi	r27, 0x17	; 23
 582:	a0 f0       	brcs	.+40     	; 0x5ac <__fixunssfsi+0x38>
 584:	d1 f0       	breq	.+52     	; 0x5ba <__fixunssfsi+0x46>
 586:	66 0f       	add	r22, r22
 588:	77 1f       	adc	r23, r23
 58a:	88 1f       	adc	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	1a f0       	brmi	.+6      	; 0x596 <__fixunssfsi+0x22>
 590:	ba 95       	dec	r27
 592:	c9 f7       	brne	.-14     	; 0x586 <__fixunssfsi+0x12>
 594:	12 c0       	rjmp	.+36     	; 0x5ba <__fixunssfsi+0x46>
 596:	b1 30       	cpi	r27, 0x01	; 1
 598:	81 f0       	breq	.+32     	; 0x5ba <__fixunssfsi+0x46>
 59a:	9f d0       	rcall	.+318    	; 0x6da <__fp_zero>
 59c:	b1 e0       	ldi	r27, 0x01	; 1
 59e:	08 95       	ret
 5a0:	9c c0       	rjmp	.+312    	; 0x6da <__fp_zero>
 5a2:	67 2f       	mov	r22, r23
 5a4:	78 2f       	mov	r23, r24
 5a6:	88 27       	eor	r24, r24
 5a8:	b8 5f       	subi	r27, 0xF8	; 248
 5aa:	39 f0       	breq	.+14     	; 0x5ba <__fixunssfsi+0x46>
 5ac:	b9 3f       	cpi	r27, 0xF9	; 249
 5ae:	cc f3       	brlt	.-14     	; 0x5a2 <__fixunssfsi+0x2e>
 5b0:	86 95       	lsr	r24
 5b2:	77 95       	ror	r23
 5b4:	67 95       	ror	r22
 5b6:	b3 95       	inc	r27
 5b8:	d9 f7       	brne	.-10     	; 0x5b0 <__fixunssfsi+0x3c>
 5ba:	3e f4       	brtc	.+14     	; 0x5ca <__fixunssfsi+0x56>
 5bc:	90 95       	com	r25
 5be:	80 95       	com	r24
 5c0:	70 95       	com	r23
 5c2:	61 95       	neg	r22
 5c4:	7f 4f       	sbci	r23, 0xFF	; 255
 5c6:	8f 4f       	sbci	r24, 0xFF	; 255
 5c8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ca:	08 95       	ret

000005cc <__floatunsisf>:
 5cc:	e8 94       	clt
 5ce:	09 c0       	rjmp	.+18     	; 0x5e2 <__floatsisf+0x12>

000005d0 <__floatsisf>:
 5d0:	97 fb       	bst	r25, 7
 5d2:	3e f4       	brtc	.+14     	; 0x5e2 <__floatsisf+0x12>
 5d4:	90 95       	com	r25
 5d6:	80 95       	com	r24
 5d8:	70 95       	com	r23
 5da:	61 95       	neg	r22
 5dc:	7f 4f       	sbci	r23, 0xFF	; 255
 5de:	8f 4f       	sbci	r24, 0xFF	; 255
 5e0:	9f 4f       	sbci	r25, 0xFF	; 255
 5e2:	99 23       	and	r25, r25
 5e4:	a9 f0       	breq	.+42     	; 0x610 <__floatsisf+0x40>
 5e6:	f9 2f       	mov	r31, r25
 5e8:	96 e9       	ldi	r25, 0x96	; 150
 5ea:	bb 27       	eor	r27, r27
 5ec:	93 95       	inc	r25
 5ee:	f6 95       	lsr	r31
 5f0:	87 95       	ror	r24
 5f2:	77 95       	ror	r23
 5f4:	67 95       	ror	r22
 5f6:	b7 95       	ror	r27
 5f8:	f1 11       	cpse	r31, r1
 5fa:	f8 cf       	rjmp	.-16     	; 0x5ec <__floatsisf+0x1c>
 5fc:	fa f4       	brpl	.+62     	; 0x63c <__floatsisf+0x6c>
 5fe:	bb 0f       	add	r27, r27
 600:	11 f4       	brne	.+4      	; 0x606 <__floatsisf+0x36>
 602:	60 ff       	sbrs	r22, 0
 604:	1b c0       	rjmp	.+54     	; 0x63c <__floatsisf+0x6c>
 606:	6f 5f       	subi	r22, 0xFF	; 255
 608:	7f 4f       	sbci	r23, 0xFF	; 255
 60a:	8f 4f       	sbci	r24, 0xFF	; 255
 60c:	9f 4f       	sbci	r25, 0xFF	; 255
 60e:	16 c0       	rjmp	.+44     	; 0x63c <__floatsisf+0x6c>
 610:	88 23       	and	r24, r24
 612:	11 f0       	breq	.+4      	; 0x618 <__floatsisf+0x48>
 614:	96 e9       	ldi	r25, 0x96	; 150
 616:	11 c0       	rjmp	.+34     	; 0x63a <__floatsisf+0x6a>
 618:	77 23       	and	r23, r23
 61a:	21 f0       	breq	.+8      	; 0x624 <__floatsisf+0x54>
 61c:	9e e8       	ldi	r25, 0x8E	; 142
 61e:	87 2f       	mov	r24, r23
 620:	76 2f       	mov	r23, r22
 622:	05 c0       	rjmp	.+10     	; 0x62e <__floatsisf+0x5e>
 624:	66 23       	and	r22, r22
 626:	71 f0       	breq	.+28     	; 0x644 <__floatsisf+0x74>
 628:	96 e8       	ldi	r25, 0x86	; 134
 62a:	86 2f       	mov	r24, r22
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	60 e0       	ldi	r22, 0x00	; 0
 630:	2a f0       	brmi	.+10     	; 0x63c <__floatsisf+0x6c>
 632:	9a 95       	dec	r25
 634:	66 0f       	add	r22, r22
 636:	77 1f       	adc	r23, r23
 638:	88 1f       	adc	r24, r24
 63a:	da f7       	brpl	.-10     	; 0x632 <__floatsisf+0x62>
 63c:	88 0f       	add	r24, r24
 63e:	96 95       	lsr	r25
 640:	87 95       	ror	r24
 642:	97 f9       	bld	r25, 7
 644:	08 95       	ret

00000646 <__fp_inf>:
 646:	97 f9       	bld	r25, 7
 648:	9f 67       	ori	r25, 0x7F	; 127
 64a:	80 e8       	ldi	r24, 0x80	; 128
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	60 e0       	ldi	r22, 0x00	; 0
 650:	08 95       	ret

00000652 <__fp_nan>:
 652:	9f ef       	ldi	r25, 0xFF	; 255
 654:	80 ec       	ldi	r24, 0xC0	; 192
 656:	08 95       	ret

00000658 <__fp_pscA>:
 658:	00 24       	eor	r0, r0
 65a:	0a 94       	dec	r0
 65c:	16 16       	cp	r1, r22
 65e:	17 06       	cpc	r1, r23
 660:	18 06       	cpc	r1, r24
 662:	09 06       	cpc	r0, r25
 664:	08 95       	ret

00000666 <__fp_pscB>:
 666:	00 24       	eor	r0, r0
 668:	0a 94       	dec	r0
 66a:	12 16       	cp	r1, r18
 66c:	13 06       	cpc	r1, r19
 66e:	14 06       	cpc	r1, r20
 670:	05 06       	cpc	r0, r21
 672:	08 95       	ret

00000674 <__fp_round>:
 674:	09 2e       	mov	r0, r25
 676:	03 94       	inc	r0
 678:	00 0c       	add	r0, r0
 67a:	11 f4       	brne	.+4      	; 0x680 <__fp_round+0xc>
 67c:	88 23       	and	r24, r24
 67e:	52 f0       	brmi	.+20     	; 0x694 <__fp_round+0x20>
 680:	bb 0f       	add	r27, r27
 682:	40 f4       	brcc	.+16     	; 0x694 <__fp_round+0x20>
 684:	bf 2b       	or	r27, r31
 686:	11 f4       	brne	.+4      	; 0x68c <__fp_round+0x18>
 688:	60 ff       	sbrs	r22, 0
 68a:	04 c0       	rjmp	.+8      	; 0x694 <__fp_round+0x20>
 68c:	6f 5f       	subi	r22, 0xFF	; 255
 68e:	7f 4f       	sbci	r23, 0xFF	; 255
 690:	8f 4f       	sbci	r24, 0xFF	; 255
 692:	9f 4f       	sbci	r25, 0xFF	; 255
 694:	08 95       	ret

00000696 <__fp_split3>:
 696:	57 fd       	sbrc	r21, 7
 698:	90 58       	subi	r25, 0x80	; 128
 69a:	44 0f       	add	r20, r20
 69c:	55 1f       	adc	r21, r21
 69e:	59 f0       	breq	.+22     	; 0x6b6 <__fp_splitA+0x10>
 6a0:	5f 3f       	cpi	r21, 0xFF	; 255
 6a2:	71 f0       	breq	.+28     	; 0x6c0 <__fp_splitA+0x1a>
 6a4:	47 95       	ror	r20

000006a6 <__fp_splitA>:
 6a6:	88 0f       	add	r24, r24
 6a8:	97 fb       	bst	r25, 7
 6aa:	99 1f       	adc	r25, r25
 6ac:	61 f0       	breq	.+24     	; 0x6c6 <__fp_splitA+0x20>
 6ae:	9f 3f       	cpi	r25, 0xFF	; 255
 6b0:	79 f0       	breq	.+30     	; 0x6d0 <__fp_splitA+0x2a>
 6b2:	87 95       	ror	r24
 6b4:	08 95       	ret
 6b6:	12 16       	cp	r1, r18
 6b8:	13 06       	cpc	r1, r19
 6ba:	14 06       	cpc	r1, r20
 6bc:	55 1f       	adc	r21, r21
 6be:	f2 cf       	rjmp	.-28     	; 0x6a4 <__fp_split3+0xe>
 6c0:	46 95       	lsr	r20
 6c2:	f1 df       	rcall	.-30     	; 0x6a6 <__fp_splitA>
 6c4:	08 c0       	rjmp	.+16     	; 0x6d6 <__fp_splitA+0x30>
 6c6:	16 16       	cp	r1, r22
 6c8:	17 06       	cpc	r1, r23
 6ca:	18 06       	cpc	r1, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	f1 cf       	rjmp	.-30     	; 0x6b2 <__fp_splitA+0xc>
 6d0:	86 95       	lsr	r24
 6d2:	71 05       	cpc	r23, r1
 6d4:	61 05       	cpc	r22, r1
 6d6:	08 94       	sec
 6d8:	08 95       	ret

000006da <__fp_zero>:
 6da:	e8 94       	clt

000006dc <__fp_szero>:
 6dc:	bb 27       	eor	r27, r27
 6de:	66 27       	eor	r22, r22
 6e0:	77 27       	eor	r23, r23
 6e2:	cb 01       	movw	r24, r22
 6e4:	97 f9       	bld	r25, 7
 6e6:	08 95       	ret

000006e8 <__mulsf3>:
 6e8:	0b d0       	rcall	.+22     	; 0x700 <__mulsf3x>
 6ea:	c4 cf       	rjmp	.-120    	; 0x674 <__fp_round>
 6ec:	b5 df       	rcall	.-150    	; 0x658 <__fp_pscA>
 6ee:	28 f0       	brcs	.+10     	; 0x6fa <__mulsf3+0x12>
 6f0:	ba df       	rcall	.-140    	; 0x666 <__fp_pscB>
 6f2:	18 f0       	brcs	.+6      	; 0x6fa <__mulsf3+0x12>
 6f4:	95 23       	and	r25, r21
 6f6:	09 f0       	breq	.+2      	; 0x6fa <__mulsf3+0x12>
 6f8:	a6 cf       	rjmp	.-180    	; 0x646 <__fp_inf>
 6fa:	ab cf       	rjmp	.-170    	; 0x652 <__fp_nan>
 6fc:	11 24       	eor	r1, r1
 6fe:	ee cf       	rjmp	.-36     	; 0x6dc <__fp_szero>

00000700 <__mulsf3x>:
 700:	ca df       	rcall	.-108    	; 0x696 <__fp_split3>
 702:	a0 f3       	brcs	.-24     	; 0x6ec <__mulsf3+0x4>

00000704 <__mulsf3_pse>:
 704:	95 9f       	mul	r25, r21
 706:	d1 f3       	breq	.-12     	; 0x6fc <__mulsf3+0x14>
 708:	95 0f       	add	r25, r21
 70a:	50 e0       	ldi	r21, 0x00	; 0
 70c:	55 1f       	adc	r21, r21
 70e:	62 9f       	mul	r22, r18
 710:	f0 01       	movw	r30, r0
 712:	72 9f       	mul	r23, r18
 714:	bb 27       	eor	r27, r27
 716:	f0 0d       	add	r31, r0
 718:	b1 1d       	adc	r27, r1
 71a:	63 9f       	mul	r22, r19
 71c:	aa 27       	eor	r26, r26
 71e:	f0 0d       	add	r31, r0
 720:	b1 1d       	adc	r27, r1
 722:	aa 1f       	adc	r26, r26
 724:	64 9f       	mul	r22, r20
 726:	66 27       	eor	r22, r22
 728:	b0 0d       	add	r27, r0
 72a:	a1 1d       	adc	r26, r1
 72c:	66 1f       	adc	r22, r22
 72e:	82 9f       	mul	r24, r18
 730:	22 27       	eor	r18, r18
 732:	b0 0d       	add	r27, r0
 734:	a1 1d       	adc	r26, r1
 736:	62 1f       	adc	r22, r18
 738:	73 9f       	mul	r23, r19
 73a:	b0 0d       	add	r27, r0
 73c:	a1 1d       	adc	r26, r1
 73e:	62 1f       	adc	r22, r18
 740:	83 9f       	mul	r24, r19
 742:	a0 0d       	add	r26, r0
 744:	61 1d       	adc	r22, r1
 746:	22 1f       	adc	r18, r18
 748:	74 9f       	mul	r23, r20
 74a:	33 27       	eor	r19, r19
 74c:	a0 0d       	add	r26, r0
 74e:	61 1d       	adc	r22, r1
 750:	23 1f       	adc	r18, r19
 752:	84 9f       	mul	r24, r20
 754:	60 0d       	add	r22, r0
 756:	21 1d       	adc	r18, r1
 758:	82 2f       	mov	r24, r18
 75a:	76 2f       	mov	r23, r22
 75c:	6a 2f       	mov	r22, r26
 75e:	11 24       	eor	r1, r1
 760:	9f 57       	subi	r25, 0x7F	; 127
 762:	50 40       	sbci	r21, 0x00	; 0
 764:	8a f0       	brmi	.+34     	; 0x788 <__mulsf3_pse+0x84>
 766:	e1 f0       	breq	.+56     	; 0x7a0 <__mulsf3_pse+0x9c>
 768:	88 23       	and	r24, r24
 76a:	4a f0       	brmi	.+18     	; 0x77e <__mulsf3_pse+0x7a>
 76c:	ee 0f       	add	r30, r30
 76e:	ff 1f       	adc	r31, r31
 770:	bb 1f       	adc	r27, r27
 772:	66 1f       	adc	r22, r22
 774:	77 1f       	adc	r23, r23
 776:	88 1f       	adc	r24, r24
 778:	91 50       	subi	r25, 0x01	; 1
 77a:	50 40       	sbci	r21, 0x00	; 0
 77c:	a9 f7       	brne	.-22     	; 0x768 <__mulsf3_pse+0x64>
 77e:	9e 3f       	cpi	r25, 0xFE	; 254
 780:	51 05       	cpc	r21, r1
 782:	70 f0       	brcs	.+28     	; 0x7a0 <__mulsf3_pse+0x9c>
 784:	60 cf       	rjmp	.-320    	; 0x646 <__fp_inf>
 786:	aa cf       	rjmp	.-172    	; 0x6dc <__fp_szero>
 788:	5f 3f       	cpi	r21, 0xFF	; 255
 78a:	ec f3       	brlt	.-6      	; 0x786 <__mulsf3_pse+0x82>
 78c:	98 3e       	cpi	r25, 0xE8	; 232
 78e:	dc f3       	brlt	.-10     	; 0x786 <__mulsf3_pse+0x82>
 790:	86 95       	lsr	r24
 792:	77 95       	ror	r23
 794:	67 95       	ror	r22
 796:	b7 95       	ror	r27
 798:	f7 95       	ror	r31
 79a:	e7 95       	ror	r30
 79c:	9f 5f       	subi	r25, 0xFF	; 255
 79e:	c1 f7       	brne	.-16     	; 0x790 <__mulsf3_pse+0x8c>
 7a0:	fe 2b       	or	r31, r30
 7a2:	88 0f       	add	r24, r24
 7a4:	91 1d       	adc	r25, r1
 7a6:	96 95       	lsr	r25
 7a8:	87 95       	ror	r24
 7aa:	97 f9       	bld	r25, 7
 7ac:	08 95       	ret
 7ae:	11 f4       	brne	.+4      	; 0x7b4 <__mulsf3_pse+0xb0>
 7b0:	0e f4       	brtc	.+2      	; 0x7b4 <__mulsf3_pse+0xb0>
 7b2:	4f cf       	rjmp	.-354    	; 0x652 <__fp_nan>
 7b4:	3e c0       	rjmp	.+124    	; 0x832 <__fp_mpack>

000007b6 <sqrt>:
 7b6:	77 df       	rcall	.-274    	; 0x6a6 <__fp_splitA>
 7b8:	d0 f3       	brcs	.-12     	; 0x7ae <__mulsf3_pse+0xaa>
 7ba:	99 23       	and	r25, r25
 7bc:	d9 f3       	breq	.-10     	; 0x7b4 <__mulsf3_pse+0xb0>
 7be:	ce f3       	brts	.-14     	; 0x7b2 <__mulsf3_pse+0xae>
 7c0:	9f 57       	subi	r25, 0x7F	; 127
 7c2:	55 0b       	sbc	r21, r21
 7c4:	87 ff       	sbrs	r24, 7
 7c6:	43 d0       	rcall	.+134    	; 0x84e <__fp_norm2>
 7c8:	00 24       	eor	r0, r0
 7ca:	a0 e6       	ldi	r26, 0x60	; 96
 7cc:	40 ea       	ldi	r20, 0xA0	; 160
 7ce:	90 01       	movw	r18, r0
 7d0:	80 58       	subi	r24, 0x80	; 128
 7d2:	56 95       	lsr	r21
 7d4:	97 95       	ror	r25
 7d6:	28 f4       	brcc	.+10     	; 0x7e2 <sqrt+0x2c>
 7d8:	80 5c       	subi	r24, 0xC0	; 192
 7da:	66 0f       	add	r22, r22
 7dc:	77 1f       	adc	r23, r23
 7de:	88 1f       	adc	r24, r24
 7e0:	20 f0       	brcs	.+8      	; 0x7ea <sqrt+0x34>
 7e2:	26 17       	cp	r18, r22
 7e4:	37 07       	cpc	r19, r23
 7e6:	48 07       	cpc	r20, r24
 7e8:	30 f4       	brcc	.+12     	; 0x7f6 <sqrt+0x40>
 7ea:	62 1b       	sub	r22, r18
 7ec:	73 0b       	sbc	r23, r19
 7ee:	84 0b       	sbc	r24, r20
 7f0:	20 29       	or	r18, r0
 7f2:	31 29       	or	r19, r1
 7f4:	4a 2b       	or	r20, r26
 7f6:	a6 95       	lsr	r26
 7f8:	17 94       	ror	r1
 7fa:	07 94       	ror	r0
 7fc:	20 25       	eor	r18, r0
 7fe:	31 25       	eor	r19, r1
 800:	4a 27       	eor	r20, r26
 802:	58 f7       	brcc	.-42     	; 0x7da <sqrt+0x24>
 804:	66 0f       	add	r22, r22
 806:	77 1f       	adc	r23, r23
 808:	88 1f       	adc	r24, r24
 80a:	20 f0       	brcs	.+8      	; 0x814 <sqrt+0x5e>
 80c:	26 17       	cp	r18, r22
 80e:	37 07       	cpc	r19, r23
 810:	48 07       	cpc	r20, r24
 812:	30 f4       	brcc	.+12     	; 0x820 <sqrt+0x6a>
 814:	62 0b       	sbc	r22, r18
 816:	73 0b       	sbc	r23, r19
 818:	84 0b       	sbc	r24, r20
 81a:	20 0d       	add	r18, r0
 81c:	31 1d       	adc	r19, r1
 81e:	41 1d       	adc	r20, r1
 820:	a0 95       	com	r26
 822:	81 f7       	brne	.-32     	; 0x804 <sqrt+0x4e>
 824:	b9 01       	movw	r22, r18
 826:	84 2f       	mov	r24, r20
 828:	91 58       	subi	r25, 0x81	; 129
 82a:	88 0f       	add	r24, r24
 82c:	96 95       	lsr	r25
 82e:	87 95       	ror	r24
 830:	08 95       	ret

00000832 <__fp_mpack>:
 832:	9f 3f       	cpi	r25, 0xFF	; 255
 834:	31 f0       	breq	.+12     	; 0x842 <__fp_mpack_finite+0xc>

00000836 <__fp_mpack_finite>:
 836:	91 50       	subi	r25, 0x01	; 1
 838:	20 f4       	brcc	.+8      	; 0x842 <__fp_mpack_finite+0xc>
 83a:	87 95       	ror	r24
 83c:	77 95       	ror	r23
 83e:	67 95       	ror	r22
 840:	b7 95       	ror	r27
 842:	88 0f       	add	r24, r24
 844:	91 1d       	adc	r25, r1
 846:	96 95       	lsr	r25
 848:	87 95       	ror	r24
 84a:	97 f9       	bld	r25, 7
 84c:	08 95       	ret

0000084e <__fp_norm2>:
 84e:	91 50       	subi	r25, 0x01	; 1
 850:	50 40       	sbci	r21, 0x00	; 0
 852:	66 0f       	add	r22, r22
 854:	77 1f       	adc	r23, r23
 856:	88 1f       	adc	r24, r24
 858:	d2 f7       	brpl	.-12     	; 0x84e <__fp_norm2>
 85a:	08 95       	ret

0000085c <__tablejump2__>:
 85c:	ee 0f       	add	r30, r30
 85e:	ff 1f       	adc	r31, r31
 860:	88 1f       	adc	r24, r24
 862:	8b bf       	out	0x3b, r24	; 59
 864:	07 90       	elpm	r0, Z+
 866:	f6 91       	elpm	r31, Z
 868:	e0 2d       	mov	r30, r0
 86a:	19 94       	eijmp

0000086c <_exit>:
 86c:	f8 94       	cli

0000086e <__stop_program>:
 86e:	ff cf       	rjmp	.-2      	; 0x86e <__stop_program>
