
BIL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000826  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  00000826  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000826  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000858  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012a1  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e5a  00000000  00000000  00001be9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000791  00000000  00000000  00002a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  000031d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065b  00000000  00000000  000032f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000342  00000000  00000000  0000394f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003c91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7c c0       	rjmp	.+248    	; 0xfa <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
   a:	00 00       	nop
   c:	e1 c0       	rjmp	.+450    	; 0x1d0 <__vector_3>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	7c c0       	rjmp	.+248    	; 0x11e <__bad_interrupt>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	6c c0       	rjmp	.+216    	; 0x11e <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	5c c0       	rjmp	.+184    	; 0x11e <__bad_interrupt>
  66:	00 00       	nop
  68:	5a c0       	rjmp	.+180    	; 0x11e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	46 c0       	rjmp	.+140    	; 0x11e <__bad_interrupt>
  92:	00 00       	nop
  94:	44 c0       	rjmp	.+136    	; 0x11e <__bad_interrupt>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	40 c0       	rjmp	.+128    	; 0x11e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
  e2:	00 00       	nop
  e4:	9f 00       	.word	0x009f	; ????
  e6:	a3 00       	.word	0x00a3	; ????
  e8:	a7 00       	.word	0x00a7	; ????
  ea:	ab 00       	.word	0x00ab	; ????
  ec:	af 00       	.word	0x00af	; ????
  ee:	b3 00       	.word	0x00b3	; ????
  f0:	b7 00       	.word	0x00b7	; ????
  f2:	bb 00       	.word	0x00bb	; ????
  f4:	bf 00       	.word	0x00bf	; ????
  f6:	c3 00       	.word	0x00c3	; ????
  f8:	c7 00       	.word	0x00c7	; ????

000000fa <__ctors_end>:
  fa:	11 24       	eor	r1, r1
  fc:	1f be       	out	0x3f, r1	; 63
  fe:	cf ef       	ldi	r28, 0xFF	; 255
 100:	d1 e2       	ldi	r29, 0x21	; 33
 102:	de bf       	out	0x3e, r29	; 62
 104:	cd bf       	out	0x3d, r28	; 61
 106:	00 e0       	ldi	r16, 0x00	; 0
 108:	0c bf       	out	0x3c, r16	; 60

0000010a <__do_clear_bss>:
 10a:	22 e0       	ldi	r18, 0x02	; 2
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a1 30       	cpi	r26, 0x01	; 1
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	6b d0       	rcall	.+214    	; 0x1f2 <main>
 11c:	48 c3       	rjmp	.+1680   	; 0x7ae <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <initSystem>:
{
// 	initFrontLight();
// 	initRearLight();
// 	initUnderglow();
// 	initMP3();
	initMotor();
 120:	75 d0       	rcall	.+234    	; 0x20c <initMotor>
	initSwitchPort();
 122:	45 c0       	rjmp	.+138    	; 0x1ae <initSwitchPort>
 124:	08 95       	ret

00000126 <driveControl>:
 126:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
	//_delay_ms(5000);
	//turnOnFront();
	//turnOnRear();
	//
	do{
		switch (counter)
 12a:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__bss_end>
 12e:	eb 30       	cpi	r30, 0x0B	; 11
 130:	f1 05       	cpc	r31, r1
 132:	80 f5       	brcc	.+96     	; 0x194 <driveControl+0x6e>
 134:	88 27       	eor	r24, r24
 136:	ee 58       	subi	r30, 0x8E	; 142
 138:	ff 4f       	sbci	r31, 0xFF	; 255
 13a:	8f 4f       	sbci	r24, 0xFF	; 255
 13c:	30 c3       	rjmp	.+1632   	; 0x79e <__tablejump2__>
		{
		case 0: //ingen brik endnu
			carDrive(50); //Accelerere inden 1. brik
 13e:	82 e3       	ldi	r24, 0x32	; 50
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	8f d0       	rcall	.+286    	; 0x262 <carDrive>
			break;
 144:	27 c0       	rjmp	.+78     	; 0x194 <driveControl+0x6e>
			
		case 1: //Brik 1
			carDrive(35); //Nedsæt hastigheden lidt (Bakke snart)
 146:	83 e2       	ldi	r24, 0x23	; 35
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	8b d0       	rcall	.+278    	; 0x262 <carDrive>
			break;
			
		case 2: //Brik 2
			carDrive(20); //Bakke start - hastighed ydeligere ned
 14c:	23 c0       	rjmp	.+70     	; 0x194 <driveControl+0x6e>
 14e:	84 e1       	ldi	r24, 0x14	; 20
 150:	90 e0       	ldi	r25, 0x00	; 0
			break;
 152:	87 d0       	rcall	.+270    	; 0x262 <carDrive>
			
		case 3: //Brik 3
			carDrive(10); //Hastighed ned inden bakken kører ned
 154:	1f c0       	rjmp	.+62     	; 0x194 <driveControl+0x6e>
 156:	8a e0       	ldi	r24, 0x0A	; 10
 158:	90 e0       	ldi	r25, 0x00	; 0
			break;
 15a:	83 d0       	rcall	.+262    	; 0x262 <carDrive>
			
		case 4: //Brik 4
			carDrive(50); //HAstigheden op - bunden af bakken
 15c:	1b c0       	rjmp	.+54     	; 0x194 <driveControl+0x6e>
 15e:	82 e3       	ldi	r24, 0x32	; 50
 160:	90 e0       	ldi	r25, 0x00	; 0
			break;
 162:	7f d0       	rcall	.+254    	; 0x262 <carDrive>
			
		case 5: //Brik 5
			carDrive(40); //hastigheden lidt ned - gør klar til snart at stoppe
 164:	17 c0       	rjmp	.+46     	; 0x194 <driveControl+0x6e>
 166:	88 e2       	ldi	r24, 0x28	; 40
 168:	90 e0       	ldi	r25, 0x00	; 0
			break;
			
		case 6: //Brik 6
			carDrive(-30); //Kør tilbage til refleksbrik 5
 16a:	7b d0       	rcall	.+246    	; 0x262 <carDrive>
 16c:	13 c0       	rjmp	.+38     	; 0x194 <driveControl+0x6e>
 16e:	82 ee       	ldi	r24, 0xE2	; 226
			break;
 170:	9f ef       	ldi	r25, 0xFF	; 255
			
		case 7: //Brik 6
			carDrive(-40); //Refelksbrik 6 igen
 172:	77 d0       	rcall	.+238    	; 0x262 <carDrive>
 174:	0f c0       	rjmp	.+30     	; 0x194 <driveControl+0x6e>
 176:	88 ed       	ldi	r24, 0xD8	; 216
			break;
 178:	9f ef       	ldi	r25, 0xFF	; 255
			
		case 8: //Brik 5
			carDrive(50); //Kør frem igen
 17a:	73 d0       	rcall	.+230    	; 0x262 <carDrive>
 17c:	0b c0       	rjmp	.+22     	; 0x194 <driveControl+0x6e>
 17e:	82 e3       	ldi	r24, 0x32	; 50
			break;
 180:	90 e0       	ldi	r25, 0x00	; 0
			
		case 9: //Brik 5
			carDrive(50); //Kør frem igen
 182:	6f d0       	rcall	.+222    	; 0x262 <carDrive>
 184:	07 c0       	rjmp	.+14     	; 0x194 <driveControl+0x6e>
 186:	82 e3       	ldi	r24, 0x32	; 50
 188:	90 e0       	ldi	r25, 0x00	; 0
			break;
			
		case 10: //Brik 6
			carDrive(30); //Kør frem igen	
 18a:	6b d0       	rcall	.+214    	; 0x262 <carDrive>
 18c:	03 c0       	rjmp	.+6      	; 0x194 <driveControl+0x6e>
 18e:	8e e1       	ldi	r24, 0x1E	; 30
 190:	90 e0       	ldi	r25, 0x00	; 0
			break;
			
		}
	}while (counter < 11); //Går ud af do-while når refliksbrik 7 er nået
 192:	67 d0       	rcall	.+206    	; 0x262 <carDrive>
 194:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 198:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__bss_end>
 19c:	0b 97       	sbiw	r24, 0x0b	; 11
 19e:	0c f4       	brge	.+2      	; 0x1a2 <driveControl+0x7c>
	
	
	carStop(); 
 1a0:	c2 cf       	rjmp	.-124    	; 0x126 <driveControl>
 1a2:	44 d0       	rcall	.+136    	; 0x22c <carStop>
	//playStop();
	//
	//turnOffUnder();
	//turnOffFront();
	//turnOffRear();
	counter = 0;
 1a4:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__bss_end>
 1a8:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
 1ac:	08 95       	ret

000001ae <initSwitchPort>:

// Læser alle switches samtidigt
unsigned char switchStatus()
{
  return (~PINA);
}
 1ae:	11 b8       	out	0x01, r1	; 1
 1b0:	08 95       	ret

000001b2 <switchOn>:
// Returnerer TRUE, hvis switchen med nummeret
// "switch_nr" er aktiveret - ellers returneres FALSE
unsigned char switchOn(unsigned char switch_nr)
{
unsigned char mask;
  if (switch_nr <= MAX_SWITCH_NR)
 1b2:	88 30       	cpi	r24, 0x08	; 8
 1b4:	58 f4       	brcc	.+22     	; 0x1cc <switchOn+0x1a>
  {
    mask = 0b00000001 << switch_nr;
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <switchOn+0xe>
 1bc:	22 0f       	add	r18, r18
 1be:	33 1f       	adc	r19, r19
 1c0:	8a 95       	dec	r24
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <switchOn+0xa>
    return (~PINA & mask);
 1c4:	80 b1       	in	r24, 0x00	; 0
 1c6:	80 95       	com	r24
 1c8:	82 23       	and	r24, r18
 1ca:	08 95       	ret
  }
  else
    return 0;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	08 95       	ret

000001d0 <__vector_3>:
unsigned char detection =0;


//Initialiser interrupt counter - husk playReflex();
ISR(INT2_vect) //refleks registreret
{
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	8f 93       	push	r24
	counter++;
 1dc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1e0:	8f 5f       	subi	r24, 0xFF	; 255
 1e2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	//}
	//else
	//{
		//detection=0;
	//}
}
 1e6:	8f 91       	pop	r24
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <main>:



int main(void)
{
	sei();
 1f2:	78 94       	sei
	EIMSK=0b00000100;
 1f4:	84 e0       	ldi	r24, 0x04	; 4
 1f6:	8d bb       	out	0x1d, r24	; 29
	EICRA=0b00110000;
 1f8:	80 e3       	ldi	r24, 0x30	; 48
 1fa:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
	
	initSystem();
 1fe:	90 df       	rcall	.-224    	; 0x120 <initSystem>
	
	
    while (1) 
    {
		if (switchOn(1) > 0)
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	d7 df       	rcall	.-82     	; 0x1b2 <switchOn>
 204:	88 23       	and	r24, r24
		{
			driveControl(); //start driveControl / System
 206:	e1 f3       	breq	.-8      	; 0x200 <main+0xe>
 208:	8e df       	rcall	.-228    	; 0x126 <driveControl>
 20a:	fa cf       	rjmp	.-12     	; 0x200 <main+0xe>

0000020c <initMotor>:
#include <util/delay.h>
#define delay _delay_ms(5)

void initMotor(void)
{
	OCR1A = 0x3ff;
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	93 e0       	ldi	r25, 0x03	; 3
 210:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 214:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	TCCR1A = 0b11000011;
 218:	83 ec       	ldi	r24, 0xC3	; 195
 21a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = 0;
 21e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	DDRB = 0xff;
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00001000;
 226:	88 e0       	ldi	r24, 0x08	; 8
 228:	85 b9       	out	0x05, r24	; 5
 22a:	08 95       	ret

0000022c <carStop>:
}


void carStop()
{
	while (OCR1A != 1023)
 22c:	0d c0       	rjmp	.+26     	; 0x248 <carStop+0x1c>
	{
		OCR1A++;
 22e:	e8 e8       	ldi	r30, 0x88	; 136
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	91 81       	ldd	r25, Z+1	; 0x01
 236:	01 96       	adiw	r24, 0x01	; 1
 238:	91 83       	std	Z+1, r25	; 0x01
 23a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23c:	8f e1       	ldi	r24, 0x1F	; 31
 23e:	9e e4       	ldi	r25, 0x4E	; 78
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <carStop+0x14>
 244:	00 c0       	rjmp	.+0      	; 0x246 <carStop+0x1a>
 246:	00 00       	nop
}


void carStop()
{
	while (OCR1A != 1023)
 248:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 24c:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 250:	8f 3f       	cpi	r24, 0xFF	; 255
 252:	93 40       	sbci	r25, 0x03	; 3
 254:	61 f7       	brne	.-40     	; 0x22e <carStop+0x2>
	{
		OCR1A++;
		delay;
	}
	TCCR1B = (0b11111000 & TCCR1B);
 256:	e1 e8       	ldi	r30, 0x81	; 129
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	88 7f       	andi	r24, 0xF8	; 248
 25e:	80 83       	st	Z, r24
 260:	08 95       	ret

00000262 <carDrive>:
	PORTB = 0b00001000;
}


void carDrive(int speed)
{
 262:	cf 92       	push	r12
 264:	df 92       	push	r13
 266:	ef 92       	push	r14
 268:	ff 92       	push	r15
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	ec 01       	movw	r28, r24
	
	int requestedSpeed = 1023-(sqrt(speed * speed)*(1023/100));
 270:	88 9f       	mul	r24, r24
 272:	60 01       	movw	r12, r0
 274:	89 9f       	mul	r24, r25
 276:	d0 0c       	add	r13, r0
 278:	d0 0c       	add	r13, r0
 27a:	11 24       	eor	r1, r1
 27c:	0d 2c       	mov	r0, r13
 27e:	00 0c       	add	r0, r0
 280:	ee 08       	sbc	r14, r14
 282:	ff 08       	sbc	r15, r15
 284:	c7 01       	movw	r24, r14
 286:	b6 01       	movw	r22, r12
 288:	44 d1       	rcall	.+648    	; 0x512 <__floatsisf>
 28a:	36 d2       	rcall	.+1132   	; 0x6f8 <sqrt>
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	40 e2       	ldi	r20, 0x20	; 32
 292:	51 e4       	ldi	r21, 0x41	; 65
 294:	ca d1       	rcall	.+916    	; 0x62a <__mulsf3>
 296:	9b 01       	movw	r18, r22
 298:	ac 01       	movw	r20, r24
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	70 ec       	ldi	r23, 0xC0	; 192
 29e:	8f e7       	ldi	r24, 0x7F	; 127
 2a0:	94 e4       	ldi	r25, 0x44	; 68
 2a2:	9f d0       	rcall	.+318    	; 0x3e2 <__subsf3>
 2a4:	03 d1       	rcall	.+518    	; 0x4ac <__fixsfsi>
	if (speed == 0) //bilen skal holde stille.
 2a6:	20 97       	sbiw	r28, 0x00	; 0
 2a8:	11 f4       	brne	.+4      	; 0x2ae <carDrive+0x4c>
	{
		carStop();
 2aa:	c0 df       	rcall	.-128    	; 0x22c <carStop>
 2ac:	93 c0       	rjmp	.+294    	; 0x3d4 <carDrive+0x172>
		return;
 2ae:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	}
	if (TCCR1B == 0)
 2b2:	21 11       	cpse	r18, r1
 2b4:	03 c0       	rjmp	.+6      	; 0x2bc <carDrive+0x5a>
 2b6:	22 e0       	ldi	r18, 0x02	; 2
	{
		TCCR1B = 0b00000010;
 2b8:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 2bc:	dd 23       	and	r29, r29
	}
	if (speed < 0) //bilen skal køre baglæns.
 2be:	0c f0       	brlt	.+2      	; 0x2c2 <carDrive+0x60>
 2c0:	45 c0       	rjmp	.+138    	; 0x34c <carDrive+0xea>
 2c2:	23 b1       	in	r18, 0x03	; 3
	{
		if (PINB == 0b00001000) //hvis bit 3 er sat, kører bilen fremad.
 2c4:	28 30       	cpi	r18, 0x08	; 8
 2c6:	b9 f4       	brne	.+46     	; 0x2f6 <carDrive+0x94>
 2c8:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		{
			if (OCR1A == 1023) //tjekker om bilen holder stille.
 2cc:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 2d0:	8f 3f       	cpi	r24, 0xFF	; 255
 2d2:	93 40       	sbci	r25, 0x03	; 3
 2d4:	11 f4       	brne	.+4      	; 0x2da <carDrive+0x78>
 2d6:	15 b8       	out	0x05, r1	; 5
			{
				PORTB = 0b00000000; //clearer bit 3, så bilen bakker. 
 2d8:	7d c0       	rjmp	.+250    	; 0x3d4 <carDrive+0x172>
 2da:	e8 e8       	ldi	r30, 0x88	; 136
			}
			else
			{
				OCR1A++;
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	91 81       	ldd	r25, Z+1	; 0x01
 2e2:	01 96       	adiw	r24, 0x01	; 1
 2e4:	91 83       	std	Z+1, r25	; 0x01
 2e6:	80 83       	st	Z, r24
 2e8:	8f e1       	ldi	r24, 0x1F	; 31
 2ea:	9e e4       	ldi	r25, 0x4E	; 78
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <carDrive+0x8a>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <carDrive+0x90>
 2f2:	00 00       	nop
 2f4:	6f c0       	rjmp	.+222    	; 0x3d4 <carDrive+0x172>
 2f6:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			}
		}
		
		else //bilen kører allerede baglæns.
		{
			if (OCR1A < requestedSpeed) //hvis bilen kører for hurtigt.
 2fa:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 2fe:	26 17       	cp	r18, r22
 300:	37 07       	cpc	r19, r23
 302:	70 f4       	brcc	.+28     	; 0x320 <carDrive+0xbe>
 304:	e8 e8       	ldi	r30, 0x88	; 136
			{
				OCR1A++;
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	91 81       	ldd	r25, Z+1	; 0x01
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	91 83       	std	Z+1, r25	; 0x01
 310:	80 83       	st	Z, r24
 312:	8f e1       	ldi	r24, 0x1F	; 31
 314:	9e e4       	ldi	r25, 0x4E	; 78
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <carDrive+0xb4>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <carDrive+0xba>
 31c:	00 00       	nop
 31e:	5a c0       	rjmp	.+180    	; 0x3d4 <carDrive+0x172>
 320:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
				delay;
			}
			else if (OCR1A > requestedSpeed) //hvis bilen kører for langsomt.
 324:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 328:	68 17       	cp	r22, r24
 32a:	79 07       	cpc	r23, r25
 32c:	08 f0       	brcs	.+2      	; 0x330 <carDrive+0xce>
 32e:	52 c0       	rjmp	.+164    	; 0x3d4 <carDrive+0x172>
 330:	e8 e8       	ldi	r30, 0x88	; 136
			{
				OCR1A--;
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	91 81       	ldd	r25, Z+1	; 0x01
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	91 83       	std	Z+1, r25	; 0x01
 33c:	80 83       	st	Z, r24
 33e:	8f e1       	ldi	r24, 0x1F	; 31
 340:	9e e4       	ldi	r25, 0x4E	; 78
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <carDrive+0xe0>
 346:	00 c0       	rjmp	.+0      	; 0x348 <carDrive+0xe6>
 348:	00 00       	nop
 34a:	44 c0       	rjmp	.+136    	; 0x3d4 <carDrive+0x172>
 34c:	23 b1       	in	r18, 0x03	; 3
		}
	}
	
	else //bilen skal køre forlæns.
	{
		if (PINB == 0b00001000) //hvis bit 3 er sat, kører bilen fremad.
 34e:	28 30       	cpi	r18, 0x08	; 8
 350:	51 f5       	brne	.+84     	; 0x3a6 <carDrive+0x144>
 352:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		{
			if (OCR1A < requestedSpeed) //hvis bilen kører for hurtigt.
 356:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 35a:	26 17       	cp	r18, r22
 35c:	37 07       	cpc	r19, r23
 35e:	70 f4       	brcc	.+28     	; 0x37c <carDrive+0x11a>
 360:	e8 e8       	ldi	r30, 0x88	; 136
			{
				OCR1A++;
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	91 81       	ldd	r25, Z+1	; 0x01
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	91 83       	std	Z+1, r25	; 0x01
 36c:	80 83       	st	Z, r24
 36e:	8f e1       	ldi	r24, 0x1F	; 31
 370:	9e e4       	ldi	r25, 0x4E	; 78
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <carDrive+0x110>
 376:	00 c0       	rjmp	.+0      	; 0x378 <carDrive+0x116>
 378:	00 00       	nop
 37a:	2c c0       	rjmp	.+88     	; 0x3d4 <carDrive+0x172>
 37c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
				delay;
			}
			else if (OCR1A > requestedSpeed) //hvis bilen kører for langsomt.
 380:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 384:	68 17       	cp	r22, r24
 386:	79 07       	cpc	r23, r25
 388:	28 f5       	brcc	.+74     	; 0x3d4 <carDrive+0x172>
 38a:	e8 e8       	ldi	r30, 0x88	; 136
			{
				OCR1A--;
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	91 81       	ldd	r25, Z+1	; 0x01
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	91 83       	std	Z+1, r25	; 0x01
 396:	80 83       	st	Z, r24
 398:	8f e1       	ldi	r24, 0x1F	; 31
 39a:	9e e4       	ldi	r25, 0x4E	; 78
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <carDrive+0x13a>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <carDrive+0x140>
 3a2:	00 00       	nop
 3a4:	17 c0       	rjmp	.+46     	; 0x3d4 <carDrive+0x172>
 3a6:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
				return;
			}	
		}
		else //bilen køererer baglæns.
		{
			if (OCR1A == 1023) //tjekker om bilen holder stille.
 3aa:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3ae:	8f 3f       	cpi	r24, 0xFF	; 255
 3b0:	93 40       	sbci	r25, 0x03	; 3
 3b2:	19 f4       	brne	.+6      	; 0x3ba <carDrive+0x158>
 3b4:	88 e0       	ldi	r24, 0x08	; 8
			{
				PORTB = 0b00001000; //setter bit 3, så bilen køererererer forlæns.
 3b6:	85 b9       	out	0x05, r24	; 5
 3b8:	0d c0       	rjmp	.+26     	; 0x3d4 <carDrive+0x172>
 3ba:	e8 e8       	ldi	r30, 0x88	; 136
			}
			else
			{
				OCR1A++;
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	91 81       	ldd	r25, Z+1	; 0x01
 3c2:	01 96       	adiw	r24, 0x01	; 1
 3c4:	91 83       	std	Z+1, r25	; 0x01
 3c6:	80 83       	st	Z, r24
 3c8:	8f e1       	ldi	r24, 0x1F	; 31
 3ca:	9e e4       	ldi	r25, 0x4E	; 78
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <carDrive+0x16a>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <carDrive+0x170>
 3d2:	00 00       	nop
 3d4:	df 91       	pop	r29
				delay;
			}
		}

	}
}
 3d6:	cf 91       	pop	r28
 3d8:	ff 90       	pop	r15
 3da:	ef 90       	pop	r14
 3dc:	df 90       	pop	r13
 3de:	cf 90       	pop	r12
 3e0:	08 95       	ret

000003e2 <__subsf3>:
 3e2:	50 58       	subi	r21, 0x80	; 128

000003e4 <__addsf3>:
 3e4:	bb 27       	eor	r27, r27
 3e6:	aa 27       	eor	r26, r26
 3e8:	0e d0       	rcall	.+28     	; 0x406 <__addsf3x>
 3ea:	e5 c0       	rjmp	.+458    	; 0x5b6 <__fp_round>
 3ec:	d6 d0       	rcall	.+428    	; 0x59a <__fp_pscA>
 3ee:	30 f0       	brcs	.+12     	; 0x3fc <__addsf3+0x18>
 3f0:	db d0       	rcall	.+438    	; 0x5a8 <__fp_pscB>
 3f2:	20 f0       	brcs	.+8      	; 0x3fc <__addsf3+0x18>
 3f4:	31 f4       	brne	.+12     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f6:	9f 3f       	cpi	r25, 0xFF	; 255
 3f8:	11 f4       	brne	.+4      	; 0x3fe <__addsf3+0x1a>
 3fa:	1e f4       	brtc	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fc:	cb c0       	rjmp	.+406    	; 0x594 <__fp_nan>
 3fe:	0e f4       	brtc	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	e0 95       	com	r30
 402:	e7 fb       	bst	r30, 7
 404:	c1 c0       	rjmp	.+386    	; 0x588 <__fp_inf>

00000406 <__addsf3x>:
 406:	e9 2f       	mov	r30, r25
 408:	e7 d0       	rcall	.+462    	; 0x5d8 <__fp_split3>
 40a:	80 f3       	brcs	.-32     	; 0x3ec <__addsf3+0x8>
 40c:	ba 17       	cp	r27, r26
 40e:	62 07       	cpc	r22, r18
 410:	73 07       	cpc	r23, r19
 412:	84 07       	cpc	r24, r20
 414:	95 07       	cpc	r25, r21
 416:	18 f0       	brcs	.+6      	; 0x41e <__addsf3x+0x18>
 418:	71 f4       	brne	.+28     	; 0x436 <__addsf3x+0x30>
 41a:	9e f5       	brtc	.+102    	; 0x482 <__addsf3x+0x7c>
 41c:	ff c0       	rjmp	.+510    	; 0x61c <__fp_zero>
 41e:	0e f4       	brtc	.+2      	; 0x422 <__addsf3x+0x1c>
 420:	e0 95       	com	r30
 422:	0b 2e       	mov	r0, r27
 424:	ba 2f       	mov	r27, r26
 426:	a0 2d       	mov	r26, r0
 428:	0b 01       	movw	r0, r22
 42a:	b9 01       	movw	r22, r18
 42c:	90 01       	movw	r18, r0
 42e:	0c 01       	movw	r0, r24
 430:	ca 01       	movw	r24, r20
 432:	a0 01       	movw	r20, r0
 434:	11 24       	eor	r1, r1
 436:	ff 27       	eor	r31, r31
 438:	59 1b       	sub	r21, r25
 43a:	99 f0       	breq	.+38     	; 0x462 <__addsf3x+0x5c>
 43c:	59 3f       	cpi	r21, 0xF9	; 249
 43e:	50 f4       	brcc	.+20     	; 0x454 <__addsf3x+0x4e>
 440:	50 3e       	cpi	r21, 0xE0	; 224
 442:	68 f1       	brcs	.+90     	; 0x49e <__addsf3x+0x98>
 444:	1a 16       	cp	r1, r26
 446:	f0 40       	sbci	r31, 0x00	; 0
 448:	a2 2f       	mov	r26, r18
 44a:	23 2f       	mov	r18, r19
 44c:	34 2f       	mov	r19, r20
 44e:	44 27       	eor	r20, r20
 450:	58 5f       	subi	r21, 0xF8	; 248
 452:	f3 cf       	rjmp	.-26     	; 0x43a <__addsf3x+0x34>
 454:	46 95       	lsr	r20
 456:	37 95       	ror	r19
 458:	27 95       	ror	r18
 45a:	a7 95       	ror	r26
 45c:	f0 40       	sbci	r31, 0x00	; 0
 45e:	53 95       	inc	r21
 460:	c9 f7       	brne	.-14     	; 0x454 <__addsf3x+0x4e>
 462:	7e f4       	brtc	.+30     	; 0x482 <__addsf3x+0x7c>
 464:	1f 16       	cp	r1, r31
 466:	ba 0b       	sbc	r27, r26
 468:	62 0b       	sbc	r22, r18
 46a:	73 0b       	sbc	r23, r19
 46c:	84 0b       	sbc	r24, r20
 46e:	ba f0       	brmi	.+46     	; 0x49e <__addsf3x+0x98>
 470:	91 50       	subi	r25, 0x01	; 1
 472:	a1 f0       	breq	.+40     	; 0x49c <__addsf3x+0x96>
 474:	ff 0f       	add	r31, r31
 476:	bb 1f       	adc	r27, r27
 478:	66 1f       	adc	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	88 1f       	adc	r24, r24
 47e:	c2 f7       	brpl	.-16     	; 0x470 <__addsf3x+0x6a>
 480:	0e c0       	rjmp	.+28     	; 0x49e <__addsf3x+0x98>
 482:	ba 0f       	add	r27, r26
 484:	62 1f       	adc	r22, r18
 486:	73 1f       	adc	r23, r19
 488:	84 1f       	adc	r24, r20
 48a:	48 f4       	brcc	.+18     	; 0x49e <__addsf3x+0x98>
 48c:	87 95       	ror	r24
 48e:	77 95       	ror	r23
 490:	67 95       	ror	r22
 492:	b7 95       	ror	r27
 494:	f7 95       	ror	r31
 496:	9e 3f       	cpi	r25, 0xFE	; 254
 498:	08 f0       	brcs	.+2      	; 0x49c <__addsf3x+0x96>
 49a:	b3 cf       	rjmp	.-154    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 49c:	93 95       	inc	r25
 49e:	88 0f       	add	r24, r24
 4a0:	08 f0       	brcs	.+2      	; 0x4a4 <__addsf3x+0x9e>
 4a2:	99 27       	eor	r25, r25
 4a4:	ee 0f       	add	r30, r30
 4a6:	97 95       	ror	r25
 4a8:	87 95       	ror	r24
 4aa:	08 95       	ret

000004ac <__fixsfsi>:
 4ac:	04 d0       	rcall	.+8      	; 0x4b6 <__fixunssfsi>
 4ae:	68 94       	set
 4b0:	b1 11       	cpse	r27, r1
 4b2:	b5 c0       	rjmp	.+362    	; 0x61e <__fp_szero>
 4b4:	08 95       	ret

000004b6 <__fixunssfsi>:
 4b6:	98 d0       	rcall	.+304    	; 0x5e8 <__fp_splitA>
 4b8:	88 f0       	brcs	.+34     	; 0x4dc <__fixunssfsi+0x26>
 4ba:	9f 57       	subi	r25, 0x7F	; 127
 4bc:	90 f0       	brcs	.+36     	; 0x4e2 <__fixunssfsi+0x2c>
 4be:	b9 2f       	mov	r27, r25
 4c0:	99 27       	eor	r25, r25
 4c2:	b7 51       	subi	r27, 0x17	; 23
 4c4:	a0 f0       	brcs	.+40     	; 0x4ee <__fixunssfsi+0x38>
 4c6:	d1 f0       	breq	.+52     	; 0x4fc <__fixunssfsi+0x46>
 4c8:	66 0f       	add	r22, r22
 4ca:	77 1f       	adc	r23, r23
 4cc:	88 1f       	adc	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	1a f0       	brmi	.+6      	; 0x4d8 <__fixunssfsi+0x22>
 4d2:	ba 95       	dec	r27
 4d4:	c9 f7       	brne	.-14     	; 0x4c8 <__fixunssfsi+0x12>
 4d6:	12 c0       	rjmp	.+36     	; 0x4fc <__fixunssfsi+0x46>
 4d8:	b1 30       	cpi	r27, 0x01	; 1
 4da:	81 f0       	breq	.+32     	; 0x4fc <__fixunssfsi+0x46>
 4dc:	9f d0       	rcall	.+318    	; 0x61c <__fp_zero>
 4de:	b1 e0       	ldi	r27, 0x01	; 1
 4e0:	08 95       	ret
 4e2:	9c c0       	rjmp	.+312    	; 0x61c <__fp_zero>
 4e4:	67 2f       	mov	r22, r23
 4e6:	78 2f       	mov	r23, r24
 4e8:	88 27       	eor	r24, r24
 4ea:	b8 5f       	subi	r27, 0xF8	; 248
 4ec:	39 f0       	breq	.+14     	; 0x4fc <__fixunssfsi+0x46>
 4ee:	b9 3f       	cpi	r27, 0xF9	; 249
 4f0:	cc f3       	brlt	.-14     	; 0x4e4 <__fixunssfsi+0x2e>
 4f2:	86 95       	lsr	r24
 4f4:	77 95       	ror	r23
 4f6:	67 95       	ror	r22
 4f8:	b3 95       	inc	r27
 4fa:	d9 f7       	brne	.-10     	; 0x4f2 <__fixunssfsi+0x3c>
 4fc:	3e f4       	brtc	.+14     	; 0x50c <__fixunssfsi+0x56>
 4fe:	90 95       	com	r25
 500:	80 95       	com	r24
 502:	70 95       	com	r23
 504:	61 95       	neg	r22
 506:	7f 4f       	sbci	r23, 0xFF	; 255
 508:	8f 4f       	sbci	r24, 0xFF	; 255
 50a:	9f 4f       	sbci	r25, 0xFF	; 255
 50c:	08 95       	ret

0000050e <__floatunsisf>:
 50e:	e8 94       	clt
 510:	09 c0       	rjmp	.+18     	; 0x524 <__floatsisf+0x12>

00000512 <__floatsisf>:
 512:	97 fb       	bst	r25, 7
 514:	3e f4       	brtc	.+14     	; 0x524 <__floatsisf+0x12>
 516:	90 95       	com	r25
 518:	80 95       	com	r24
 51a:	70 95       	com	r23
 51c:	61 95       	neg	r22
 51e:	7f 4f       	sbci	r23, 0xFF	; 255
 520:	8f 4f       	sbci	r24, 0xFF	; 255
 522:	9f 4f       	sbci	r25, 0xFF	; 255
 524:	99 23       	and	r25, r25
 526:	a9 f0       	breq	.+42     	; 0x552 <__floatsisf+0x40>
 528:	f9 2f       	mov	r31, r25
 52a:	96 e9       	ldi	r25, 0x96	; 150
 52c:	bb 27       	eor	r27, r27
 52e:	93 95       	inc	r25
 530:	f6 95       	lsr	r31
 532:	87 95       	ror	r24
 534:	77 95       	ror	r23
 536:	67 95       	ror	r22
 538:	b7 95       	ror	r27
 53a:	f1 11       	cpse	r31, r1
 53c:	f8 cf       	rjmp	.-16     	; 0x52e <__floatsisf+0x1c>
 53e:	fa f4       	brpl	.+62     	; 0x57e <__floatsisf+0x6c>
 540:	bb 0f       	add	r27, r27
 542:	11 f4       	brne	.+4      	; 0x548 <__floatsisf+0x36>
 544:	60 ff       	sbrs	r22, 0
 546:	1b c0       	rjmp	.+54     	; 0x57e <__floatsisf+0x6c>
 548:	6f 5f       	subi	r22, 0xFF	; 255
 54a:	7f 4f       	sbci	r23, 0xFF	; 255
 54c:	8f 4f       	sbci	r24, 0xFF	; 255
 54e:	9f 4f       	sbci	r25, 0xFF	; 255
 550:	16 c0       	rjmp	.+44     	; 0x57e <__floatsisf+0x6c>
 552:	88 23       	and	r24, r24
 554:	11 f0       	breq	.+4      	; 0x55a <__floatsisf+0x48>
 556:	96 e9       	ldi	r25, 0x96	; 150
 558:	11 c0       	rjmp	.+34     	; 0x57c <__floatsisf+0x6a>
 55a:	77 23       	and	r23, r23
 55c:	21 f0       	breq	.+8      	; 0x566 <__floatsisf+0x54>
 55e:	9e e8       	ldi	r25, 0x8E	; 142
 560:	87 2f       	mov	r24, r23
 562:	76 2f       	mov	r23, r22
 564:	05 c0       	rjmp	.+10     	; 0x570 <__floatsisf+0x5e>
 566:	66 23       	and	r22, r22
 568:	71 f0       	breq	.+28     	; 0x586 <__floatsisf+0x74>
 56a:	96 e8       	ldi	r25, 0x86	; 134
 56c:	86 2f       	mov	r24, r22
 56e:	70 e0       	ldi	r23, 0x00	; 0
 570:	60 e0       	ldi	r22, 0x00	; 0
 572:	2a f0       	brmi	.+10     	; 0x57e <__floatsisf+0x6c>
 574:	9a 95       	dec	r25
 576:	66 0f       	add	r22, r22
 578:	77 1f       	adc	r23, r23
 57a:	88 1f       	adc	r24, r24
 57c:	da f7       	brpl	.-10     	; 0x574 <__floatsisf+0x62>
 57e:	88 0f       	add	r24, r24
 580:	96 95       	lsr	r25
 582:	87 95       	ror	r24
 584:	97 f9       	bld	r25, 7
 586:	08 95       	ret

00000588 <__fp_inf>:
 588:	97 f9       	bld	r25, 7
 58a:	9f 67       	ori	r25, 0x7F	; 127
 58c:	80 e8       	ldi	r24, 0x80	; 128
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	60 e0       	ldi	r22, 0x00	; 0
 592:	08 95       	ret

00000594 <__fp_nan>:
 594:	9f ef       	ldi	r25, 0xFF	; 255
 596:	80 ec       	ldi	r24, 0xC0	; 192
 598:	08 95       	ret

0000059a <__fp_pscA>:
 59a:	00 24       	eor	r0, r0
 59c:	0a 94       	dec	r0
 59e:	16 16       	cp	r1, r22
 5a0:	17 06       	cpc	r1, r23
 5a2:	18 06       	cpc	r1, r24
 5a4:	09 06       	cpc	r0, r25
 5a6:	08 95       	ret

000005a8 <__fp_pscB>:
 5a8:	00 24       	eor	r0, r0
 5aa:	0a 94       	dec	r0
 5ac:	12 16       	cp	r1, r18
 5ae:	13 06       	cpc	r1, r19
 5b0:	14 06       	cpc	r1, r20
 5b2:	05 06       	cpc	r0, r21
 5b4:	08 95       	ret

000005b6 <__fp_round>:
 5b6:	09 2e       	mov	r0, r25
 5b8:	03 94       	inc	r0
 5ba:	00 0c       	add	r0, r0
 5bc:	11 f4       	brne	.+4      	; 0x5c2 <__fp_round+0xc>
 5be:	88 23       	and	r24, r24
 5c0:	52 f0       	brmi	.+20     	; 0x5d6 <__fp_round+0x20>
 5c2:	bb 0f       	add	r27, r27
 5c4:	40 f4       	brcc	.+16     	; 0x5d6 <__fp_round+0x20>
 5c6:	bf 2b       	or	r27, r31
 5c8:	11 f4       	brne	.+4      	; 0x5ce <__fp_round+0x18>
 5ca:	60 ff       	sbrs	r22, 0
 5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <__fp_round+0x20>
 5ce:	6f 5f       	subi	r22, 0xFF	; 255
 5d0:	7f 4f       	sbci	r23, 0xFF	; 255
 5d2:	8f 4f       	sbci	r24, 0xFF	; 255
 5d4:	9f 4f       	sbci	r25, 0xFF	; 255
 5d6:	08 95       	ret

000005d8 <__fp_split3>:
 5d8:	57 fd       	sbrc	r21, 7
 5da:	90 58       	subi	r25, 0x80	; 128
 5dc:	44 0f       	add	r20, r20
 5de:	55 1f       	adc	r21, r21
 5e0:	59 f0       	breq	.+22     	; 0x5f8 <__fp_splitA+0x10>
 5e2:	5f 3f       	cpi	r21, 0xFF	; 255
 5e4:	71 f0       	breq	.+28     	; 0x602 <__fp_splitA+0x1a>
 5e6:	47 95       	ror	r20

000005e8 <__fp_splitA>:
 5e8:	88 0f       	add	r24, r24
 5ea:	97 fb       	bst	r25, 7
 5ec:	99 1f       	adc	r25, r25
 5ee:	61 f0       	breq	.+24     	; 0x608 <__fp_splitA+0x20>
 5f0:	9f 3f       	cpi	r25, 0xFF	; 255
 5f2:	79 f0       	breq	.+30     	; 0x612 <__fp_splitA+0x2a>
 5f4:	87 95       	ror	r24
 5f6:	08 95       	ret
 5f8:	12 16       	cp	r1, r18
 5fa:	13 06       	cpc	r1, r19
 5fc:	14 06       	cpc	r1, r20
 5fe:	55 1f       	adc	r21, r21
 600:	f2 cf       	rjmp	.-28     	; 0x5e6 <__fp_split3+0xe>
 602:	46 95       	lsr	r20
 604:	f1 df       	rcall	.-30     	; 0x5e8 <__fp_splitA>
 606:	08 c0       	rjmp	.+16     	; 0x618 <__fp_splitA+0x30>
 608:	16 16       	cp	r1, r22
 60a:	17 06       	cpc	r1, r23
 60c:	18 06       	cpc	r1, r24
 60e:	99 1f       	adc	r25, r25
 610:	f1 cf       	rjmp	.-30     	; 0x5f4 <__fp_splitA+0xc>
 612:	86 95       	lsr	r24
 614:	71 05       	cpc	r23, r1
 616:	61 05       	cpc	r22, r1
 618:	08 94       	sec
 61a:	08 95       	ret

0000061c <__fp_zero>:
 61c:	e8 94       	clt

0000061e <__fp_szero>:
 61e:	bb 27       	eor	r27, r27
 620:	66 27       	eor	r22, r22
 622:	77 27       	eor	r23, r23
 624:	cb 01       	movw	r24, r22
 626:	97 f9       	bld	r25, 7
 628:	08 95       	ret

0000062a <__mulsf3>:
 62a:	0b d0       	rcall	.+22     	; 0x642 <__mulsf3x>
 62c:	c4 cf       	rjmp	.-120    	; 0x5b6 <__fp_round>
 62e:	b5 df       	rcall	.-150    	; 0x59a <__fp_pscA>
 630:	28 f0       	brcs	.+10     	; 0x63c <__mulsf3+0x12>
 632:	ba df       	rcall	.-140    	; 0x5a8 <__fp_pscB>
 634:	18 f0       	brcs	.+6      	; 0x63c <__mulsf3+0x12>
 636:	95 23       	and	r25, r21
 638:	09 f0       	breq	.+2      	; 0x63c <__mulsf3+0x12>
 63a:	a6 cf       	rjmp	.-180    	; 0x588 <__fp_inf>
 63c:	ab cf       	rjmp	.-170    	; 0x594 <__fp_nan>
 63e:	11 24       	eor	r1, r1
 640:	ee cf       	rjmp	.-36     	; 0x61e <__fp_szero>

00000642 <__mulsf3x>:
 642:	ca df       	rcall	.-108    	; 0x5d8 <__fp_split3>
 644:	a0 f3       	brcs	.-24     	; 0x62e <__mulsf3+0x4>

00000646 <__mulsf3_pse>:
 646:	95 9f       	mul	r25, r21
 648:	d1 f3       	breq	.-12     	; 0x63e <__mulsf3+0x14>
 64a:	95 0f       	add	r25, r21
 64c:	50 e0       	ldi	r21, 0x00	; 0
 64e:	55 1f       	adc	r21, r21
 650:	62 9f       	mul	r22, r18
 652:	f0 01       	movw	r30, r0
 654:	72 9f       	mul	r23, r18
 656:	bb 27       	eor	r27, r27
 658:	f0 0d       	add	r31, r0
 65a:	b1 1d       	adc	r27, r1
 65c:	63 9f       	mul	r22, r19
 65e:	aa 27       	eor	r26, r26
 660:	f0 0d       	add	r31, r0
 662:	b1 1d       	adc	r27, r1
 664:	aa 1f       	adc	r26, r26
 666:	64 9f       	mul	r22, r20
 668:	66 27       	eor	r22, r22
 66a:	b0 0d       	add	r27, r0
 66c:	a1 1d       	adc	r26, r1
 66e:	66 1f       	adc	r22, r22
 670:	82 9f       	mul	r24, r18
 672:	22 27       	eor	r18, r18
 674:	b0 0d       	add	r27, r0
 676:	a1 1d       	adc	r26, r1
 678:	62 1f       	adc	r22, r18
 67a:	73 9f       	mul	r23, r19
 67c:	b0 0d       	add	r27, r0
 67e:	a1 1d       	adc	r26, r1
 680:	62 1f       	adc	r22, r18
 682:	83 9f       	mul	r24, r19
 684:	a0 0d       	add	r26, r0
 686:	61 1d       	adc	r22, r1
 688:	22 1f       	adc	r18, r18
 68a:	74 9f       	mul	r23, r20
 68c:	33 27       	eor	r19, r19
 68e:	a0 0d       	add	r26, r0
 690:	61 1d       	adc	r22, r1
 692:	23 1f       	adc	r18, r19
 694:	84 9f       	mul	r24, r20
 696:	60 0d       	add	r22, r0
 698:	21 1d       	adc	r18, r1
 69a:	82 2f       	mov	r24, r18
 69c:	76 2f       	mov	r23, r22
 69e:	6a 2f       	mov	r22, r26
 6a0:	11 24       	eor	r1, r1
 6a2:	9f 57       	subi	r25, 0x7F	; 127
 6a4:	50 40       	sbci	r21, 0x00	; 0
 6a6:	8a f0       	brmi	.+34     	; 0x6ca <__mulsf3_pse+0x84>
 6a8:	e1 f0       	breq	.+56     	; 0x6e2 <__mulsf3_pse+0x9c>
 6aa:	88 23       	and	r24, r24
 6ac:	4a f0       	brmi	.+18     	; 0x6c0 <__mulsf3_pse+0x7a>
 6ae:	ee 0f       	add	r30, r30
 6b0:	ff 1f       	adc	r31, r31
 6b2:	bb 1f       	adc	r27, r27
 6b4:	66 1f       	adc	r22, r22
 6b6:	77 1f       	adc	r23, r23
 6b8:	88 1f       	adc	r24, r24
 6ba:	91 50       	subi	r25, 0x01	; 1
 6bc:	50 40       	sbci	r21, 0x00	; 0
 6be:	a9 f7       	brne	.-22     	; 0x6aa <__mulsf3_pse+0x64>
 6c0:	9e 3f       	cpi	r25, 0xFE	; 254
 6c2:	51 05       	cpc	r21, r1
 6c4:	70 f0       	brcs	.+28     	; 0x6e2 <__mulsf3_pse+0x9c>
 6c6:	60 cf       	rjmp	.-320    	; 0x588 <__fp_inf>
 6c8:	aa cf       	rjmp	.-172    	; 0x61e <__fp_szero>
 6ca:	5f 3f       	cpi	r21, 0xFF	; 255
 6cc:	ec f3       	brlt	.-6      	; 0x6c8 <__mulsf3_pse+0x82>
 6ce:	98 3e       	cpi	r25, 0xE8	; 232
 6d0:	dc f3       	brlt	.-10     	; 0x6c8 <__mulsf3_pse+0x82>
 6d2:	86 95       	lsr	r24
 6d4:	77 95       	ror	r23
 6d6:	67 95       	ror	r22
 6d8:	b7 95       	ror	r27
 6da:	f7 95       	ror	r31
 6dc:	e7 95       	ror	r30
 6de:	9f 5f       	subi	r25, 0xFF	; 255
 6e0:	c1 f7       	brne	.-16     	; 0x6d2 <__mulsf3_pse+0x8c>
 6e2:	fe 2b       	or	r31, r30
 6e4:	88 0f       	add	r24, r24
 6e6:	91 1d       	adc	r25, r1
 6e8:	96 95       	lsr	r25
 6ea:	87 95       	ror	r24
 6ec:	97 f9       	bld	r25, 7
 6ee:	08 95       	ret
 6f0:	11 f4       	brne	.+4      	; 0x6f6 <__mulsf3_pse+0xb0>
 6f2:	0e f4       	brtc	.+2      	; 0x6f6 <__mulsf3_pse+0xb0>
 6f4:	4f cf       	rjmp	.-354    	; 0x594 <__fp_nan>
 6f6:	3e c0       	rjmp	.+124    	; 0x774 <__fp_mpack>

000006f8 <sqrt>:
 6f8:	77 df       	rcall	.-274    	; 0x5e8 <__fp_splitA>
 6fa:	d0 f3       	brcs	.-12     	; 0x6f0 <__mulsf3_pse+0xaa>
 6fc:	99 23       	and	r25, r25
 6fe:	d9 f3       	breq	.-10     	; 0x6f6 <__mulsf3_pse+0xb0>
 700:	ce f3       	brts	.-14     	; 0x6f4 <__mulsf3_pse+0xae>
 702:	9f 57       	subi	r25, 0x7F	; 127
 704:	55 0b       	sbc	r21, r21
 706:	87 ff       	sbrs	r24, 7
 708:	43 d0       	rcall	.+134    	; 0x790 <__fp_norm2>
 70a:	00 24       	eor	r0, r0
 70c:	a0 e6       	ldi	r26, 0x60	; 96
 70e:	40 ea       	ldi	r20, 0xA0	; 160
 710:	90 01       	movw	r18, r0
 712:	80 58       	subi	r24, 0x80	; 128
 714:	56 95       	lsr	r21
 716:	97 95       	ror	r25
 718:	28 f4       	brcc	.+10     	; 0x724 <sqrt+0x2c>
 71a:	80 5c       	subi	r24, 0xC0	; 192
 71c:	66 0f       	add	r22, r22
 71e:	77 1f       	adc	r23, r23
 720:	88 1f       	adc	r24, r24
 722:	20 f0       	brcs	.+8      	; 0x72c <sqrt+0x34>
 724:	26 17       	cp	r18, r22
 726:	37 07       	cpc	r19, r23
 728:	48 07       	cpc	r20, r24
 72a:	30 f4       	brcc	.+12     	; 0x738 <sqrt+0x40>
 72c:	62 1b       	sub	r22, r18
 72e:	73 0b       	sbc	r23, r19
 730:	84 0b       	sbc	r24, r20
 732:	20 29       	or	r18, r0
 734:	31 29       	or	r19, r1
 736:	4a 2b       	or	r20, r26
 738:	a6 95       	lsr	r26
 73a:	17 94       	ror	r1
 73c:	07 94       	ror	r0
 73e:	20 25       	eor	r18, r0
 740:	31 25       	eor	r19, r1
 742:	4a 27       	eor	r20, r26
 744:	58 f7       	brcc	.-42     	; 0x71c <sqrt+0x24>
 746:	66 0f       	add	r22, r22
 748:	77 1f       	adc	r23, r23
 74a:	88 1f       	adc	r24, r24
 74c:	20 f0       	brcs	.+8      	; 0x756 <sqrt+0x5e>
 74e:	26 17       	cp	r18, r22
 750:	37 07       	cpc	r19, r23
 752:	48 07       	cpc	r20, r24
 754:	30 f4       	brcc	.+12     	; 0x762 <sqrt+0x6a>
 756:	62 0b       	sbc	r22, r18
 758:	73 0b       	sbc	r23, r19
 75a:	84 0b       	sbc	r24, r20
 75c:	20 0d       	add	r18, r0
 75e:	31 1d       	adc	r19, r1
 760:	41 1d       	adc	r20, r1
 762:	a0 95       	com	r26
 764:	81 f7       	brne	.-32     	; 0x746 <sqrt+0x4e>
 766:	b9 01       	movw	r22, r18
 768:	84 2f       	mov	r24, r20
 76a:	91 58       	subi	r25, 0x81	; 129
 76c:	88 0f       	add	r24, r24
 76e:	96 95       	lsr	r25
 770:	87 95       	ror	r24
 772:	08 95       	ret

00000774 <__fp_mpack>:
 774:	9f 3f       	cpi	r25, 0xFF	; 255
 776:	31 f0       	breq	.+12     	; 0x784 <__fp_mpack_finite+0xc>

00000778 <__fp_mpack_finite>:
 778:	91 50       	subi	r25, 0x01	; 1
 77a:	20 f4       	brcc	.+8      	; 0x784 <__fp_mpack_finite+0xc>
 77c:	87 95       	ror	r24
 77e:	77 95       	ror	r23
 780:	67 95       	ror	r22
 782:	b7 95       	ror	r27
 784:	88 0f       	add	r24, r24
 786:	91 1d       	adc	r25, r1
 788:	96 95       	lsr	r25
 78a:	87 95       	ror	r24
 78c:	97 f9       	bld	r25, 7
 78e:	08 95       	ret

00000790 <__fp_norm2>:
 790:	91 50       	subi	r25, 0x01	; 1
 792:	50 40       	sbci	r21, 0x00	; 0
 794:	66 0f       	add	r22, r22
 796:	77 1f       	adc	r23, r23
 798:	88 1f       	adc	r24, r24
 79a:	d2 f7       	brpl	.-12     	; 0x790 <__fp_norm2>
 79c:	08 95       	ret

0000079e <__tablejump2__>:
 79e:	ee 0f       	add	r30, r30
 7a0:	ff 1f       	adc	r31, r31
 7a2:	88 1f       	adc	r24, r24
 7a4:	8b bf       	out	0x3b, r24	; 59
 7a6:	07 90       	elpm	r0, Z+
 7a8:	f6 91       	elpm	r31, Z
 7aa:	e0 2d       	mov	r30, r0
 7ac:	19 94       	eijmp

000007ae <_exit>:
 7ae:	f8 94       	cli

000007b0 <__stop_program>:
 7b0:	ff cf       	rjmp	.-2      	; 0x7b0 <__stop_program>
