
BIL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000886  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000812  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  00000886  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000886  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000127c  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e92  00000000  00000000  00001c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007de  00000000  00000000  00002abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  0000329c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000695  00000000  00000000  000033ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027d  00000000  00000000  00003a81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003cfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7c c0       	rjmp	.+248    	; 0xfa <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
   a:	00 00       	nop
   c:	fd c0       	rjmp	.+506    	; 0x208 <__vector_3>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	7c c0       	rjmp	.+248    	; 0x11e <__bad_interrupt>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	6c c0       	rjmp	.+216    	; 0x11e <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	5c c0       	rjmp	.+184    	; 0x11e <__bad_interrupt>
  66:	00 00       	nop
  68:	5a c0       	rjmp	.+180    	; 0x11e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	46 c0       	rjmp	.+140    	; 0x11e <__bad_interrupt>
  92:	00 00       	nop
  94:	44 c0       	rjmp	.+136    	; 0x11e <__bad_interrupt>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	40 c0       	rjmp	.+128    	; 0x11e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a4 00       	.word	0x00a4	; ????
  e6:	a9 00       	.word	0x00a9	; ????
  e8:	ae 00       	.word	0x00ae	; ????
  ea:	b3 00       	.word	0x00b3	; ????
  ec:	c2 00       	.word	0x00c2	; ????
  ee:	c7 00       	.word	0x00c7	; ????
  f0:	cc 00       	.word	0x00cc	; ????
  f2:	d1 00       	.word	0x00d1	; ????
  f4:	d6 00       	.word	0x00d6	; ????
  f6:	db 00       	.word	0x00db	; ????
  f8:	e0 00       	.word	0x00e0	; ????

000000fa <__ctors_end>:
  fa:	11 24       	eor	r1, r1
  fc:	1f be       	out	0x3f, r1	; 63
  fe:	cf ef       	ldi	r28, 0xFF	; 255
 100:	d1 e2       	ldi	r29, 0x21	; 33
 102:	de bf       	out	0x3e, r29	; 62
 104:	cd bf       	out	0x3d, r28	; 61
 106:	00 e0       	ldi	r16, 0x00	; 0
 108:	0c bf       	out	0x3c, r16	; 60

0000010a <__do_clear_bss>:
 10a:	22 e0       	ldi	r18, 0x02	; 2
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a1 30       	cpi	r26, 0x01	; 1
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	87 d0       	rcall	.+270    	; 0x22a <main>
 11c:	78 c3       	rjmp	.+1776   	; 0x80e <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <initSystem>:
{
// 	initFrontLight();
// 	initRearLight();
// 	initUnderglow();
// 	initMP3();
	initMotor();
 120:	93 d0       	rcall	.+294    	; 0x248 <initMotor>
	initSwitchPort();
 122:	61 c0       	rjmp	.+194    	; 0x1e6 <initSwitchPort>
 124:	08 95       	ret

00000126 <driveControl>:
 126:	cf 93       	push	r28
	
}

void driveControl()
{
 128:	df 93       	push	r29
	int ned_af_bakke = 0;
 12a:	c0 e0       	ldi	r28, 0x00	; 0
 12c:	d0 e0       	ldi	r29, 0x00	; 0
	//_delay_ms(5000);
	//turnOnFront();
	//turnOnRear();
	//
	do{
		switch (counter)
 12e:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 132:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__bss_end>
 136:	eb 30       	cpi	r30, 0x0B	; 11
 138:	f1 05       	cpc	r31, r1
 13a:	08 f0       	brcs	.+2      	; 0x13e <driveControl+0x18>
 13c:	45 c0       	rjmp	.+138    	; 0x1c8 <driveControl+0xa2>
 13e:	88 27       	eor	r24, r24
 140:	ee 58       	subi	r30, 0x8E	; 142
 142:	ff 4f       	sbci	r31, 0xFF	; 255
 144:	8f 4f       	sbci	r24, 0xFF	; 255
 146:	5b c3       	rjmp	.+1718   	; 0x7fe <__tablejump2__>
		{
		case 0:
			carDrive(30,2);
 148:	62 e0       	ldi	r22, 0x02	; 2
 14a:	8e e1       	ldi	r24, 0x1E	; 30
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	b2 d0       	rcall	.+356    	; 0x2b4 <carDrive>
			break;
 150:	3b c0       	rjmp	.+118    	; 0x1c8 <driveControl+0xa2>
		
		case 1: //Brik 1
			carDrive(50, 5); //Nedsæt hastigheden lidt (Bakke snart)
 152:	65 e0       	ldi	r22, 0x05	; 5
 154:	82 e3       	ldi	r24, 0x32	; 50
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	ad d0       	rcall	.+346    	; 0x2b4 <carDrive>
			break;
 15a:	36 c0       	rjmp	.+108    	; 0x1c8 <driveControl+0xa2>
			
		case 2: //Brik 2
			carDrive(80, 1); //Bakke start - hastighed ydeligere ned
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	80 e5       	ldi	r24, 0x50	; 80
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	a8 d0       	rcall	.+336    	; 0x2b4 <carDrive>
			break;
 164:	31 c0       	rjmp	.+98     	; 0x1c8 <driveControl+0xa2>
			
		case 3: //Brik 3
			if (ned_af_bakke < 5000)
 166:	c8 38       	cpi	r28, 0x88	; 136
 168:	83 e1       	ldi	r24, 0x13	; 19
 16a:	d8 07       	cpc	r29, r24
			{
				carDrive(-17, 1); //Hastighed ned inden bakken kører ned
 16c:	34 f4       	brge	.+12     	; 0x17a <driveControl+0x54>
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	8f ee       	ldi	r24, 0xEF	; 239
 172:	9f ef       	ldi	r25, 0xFF	; 255
 174:	9f d0       	rcall	.+318    	; 0x2b4 <carDrive>
				ned_af_bakke++;
 176:	21 96       	adiw	r28, 0x01	; 1
				
			}else{
				carDrive(30, 7);
 178:	27 c0       	rjmp	.+78     	; 0x1c8 <driveControl+0xa2>
 17a:	67 e0       	ldi	r22, 0x07	; 7
 17c:	8e e1       	ldi	r24, 0x1E	; 30
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	99 d0       	rcall	.+306    	; 0x2b4 <carDrive>
			
			break;
		
			
		case 4: //Brik 4
			carDrive(70, 5); //HAstigheden op - bunden af bakken
 182:	22 c0       	rjmp	.+68     	; 0x1c8 <driveControl+0xa2>
 184:	65 e0       	ldi	r22, 0x05	; 5
 186:	86 e4       	ldi	r24, 0x46	; 70
 188:	90 e0       	ldi	r25, 0x00	; 0
			break;
 18a:	94 d0       	rcall	.+296    	; 0x2b4 <carDrive>
			
		case 5: //Brik 5
			carDrive(50, 10); //hastigheden lidt ned - gør klar til snart at stoppe
 18c:	1d c0       	rjmp	.+58     	; 0x1c8 <driveControl+0xa2>
 18e:	6a e0       	ldi	r22, 0x0A	; 10
 190:	82 e3       	ldi	r24, 0x32	; 50
 192:	90 e0       	ldi	r25, 0x00	; 0
			break;
 194:	8f d0       	rcall	.+286    	; 0x2b4 <carDrive>
			
		case 6: //Brik 6
			carDrive(-30, 1); //Kør tilbage til refleksbrik 5
 196:	18 c0       	rjmp	.+48     	; 0x1c8 <driveControl+0xa2>
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	82 ee       	ldi	r24, 0xE2	; 226
 19c:	9f ef       	ldi	r25, 0xFF	; 255
			break;
			
		case 7: //Brik 6
			carDrive(-50, 3); //Refelksbrik 6 igen
 19e:	8a d0       	rcall	.+276    	; 0x2b4 <carDrive>
 1a0:	13 c0       	rjmp	.+38     	; 0x1c8 <driveControl+0xa2>
 1a2:	63 e0       	ldi	r22, 0x03	; 3
 1a4:	8e ec       	ldi	r24, 0xCE	; 206
			break;
 1a6:	9f ef       	ldi	r25, 0xFF	; 255
			
		case 8: //Brik 5
			carDrive(70, 1); //Kør frem igen
 1a8:	85 d0       	rcall	.+266    	; 0x2b4 <carDrive>
 1aa:	0e c0       	rjmp	.+28     	; 0x1c8 <driveControl+0xa2>
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	86 e4       	ldi	r24, 0x46	; 70
			break;
 1b0:	90 e0       	ldi	r25, 0x00	; 0
			
		case 9: //Brik 5
			carDrive(70, 4); //Kør frem igen
 1b2:	80 d0       	rcall	.+256    	; 0x2b4 <carDrive>
 1b4:	09 c0       	rjmp	.+18     	; 0x1c8 <driveControl+0xa2>
 1b6:	64 e0       	ldi	r22, 0x04	; 4
 1b8:	86 e4       	ldi	r24, 0x46	; 70
 1ba:	90 e0       	ldi	r25, 0x00	; 0
			break;
			
		case 10: //Brik 6
			carDrive(50, 7); //Kør frem igen	
 1bc:	7b d0       	rcall	.+246    	; 0x2b4 <carDrive>
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <driveControl+0xa2>
 1c0:	67 e0       	ldi	r22, 0x07	; 7
 1c2:	82 e3       	ldi	r24, 0x32	; 50
 1c4:	90 e0       	ldi	r25, 0x00	; 0
			
			
			
		}

	}while (counter < 11); //Går ud af do-while når refliksbrik 7 er nået
 1c6:	76 d0       	rcall	.+236    	; 0x2b4 <carDrive>
 1c8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1cc:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__bss_end>
 1d0:	0b 97       	sbiw	r24, 0x0b	; 11
 1d2:	0c f4       	brge	.+2      	; 0x1d6 <driveControl+0xb0>
	
	carStop();
 1d4:	ac cf       	rjmp	.-168    	; 0x12e <driveControl+0x8>
 1d6:	48 d0       	rcall	.+144    	; 0x268 <carStop>
	//playStop();
	//
	//turnOffUnder();
	//turnOffFront();
	//turnOffRear();
	counter = 0;
 1d8:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__bss_end>
 1dc:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <initSwitchPort>:

// Læser alle switches samtidigt
unsigned char switchStatus()
{
  return (~PINA);
}
 1e6:	11 b8       	out	0x01, r1	; 1
 1e8:	08 95       	ret

000001ea <switchOn>:
// Returnerer TRUE, hvis switchen med nummeret
// "switch_nr" er aktiveret - ellers returneres FALSE
unsigned char switchOn(unsigned char switch_nr)
{
unsigned char mask;
  if (switch_nr <= MAX_SWITCH_NR)
 1ea:	88 30       	cpi	r24, 0x08	; 8
 1ec:	58 f4       	brcc	.+22     	; 0x204 <switchOn+0x1a>
  {
    mask = 0b00000001 << switch_nr;
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <switchOn+0xe>
 1f4:	22 0f       	add	r18, r18
 1f6:	33 1f       	adc	r19, r19
 1f8:	8a 95       	dec	r24
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <switchOn+0xa>
    return (~PINA & mask);
 1fc:	80 b1       	in	r24, 0x00	; 0
 1fe:	80 95       	com	r24
 200:	82 23       	and	r24, r18
 202:	08 95       	ret
  }
  else
    return 0;
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	08 95       	ret

00000208 <__vector_3>:
unsigned char detection = 0;


//Initialiser interrupt counter - husk playReflex();
ISR(INT2_vect) //refleks registreret
{
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
	counter++;
 214:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 218:	8f 5f       	subi	r24, 0xFF	; 255
 21a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
		////playReflex();
		//detection = 1;
		//TCNT1 = 34286;
		//TCCR1B |= 0b00000101;
	//}
}
 21e:	8f 91       	pop	r24
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <main>:



int main(void)
{
	sei();
 22a:	78 94       	sei
	EIMSK=0b00000100;
 22c:	84 e0       	ldi	r24, 0x04	; 4
 22e:	8d bb       	out	0x1d, r24	; 29
	EICRA=0b00110000;
 230:	80 e3       	ldi	r24, 0x30	; 48
 232:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
	
	//Timer til reflex
	//TCCR1A = 0b00000000;
	//TCCR1B = 0b00000000;
	
	initSystem();
 236:	74 df       	rcall	.-280    	; 0x120 <initSystem>
	counter = 0;
 238:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
	
    while (1) 
    {
		if (switchOn(1) != 0)
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	d5 df       	rcall	.-86     	; 0x1ea <switchOn>
 240:	88 23       	and	r24, r24
		{
			driveControl(); //start driveControl / System
 242:	e1 f3       	breq	.-8      	; 0x23c <main+0x12>
 244:	70 df       	rcall	.-288    	; 0x126 <driveControl>
 246:	fa cf       	rjmp	.-12     	; 0x23c <main+0x12>

00000248 <initMotor>:
#define F_CPU 16000000
#include <util/delay.h>

void initMotor(void)
{
	OCR1A = 0x3FF;
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	93 e0       	ldi	r25, 0x03	; 3
 24c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 250:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	TCCR1A = 0b11000011;
 254:	83 ec       	ldi	r24, 0xC3	; 195
 256:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = 0b00000000;
 25a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	DDRB = 0b11111111;
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00001000;
 262:	88 e0       	ldi	r24, 0x08	; 8
 264:	85 b9       	out	0x05, r24	; 5
 266:	08 95       	ret

00000268 <carStop>:
}


void carStop()
{
	while (OCR1A != 0x3FF)
 268:	0d c0       	rjmp	.+26     	; 0x284 <carStop+0x1c>
	{
		OCR1A++;
 26a:	e8 e8       	ldi	r30, 0x88	; 136
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	91 81       	ldd	r25, Z+1	; 0x01
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	91 83       	std	Z+1, r25	; 0x01
 276:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 278:	8f e3       	ldi	r24, 0x3F	; 63
 27a:	9f e1       	ldi	r25, 0x1F	; 31
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <carStop+0x14>
 280:	00 c0       	rjmp	.+0      	; 0x282 <carStop+0x1a>
 282:	00 00       	nop
}


void carStop()
{
	while (OCR1A != 0x3FF)
 284:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 288:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 28c:	8f 3f       	cpi	r24, 0xFF	; 255
 28e:	93 40       	sbci	r25, 0x03	; 3
 290:	61 f7       	brne	.-40     	; 0x26a <carStop+0x2>
	{
		OCR1A++;
		_delay_ms(2);
	}
	TCCR1B = (0b11111000 & TCCR1B);
 292:	e1 e8       	ldi	r30, 0x81	; 129
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	88 7f       	andi	r24, 0xF8	; 248
 29a:	80 83       	st	Z, r24
 29c:	08 95       	ret

0000029e <delay_ms>:
	return;
}

void delay_ms(unsigned char milliseconds)
{
	while(milliseconds > 0)
 29e:	07 c0       	rjmp	.+14     	; 0x2ae <delay_ms+0x10>
	{
		milliseconds--;
 2a0:	81 50       	subi	r24, 0x01	; 1
 2a2:	ef e9       	ldi	r30, 0x9F	; 159
 2a4:	ff e0       	ldi	r31, 0x0F	; 15
 2a6:	31 97       	sbiw	r30, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <delay_ms+0x8>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <delay_ms+0xe>
 2ac:	00 00       	nop
	return;
}

void delay_ms(unsigned char milliseconds)
{
	while(milliseconds > 0)
 2ae:	81 11       	cpse	r24, r1
 2b0:	f7 cf       	rjmp	.-18     	; 0x2a0 <delay_ms+0x2>
	{
		milliseconds--;
		_delay_ms(1);
	}
 2b2:	08 95       	ret

000002b4 <carDrive>:
	
}


void carDrive(int speed, char acceleration)
{
 2b4:	bf 92       	push	r11
 2b6:	cf 92       	push	r12
 2b8:	df 92       	push	r13
 2ba:	ef 92       	push	r14
 2bc:	ff 92       	push	r15
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	1f 92       	push	r1
 2c8:	1f 92       	push	r1
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
 2ce:	8c 01       	movw	r16, r24
 2d0:	b6 2e       	mov	r11, r22

	if(speed == 100){
 2d2:	84 36       	cpi	r24, 0x64	; 100
 2d4:	91 05       	cpc	r25, r1
 2d6:	11 f4       	brne	.+4      	; 0x2dc <carDrive+0x28>
	speed = 99;
 2d8:	03 e6       	ldi	r16, 0x63	; 99
 2da:	10 e0       	ldi	r17, 0x00	; 0
	}
	volatile int requestedSpeed = (1023-((sqrt(speed * speed))*(1023/100))); 
 2dc:	00 9f       	mul	r16, r16
 2de:	60 01       	movw	r12, r0
 2e0:	01 9f       	mul	r16, r17
 2e2:	d0 0c       	add	r13, r0
 2e4:	d0 0c       	add	r13, r0
 2e6:	11 24       	eor	r1, r1
 2e8:	0d 2c       	mov	r0, r13
 2ea:	00 0c       	add	r0, r0
 2ec:	ee 08       	sbc	r14, r14
 2ee:	ff 08       	sbc	r15, r15
 2f0:	c7 01       	movw	r24, r14
 2f2:	b6 01       	movw	r22, r12
 2f4:	3e d1       	rcall	.+636    	; 0x572 <__floatsisf>
 2f6:	30 d2       	rcall	.+1120   	; 0x758 <sqrt>
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	40 e2       	ldi	r20, 0x20	; 32
 2fe:	51 e4       	ldi	r21, 0x41	; 65
 300:	c4 d1       	rcall	.+904    	; 0x68a <__mulsf3>
 302:	9b 01       	movw	r18, r22
 304:	ac 01       	movw	r20, r24
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	70 ec       	ldi	r23, 0xC0	; 192
 30a:	8f e7       	ldi	r24, 0x7F	; 127
 30c:	94 e4       	ldi	r25, 0x44	; 68
 30e:	99 d0       	rcall	.+306    	; 0x442 <__subsf3>
 310:	fd d0       	rcall	.+506    	; 0x50c <__fixsfsi>
 312:	7a 83       	std	Y+2, r23	; 0x02
 314:	69 83       	std	Y+1, r22	; 0x01
	
	if (speed == 0) //bilen skal holde stille.
 316:	01 15       	cp	r16, r1
 318:	11 05       	cpc	r17, r1
 31a:	11 f4       	brne	.+4      	; 0x320 <carDrive+0x6c>
	{
		carStop();
 31c:	a5 df       	rcall	.-182    	; 0x268 <carStop>
 31e:	85 c0       	rjmp	.+266    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		return;
 320:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	}
	if ((TCCR1B & 0b00000010) == 0)
 324:	81 fd       	sbrc	r24, 1
 326:	05 c0       	rjmp	.+10     	; 0x332 <carDrive+0x7e>
 328:	e1 e8       	ldi	r30, 0x81	; 129
	{
		TCCR1B = TCCR1B | 0b00000010;
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	82 60       	ori	r24, 0x02	; 2
 330:	80 83       	st	Z, r24
 332:	11 23       	and	r17, r17
	}
	if (speed < 0) //bilen skal køre baglæns.
 334:	0c f0       	brlt	.+2      	; 0x338 <carDrive+0x84>
 336:	3d c0       	rjmp	.+122    	; 0x3b2 <carDrive+0xfe>
 338:	85 b1       	in	r24, 0x05	; 5
	{
		if (PORTB == 0b00001000) //hvis bit 3 er sat, kører bilen fremad.
 33a:	88 30       	cpi	r24, 0x08	; 8
 33c:	99 f4       	brne	.+38     	; 0x364 <carDrive+0xb0>
 33e:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		{
			if (OCR1A == 0x3FF) //tjekker om bilen holder stille.
 342:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 346:	8f 3f       	cpi	r24, 0xFF	; 255
 348:	93 40       	sbci	r25, 0x03	; 3
 34a:	11 f4       	brne	.+4      	; 0x350 <carDrive+0x9c>
 34c:	15 b8       	out	0x05, r1	; 5
			{
				PORTB = 0b00000000; //clearer bit 3, så bilen bakker. 
 34e:	6d c0       	rjmp	.+218    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 350:	e8 e8       	ldi	r30, 0x88	; 136
			}
			else
			{
				OCR1A++;
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	91 81       	ldd	r25, Z+1	; 0x01
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	91 83       	std	Z+1, r25	; 0x01
 35c:	80 83       	st	Z, r24
				delay_ms(acceleration);
 35e:	8b 2d       	mov	r24, r11
 360:	9e df       	rcall	.-196    	; 0x29e <delay_ms>
 362:	63 c0       	rjmp	.+198    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 364:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			}
		}
		
		else //bilen kører allerede baglæns.
		{
			if (OCR1A < requestedSpeed) //hvis bilen kører for hurtigt.
 368:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 36c:	89 81       	ldd	r24, Y+1	; 0x01
 36e:	9a 81       	ldd	r25, Y+2	; 0x02
 370:	28 17       	cp	r18, r24
 372:	39 07       	cpc	r19, r25
 374:	50 f4       	brcc	.+20     	; 0x38a <carDrive+0xd6>
 376:	e8 e8       	ldi	r30, 0x88	; 136
			{
				OCR1A++;
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	91 81       	ldd	r25, Z+1	; 0x01
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	91 83       	std	Z+1, r25	; 0x01
 382:	80 83       	st	Z, r24
				delay_ms(acceleration);
 384:	8b 2d       	mov	r24, r11
 386:	8b df       	rcall	.-234    	; 0x29e <delay_ms>
 388:	50 c0       	rjmp	.+160    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 38a:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			}
			else if (OCR1A > requestedSpeed) //hvis bilen kører for langsomt.
 38e:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 392:	89 81       	ldd	r24, Y+1	; 0x01
 394:	9a 81       	ldd	r25, Y+2	; 0x02
 396:	82 17       	cp	r24, r18
 398:	93 07       	cpc	r25, r19
 39a:	08 f0       	brcs	.+2      	; 0x39e <carDrive+0xea>
 39c:	46 c0       	rjmp	.+140    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 39e:	e8 e8       	ldi	r30, 0x88	; 136
			{
				OCR1A--;
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	91 81       	ldd	r25, Z+1	; 0x01
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	91 83       	std	Z+1, r25	; 0x01
 3aa:	80 83       	st	Z, r24
				delay_ms(acceleration);
 3ac:	8b 2d       	mov	r24, r11
 3ae:	77 df       	rcall	.-274    	; 0x29e <delay_ms>
 3b0:	3c c0       	rjmp	.+120    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 3b2:	85 b1       	in	r24, 0x05	; 5
		}
	}
	
	else //bilen skal køre forlæns.
	{
		if (PORTB == 0b00001000) //hvis bit 3 er sat, kører bilen fremad.
 3b4:	88 30       	cpi	r24, 0x08	; 8
 3b6:	31 f5       	brne	.+76     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3b8:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		{
			if (OCR1A < requestedSpeed) //hvis bilen kører for hurtigt.
 3bc:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3c0:	89 81       	ldd	r24, Y+1	; 0x01
 3c2:	9a 81       	ldd	r25, Y+2	; 0x02
 3c4:	28 17       	cp	r18, r24
 3c6:	39 07       	cpc	r19, r25
 3c8:	50 f4       	brcc	.+20     	; 0x3de <carDrive+0x12a>
			{
				OCR1A++;
 3ca:	e8 e8       	ldi	r30, 0x88	; 136
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 81       	ld	r24, Z
 3d0:	91 81       	ldd	r25, Z+1	; 0x01
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	91 83       	std	Z+1, r25	; 0x01
 3d6:	80 83       	st	Z, r24
				delay_ms(acceleration);
 3d8:	8b 2d       	mov	r24, r11
 3da:	61 df       	rcall	.-318    	; 0x29e <delay_ms>
 3dc:	26 c0       	rjmp	.+76     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 3de:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			}
			else if (OCR1A > requestedSpeed) //hvis bilen kører for langsomt.
 3e2:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	9a 81       	ldd	r25, Y+2	; 0x02
 3ea:	82 17       	cp	r24, r18
 3ec:	93 07       	cpc	r25, r19
 3ee:	e8 f4       	brcc	.+58     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			{
				OCR1A = OCR1A-1;
 3f0:	e8 e8       	ldi	r30, 0x88	; 136
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	80 81       	ld	r24, Z
 3f6:	91 81       	ldd	r25, Z+1	; 0x01
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	91 83       	std	Z+1, r25	; 0x01
 3fc:	80 83       	st	Z, r24
				delay_ms(acceleration);
 3fe:	8b 2d       	mov	r24, r11
 400:	4e df       	rcall	.-356    	; 0x29e <delay_ms>
 402:	13 c0       	rjmp	.+38     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 404:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
				return;
			}	
		}
		else //bilen køererer baglæns.
		{
			if (OCR1A == 0x3FF) //tjekker om bilen holder stille.
 408:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 40c:	8f 3f       	cpi	r24, 0xFF	; 255
 40e:	93 40       	sbci	r25, 0x03	; 3
 410:	19 f4       	brne	.+6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 412:	88 e0       	ldi	r24, 0x08	; 8
			{
				PORTB = 0b00001000; //setter bit 3, så bilen køererererer forlæns.
 414:	85 b9       	out	0x05, r24	; 5
 416:	09 c0       	rjmp	.+18     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			}
			else
			{
				OCR1A++;
 418:	e8 e8       	ldi	r30, 0x88	; 136
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	91 81       	ldd	r25, Z+1	; 0x01
 420:	01 96       	adiw	r24, 0x01	; 1
 422:	91 83       	std	Z+1, r25	; 0x01
 424:	80 83       	st	Z, r24
				delay_ms(acceleration);
 426:	8b 2d       	mov	r24, r11
 428:	3a df       	rcall	.-396    	; 0x29e <delay_ms>
 42a:	0f 90       	pop	r0
			}
		}

	}
}
 42c:	0f 90       	pop	r0
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	ff 90       	pop	r15
 438:	ef 90       	pop	r14
 43a:	df 90       	pop	r13
 43c:	cf 90       	pop	r12
 43e:	bf 90       	pop	r11
 440:	08 95       	ret

00000442 <__subsf3>:
 442:	50 58       	subi	r21, 0x80	; 128

00000444 <__addsf3>:
 444:	bb 27       	eor	r27, r27
 446:	aa 27       	eor	r26, r26
 448:	0e d0       	rcall	.+28     	; 0x466 <__addsf3x>
 44a:	e5 c0       	rjmp	.+458    	; 0x616 <__fp_round>
 44c:	d6 d0       	rcall	.+428    	; 0x5fa <__fp_pscA>
 44e:	30 f0       	brcs	.+12     	; 0x45c <__addsf3+0x18>
 450:	db d0       	rcall	.+438    	; 0x608 <__fp_pscB>
 452:	20 f0       	brcs	.+8      	; 0x45c <__addsf3+0x18>
 454:	31 f4       	brne	.+12     	; 0x462 <__addsf3+0x1e>
 456:	9f 3f       	cpi	r25, 0xFF	; 255
 458:	11 f4       	brne	.+4      	; 0x45e <__addsf3+0x1a>
 45a:	1e f4       	brtc	.+6      	; 0x462 <__addsf3+0x1e>
 45c:	cb c0       	rjmp	.+406    	; 0x5f4 <__fp_nan>
 45e:	0e f4       	brtc	.+2      	; 0x462 <__addsf3+0x1e>
 460:	e0 95       	com	r30
 462:	e7 fb       	bst	r30, 7
 464:	c1 c0       	rjmp	.+386    	; 0x5e8 <__fp_inf>

00000466 <__addsf3x>:
 466:	e9 2f       	mov	r30, r25
 468:	e7 d0       	rcall	.+462    	; 0x638 <__fp_split3>
 46a:	80 f3       	brcs	.-32     	; 0x44c <__addsf3+0x8>
 46c:	ba 17       	cp	r27, r26
 46e:	62 07       	cpc	r22, r18
 470:	73 07       	cpc	r23, r19
 472:	84 07       	cpc	r24, r20
 474:	95 07       	cpc	r25, r21
 476:	18 f0       	brcs	.+6      	; 0x47e <__addsf3x+0x18>
 478:	71 f4       	brne	.+28     	; 0x496 <__addsf3x+0x30>
 47a:	9e f5       	brtc	.+102    	; 0x4e2 <__addsf3x+0x7c>
 47c:	ff c0       	rjmp	.+510    	; 0x67c <__fp_zero>
 47e:	0e f4       	brtc	.+2      	; 0x482 <__addsf3x+0x1c>
 480:	e0 95       	com	r30
 482:	0b 2e       	mov	r0, r27
 484:	ba 2f       	mov	r27, r26
 486:	a0 2d       	mov	r26, r0
 488:	0b 01       	movw	r0, r22
 48a:	b9 01       	movw	r22, r18
 48c:	90 01       	movw	r18, r0
 48e:	0c 01       	movw	r0, r24
 490:	ca 01       	movw	r24, r20
 492:	a0 01       	movw	r20, r0
 494:	11 24       	eor	r1, r1
 496:	ff 27       	eor	r31, r31
 498:	59 1b       	sub	r21, r25
 49a:	99 f0       	breq	.+38     	; 0x4c2 <__addsf3x+0x5c>
 49c:	59 3f       	cpi	r21, 0xF9	; 249
 49e:	50 f4       	brcc	.+20     	; 0x4b4 <__addsf3x+0x4e>
 4a0:	50 3e       	cpi	r21, 0xE0	; 224
 4a2:	68 f1       	brcs	.+90     	; 0x4fe <__addsf3x+0x98>
 4a4:	1a 16       	cp	r1, r26
 4a6:	f0 40       	sbci	r31, 0x00	; 0
 4a8:	a2 2f       	mov	r26, r18
 4aa:	23 2f       	mov	r18, r19
 4ac:	34 2f       	mov	r19, r20
 4ae:	44 27       	eor	r20, r20
 4b0:	58 5f       	subi	r21, 0xF8	; 248
 4b2:	f3 cf       	rjmp	.-26     	; 0x49a <__addsf3x+0x34>
 4b4:	46 95       	lsr	r20
 4b6:	37 95       	ror	r19
 4b8:	27 95       	ror	r18
 4ba:	a7 95       	ror	r26
 4bc:	f0 40       	sbci	r31, 0x00	; 0
 4be:	53 95       	inc	r21
 4c0:	c9 f7       	brne	.-14     	; 0x4b4 <__addsf3x+0x4e>
 4c2:	7e f4       	brtc	.+30     	; 0x4e2 <__addsf3x+0x7c>
 4c4:	1f 16       	cp	r1, r31
 4c6:	ba 0b       	sbc	r27, r26
 4c8:	62 0b       	sbc	r22, r18
 4ca:	73 0b       	sbc	r23, r19
 4cc:	84 0b       	sbc	r24, r20
 4ce:	ba f0       	brmi	.+46     	; 0x4fe <__addsf3x+0x98>
 4d0:	91 50       	subi	r25, 0x01	; 1
 4d2:	a1 f0       	breq	.+40     	; 0x4fc <__addsf3x+0x96>
 4d4:	ff 0f       	add	r31, r31
 4d6:	bb 1f       	adc	r27, r27
 4d8:	66 1f       	adc	r22, r22
 4da:	77 1f       	adc	r23, r23
 4dc:	88 1f       	adc	r24, r24
 4de:	c2 f7       	brpl	.-16     	; 0x4d0 <__addsf3x+0x6a>
 4e0:	0e c0       	rjmp	.+28     	; 0x4fe <__addsf3x+0x98>
 4e2:	ba 0f       	add	r27, r26
 4e4:	62 1f       	adc	r22, r18
 4e6:	73 1f       	adc	r23, r19
 4e8:	84 1f       	adc	r24, r20
 4ea:	48 f4       	brcc	.+18     	; 0x4fe <__addsf3x+0x98>
 4ec:	87 95       	ror	r24
 4ee:	77 95       	ror	r23
 4f0:	67 95       	ror	r22
 4f2:	b7 95       	ror	r27
 4f4:	f7 95       	ror	r31
 4f6:	9e 3f       	cpi	r25, 0xFE	; 254
 4f8:	08 f0       	brcs	.+2      	; 0x4fc <__addsf3x+0x96>
 4fa:	b3 cf       	rjmp	.-154    	; 0x462 <__addsf3+0x1e>
 4fc:	93 95       	inc	r25
 4fe:	88 0f       	add	r24, r24
 500:	08 f0       	brcs	.+2      	; 0x504 <__addsf3x+0x9e>
 502:	99 27       	eor	r25, r25
 504:	ee 0f       	add	r30, r30
 506:	97 95       	ror	r25
 508:	87 95       	ror	r24
 50a:	08 95       	ret

0000050c <__fixsfsi>:
 50c:	04 d0       	rcall	.+8      	; 0x516 <__fixunssfsi>
 50e:	68 94       	set
 510:	b1 11       	cpse	r27, r1
 512:	b5 c0       	rjmp	.+362    	; 0x67e <__fp_szero>
 514:	08 95       	ret

00000516 <__fixunssfsi>:
 516:	98 d0       	rcall	.+304    	; 0x648 <__fp_splitA>
 518:	88 f0       	brcs	.+34     	; 0x53c <__fixunssfsi+0x26>
 51a:	9f 57       	subi	r25, 0x7F	; 127
 51c:	90 f0       	brcs	.+36     	; 0x542 <__fixunssfsi+0x2c>
 51e:	b9 2f       	mov	r27, r25
 520:	99 27       	eor	r25, r25
 522:	b7 51       	subi	r27, 0x17	; 23
 524:	a0 f0       	brcs	.+40     	; 0x54e <__fixunssfsi+0x38>
 526:	d1 f0       	breq	.+52     	; 0x55c <__fixunssfsi+0x46>
 528:	66 0f       	add	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	88 1f       	adc	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	1a f0       	brmi	.+6      	; 0x538 <__fixunssfsi+0x22>
 532:	ba 95       	dec	r27
 534:	c9 f7       	brne	.-14     	; 0x528 <__fixunssfsi+0x12>
 536:	12 c0       	rjmp	.+36     	; 0x55c <__fixunssfsi+0x46>
 538:	b1 30       	cpi	r27, 0x01	; 1
 53a:	81 f0       	breq	.+32     	; 0x55c <__fixunssfsi+0x46>
 53c:	9f d0       	rcall	.+318    	; 0x67c <__fp_zero>
 53e:	b1 e0       	ldi	r27, 0x01	; 1
 540:	08 95       	ret
 542:	9c c0       	rjmp	.+312    	; 0x67c <__fp_zero>
 544:	67 2f       	mov	r22, r23
 546:	78 2f       	mov	r23, r24
 548:	88 27       	eor	r24, r24
 54a:	b8 5f       	subi	r27, 0xF8	; 248
 54c:	39 f0       	breq	.+14     	; 0x55c <__fixunssfsi+0x46>
 54e:	b9 3f       	cpi	r27, 0xF9	; 249
 550:	cc f3       	brlt	.-14     	; 0x544 <__fixunssfsi+0x2e>
 552:	86 95       	lsr	r24
 554:	77 95       	ror	r23
 556:	67 95       	ror	r22
 558:	b3 95       	inc	r27
 55a:	d9 f7       	brne	.-10     	; 0x552 <__fixunssfsi+0x3c>
 55c:	3e f4       	brtc	.+14     	; 0x56c <__fixunssfsi+0x56>
 55e:	90 95       	com	r25
 560:	80 95       	com	r24
 562:	70 95       	com	r23
 564:	61 95       	neg	r22
 566:	7f 4f       	sbci	r23, 0xFF	; 255
 568:	8f 4f       	sbci	r24, 0xFF	; 255
 56a:	9f 4f       	sbci	r25, 0xFF	; 255
 56c:	08 95       	ret

0000056e <__floatunsisf>:
 56e:	e8 94       	clt
 570:	09 c0       	rjmp	.+18     	; 0x584 <__floatsisf+0x12>

00000572 <__floatsisf>:
 572:	97 fb       	bst	r25, 7
 574:	3e f4       	brtc	.+14     	; 0x584 <__floatsisf+0x12>
 576:	90 95       	com	r25
 578:	80 95       	com	r24
 57a:	70 95       	com	r23
 57c:	61 95       	neg	r22
 57e:	7f 4f       	sbci	r23, 0xFF	; 255
 580:	8f 4f       	sbci	r24, 0xFF	; 255
 582:	9f 4f       	sbci	r25, 0xFF	; 255
 584:	99 23       	and	r25, r25
 586:	a9 f0       	breq	.+42     	; 0x5b2 <__floatsisf+0x40>
 588:	f9 2f       	mov	r31, r25
 58a:	96 e9       	ldi	r25, 0x96	; 150
 58c:	bb 27       	eor	r27, r27
 58e:	93 95       	inc	r25
 590:	f6 95       	lsr	r31
 592:	87 95       	ror	r24
 594:	77 95       	ror	r23
 596:	67 95       	ror	r22
 598:	b7 95       	ror	r27
 59a:	f1 11       	cpse	r31, r1
 59c:	f8 cf       	rjmp	.-16     	; 0x58e <__floatsisf+0x1c>
 59e:	fa f4       	brpl	.+62     	; 0x5de <__floatsisf+0x6c>
 5a0:	bb 0f       	add	r27, r27
 5a2:	11 f4       	brne	.+4      	; 0x5a8 <__floatsisf+0x36>
 5a4:	60 ff       	sbrs	r22, 0
 5a6:	1b c0       	rjmp	.+54     	; 0x5de <__floatsisf+0x6c>
 5a8:	6f 5f       	subi	r22, 0xFF	; 255
 5aa:	7f 4f       	sbci	r23, 0xFF	; 255
 5ac:	8f 4f       	sbci	r24, 0xFF	; 255
 5ae:	9f 4f       	sbci	r25, 0xFF	; 255
 5b0:	16 c0       	rjmp	.+44     	; 0x5de <__floatsisf+0x6c>
 5b2:	88 23       	and	r24, r24
 5b4:	11 f0       	breq	.+4      	; 0x5ba <__floatsisf+0x48>
 5b6:	96 e9       	ldi	r25, 0x96	; 150
 5b8:	11 c0       	rjmp	.+34     	; 0x5dc <__floatsisf+0x6a>
 5ba:	77 23       	and	r23, r23
 5bc:	21 f0       	breq	.+8      	; 0x5c6 <__floatsisf+0x54>
 5be:	9e e8       	ldi	r25, 0x8E	; 142
 5c0:	87 2f       	mov	r24, r23
 5c2:	76 2f       	mov	r23, r22
 5c4:	05 c0       	rjmp	.+10     	; 0x5d0 <__floatsisf+0x5e>
 5c6:	66 23       	and	r22, r22
 5c8:	71 f0       	breq	.+28     	; 0x5e6 <__floatsisf+0x74>
 5ca:	96 e8       	ldi	r25, 0x86	; 134
 5cc:	86 2f       	mov	r24, r22
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	60 e0       	ldi	r22, 0x00	; 0
 5d2:	2a f0       	brmi	.+10     	; 0x5de <__floatsisf+0x6c>
 5d4:	9a 95       	dec	r25
 5d6:	66 0f       	add	r22, r22
 5d8:	77 1f       	adc	r23, r23
 5da:	88 1f       	adc	r24, r24
 5dc:	da f7       	brpl	.-10     	; 0x5d4 <__floatsisf+0x62>
 5de:	88 0f       	add	r24, r24
 5e0:	96 95       	lsr	r25
 5e2:	87 95       	ror	r24
 5e4:	97 f9       	bld	r25, 7
 5e6:	08 95       	ret

000005e8 <__fp_inf>:
 5e8:	97 f9       	bld	r25, 7
 5ea:	9f 67       	ori	r25, 0x7F	; 127
 5ec:	80 e8       	ldi	r24, 0x80	; 128
 5ee:	70 e0       	ldi	r23, 0x00	; 0
 5f0:	60 e0       	ldi	r22, 0x00	; 0
 5f2:	08 95       	ret

000005f4 <__fp_nan>:
 5f4:	9f ef       	ldi	r25, 0xFF	; 255
 5f6:	80 ec       	ldi	r24, 0xC0	; 192
 5f8:	08 95       	ret

000005fa <__fp_pscA>:
 5fa:	00 24       	eor	r0, r0
 5fc:	0a 94       	dec	r0
 5fe:	16 16       	cp	r1, r22
 600:	17 06       	cpc	r1, r23
 602:	18 06       	cpc	r1, r24
 604:	09 06       	cpc	r0, r25
 606:	08 95       	ret

00000608 <__fp_pscB>:
 608:	00 24       	eor	r0, r0
 60a:	0a 94       	dec	r0
 60c:	12 16       	cp	r1, r18
 60e:	13 06       	cpc	r1, r19
 610:	14 06       	cpc	r1, r20
 612:	05 06       	cpc	r0, r21
 614:	08 95       	ret

00000616 <__fp_round>:
 616:	09 2e       	mov	r0, r25
 618:	03 94       	inc	r0
 61a:	00 0c       	add	r0, r0
 61c:	11 f4       	brne	.+4      	; 0x622 <__fp_round+0xc>
 61e:	88 23       	and	r24, r24
 620:	52 f0       	brmi	.+20     	; 0x636 <__fp_round+0x20>
 622:	bb 0f       	add	r27, r27
 624:	40 f4       	brcc	.+16     	; 0x636 <__fp_round+0x20>
 626:	bf 2b       	or	r27, r31
 628:	11 f4       	brne	.+4      	; 0x62e <__fp_round+0x18>
 62a:	60 ff       	sbrs	r22, 0
 62c:	04 c0       	rjmp	.+8      	; 0x636 <__fp_round+0x20>
 62e:	6f 5f       	subi	r22, 0xFF	; 255
 630:	7f 4f       	sbci	r23, 0xFF	; 255
 632:	8f 4f       	sbci	r24, 0xFF	; 255
 634:	9f 4f       	sbci	r25, 0xFF	; 255
 636:	08 95       	ret

00000638 <__fp_split3>:
 638:	57 fd       	sbrc	r21, 7
 63a:	90 58       	subi	r25, 0x80	; 128
 63c:	44 0f       	add	r20, r20
 63e:	55 1f       	adc	r21, r21
 640:	59 f0       	breq	.+22     	; 0x658 <__fp_splitA+0x10>
 642:	5f 3f       	cpi	r21, 0xFF	; 255
 644:	71 f0       	breq	.+28     	; 0x662 <__fp_splitA+0x1a>
 646:	47 95       	ror	r20

00000648 <__fp_splitA>:
 648:	88 0f       	add	r24, r24
 64a:	97 fb       	bst	r25, 7
 64c:	99 1f       	adc	r25, r25
 64e:	61 f0       	breq	.+24     	; 0x668 <__fp_splitA+0x20>
 650:	9f 3f       	cpi	r25, 0xFF	; 255
 652:	79 f0       	breq	.+30     	; 0x672 <__fp_splitA+0x2a>
 654:	87 95       	ror	r24
 656:	08 95       	ret
 658:	12 16       	cp	r1, r18
 65a:	13 06       	cpc	r1, r19
 65c:	14 06       	cpc	r1, r20
 65e:	55 1f       	adc	r21, r21
 660:	f2 cf       	rjmp	.-28     	; 0x646 <__fp_split3+0xe>
 662:	46 95       	lsr	r20
 664:	f1 df       	rcall	.-30     	; 0x648 <__fp_splitA>
 666:	08 c0       	rjmp	.+16     	; 0x678 <__fp_splitA+0x30>
 668:	16 16       	cp	r1, r22
 66a:	17 06       	cpc	r1, r23
 66c:	18 06       	cpc	r1, r24
 66e:	99 1f       	adc	r25, r25
 670:	f1 cf       	rjmp	.-30     	; 0x654 <__fp_splitA+0xc>
 672:	86 95       	lsr	r24
 674:	71 05       	cpc	r23, r1
 676:	61 05       	cpc	r22, r1
 678:	08 94       	sec
 67a:	08 95       	ret

0000067c <__fp_zero>:
 67c:	e8 94       	clt

0000067e <__fp_szero>:
 67e:	bb 27       	eor	r27, r27
 680:	66 27       	eor	r22, r22
 682:	77 27       	eor	r23, r23
 684:	cb 01       	movw	r24, r22
 686:	97 f9       	bld	r25, 7
 688:	08 95       	ret

0000068a <__mulsf3>:
 68a:	0b d0       	rcall	.+22     	; 0x6a2 <__mulsf3x>
 68c:	c4 cf       	rjmp	.-120    	; 0x616 <__fp_round>
 68e:	b5 df       	rcall	.-150    	; 0x5fa <__fp_pscA>
 690:	28 f0       	brcs	.+10     	; 0x69c <__mulsf3+0x12>
 692:	ba df       	rcall	.-140    	; 0x608 <__fp_pscB>
 694:	18 f0       	brcs	.+6      	; 0x69c <__mulsf3+0x12>
 696:	95 23       	and	r25, r21
 698:	09 f0       	breq	.+2      	; 0x69c <__mulsf3+0x12>
 69a:	a6 cf       	rjmp	.-180    	; 0x5e8 <__fp_inf>
 69c:	ab cf       	rjmp	.-170    	; 0x5f4 <__fp_nan>
 69e:	11 24       	eor	r1, r1
 6a0:	ee cf       	rjmp	.-36     	; 0x67e <__fp_szero>

000006a2 <__mulsf3x>:
 6a2:	ca df       	rcall	.-108    	; 0x638 <__fp_split3>
 6a4:	a0 f3       	brcs	.-24     	; 0x68e <__mulsf3+0x4>

000006a6 <__mulsf3_pse>:
 6a6:	95 9f       	mul	r25, r21
 6a8:	d1 f3       	breq	.-12     	; 0x69e <__mulsf3+0x14>
 6aa:	95 0f       	add	r25, r21
 6ac:	50 e0       	ldi	r21, 0x00	; 0
 6ae:	55 1f       	adc	r21, r21
 6b0:	62 9f       	mul	r22, r18
 6b2:	f0 01       	movw	r30, r0
 6b4:	72 9f       	mul	r23, r18
 6b6:	bb 27       	eor	r27, r27
 6b8:	f0 0d       	add	r31, r0
 6ba:	b1 1d       	adc	r27, r1
 6bc:	63 9f       	mul	r22, r19
 6be:	aa 27       	eor	r26, r26
 6c0:	f0 0d       	add	r31, r0
 6c2:	b1 1d       	adc	r27, r1
 6c4:	aa 1f       	adc	r26, r26
 6c6:	64 9f       	mul	r22, r20
 6c8:	66 27       	eor	r22, r22
 6ca:	b0 0d       	add	r27, r0
 6cc:	a1 1d       	adc	r26, r1
 6ce:	66 1f       	adc	r22, r22
 6d0:	82 9f       	mul	r24, r18
 6d2:	22 27       	eor	r18, r18
 6d4:	b0 0d       	add	r27, r0
 6d6:	a1 1d       	adc	r26, r1
 6d8:	62 1f       	adc	r22, r18
 6da:	73 9f       	mul	r23, r19
 6dc:	b0 0d       	add	r27, r0
 6de:	a1 1d       	adc	r26, r1
 6e0:	62 1f       	adc	r22, r18
 6e2:	83 9f       	mul	r24, r19
 6e4:	a0 0d       	add	r26, r0
 6e6:	61 1d       	adc	r22, r1
 6e8:	22 1f       	adc	r18, r18
 6ea:	74 9f       	mul	r23, r20
 6ec:	33 27       	eor	r19, r19
 6ee:	a0 0d       	add	r26, r0
 6f0:	61 1d       	adc	r22, r1
 6f2:	23 1f       	adc	r18, r19
 6f4:	84 9f       	mul	r24, r20
 6f6:	60 0d       	add	r22, r0
 6f8:	21 1d       	adc	r18, r1
 6fa:	82 2f       	mov	r24, r18
 6fc:	76 2f       	mov	r23, r22
 6fe:	6a 2f       	mov	r22, r26
 700:	11 24       	eor	r1, r1
 702:	9f 57       	subi	r25, 0x7F	; 127
 704:	50 40       	sbci	r21, 0x00	; 0
 706:	8a f0       	brmi	.+34     	; 0x72a <__mulsf3_pse+0x84>
 708:	e1 f0       	breq	.+56     	; 0x742 <__mulsf3_pse+0x9c>
 70a:	88 23       	and	r24, r24
 70c:	4a f0       	brmi	.+18     	; 0x720 <__mulsf3_pse+0x7a>
 70e:	ee 0f       	add	r30, r30
 710:	ff 1f       	adc	r31, r31
 712:	bb 1f       	adc	r27, r27
 714:	66 1f       	adc	r22, r22
 716:	77 1f       	adc	r23, r23
 718:	88 1f       	adc	r24, r24
 71a:	91 50       	subi	r25, 0x01	; 1
 71c:	50 40       	sbci	r21, 0x00	; 0
 71e:	a9 f7       	brne	.-22     	; 0x70a <__mulsf3_pse+0x64>
 720:	9e 3f       	cpi	r25, 0xFE	; 254
 722:	51 05       	cpc	r21, r1
 724:	70 f0       	brcs	.+28     	; 0x742 <__mulsf3_pse+0x9c>
 726:	60 cf       	rjmp	.-320    	; 0x5e8 <__fp_inf>
 728:	aa cf       	rjmp	.-172    	; 0x67e <__fp_szero>
 72a:	5f 3f       	cpi	r21, 0xFF	; 255
 72c:	ec f3       	brlt	.-6      	; 0x728 <__mulsf3_pse+0x82>
 72e:	98 3e       	cpi	r25, 0xE8	; 232
 730:	dc f3       	brlt	.-10     	; 0x728 <__mulsf3_pse+0x82>
 732:	86 95       	lsr	r24
 734:	77 95       	ror	r23
 736:	67 95       	ror	r22
 738:	b7 95       	ror	r27
 73a:	f7 95       	ror	r31
 73c:	e7 95       	ror	r30
 73e:	9f 5f       	subi	r25, 0xFF	; 255
 740:	c1 f7       	brne	.-16     	; 0x732 <__mulsf3_pse+0x8c>
 742:	fe 2b       	or	r31, r30
 744:	88 0f       	add	r24, r24
 746:	91 1d       	adc	r25, r1
 748:	96 95       	lsr	r25
 74a:	87 95       	ror	r24
 74c:	97 f9       	bld	r25, 7
 74e:	08 95       	ret
 750:	11 f4       	brne	.+4      	; 0x756 <__mulsf3_pse+0xb0>
 752:	0e f4       	brtc	.+2      	; 0x756 <__mulsf3_pse+0xb0>
 754:	4f cf       	rjmp	.-354    	; 0x5f4 <__fp_nan>
 756:	3e c0       	rjmp	.+124    	; 0x7d4 <__fp_mpack>

00000758 <sqrt>:
 758:	77 df       	rcall	.-274    	; 0x648 <__fp_splitA>
 75a:	d0 f3       	brcs	.-12     	; 0x750 <__mulsf3_pse+0xaa>
 75c:	99 23       	and	r25, r25
 75e:	d9 f3       	breq	.-10     	; 0x756 <__mulsf3_pse+0xb0>
 760:	ce f3       	brts	.-14     	; 0x754 <__mulsf3_pse+0xae>
 762:	9f 57       	subi	r25, 0x7F	; 127
 764:	55 0b       	sbc	r21, r21
 766:	87 ff       	sbrs	r24, 7
 768:	43 d0       	rcall	.+134    	; 0x7f0 <__fp_norm2>
 76a:	00 24       	eor	r0, r0
 76c:	a0 e6       	ldi	r26, 0x60	; 96
 76e:	40 ea       	ldi	r20, 0xA0	; 160
 770:	90 01       	movw	r18, r0
 772:	80 58       	subi	r24, 0x80	; 128
 774:	56 95       	lsr	r21
 776:	97 95       	ror	r25
 778:	28 f4       	brcc	.+10     	; 0x784 <sqrt+0x2c>
 77a:	80 5c       	subi	r24, 0xC0	; 192
 77c:	66 0f       	add	r22, r22
 77e:	77 1f       	adc	r23, r23
 780:	88 1f       	adc	r24, r24
 782:	20 f0       	brcs	.+8      	; 0x78c <sqrt+0x34>
 784:	26 17       	cp	r18, r22
 786:	37 07       	cpc	r19, r23
 788:	48 07       	cpc	r20, r24
 78a:	30 f4       	brcc	.+12     	; 0x798 <sqrt+0x40>
 78c:	62 1b       	sub	r22, r18
 78e:	73 0b       	sbc	r23, r19
 790:	84 0b       	sbc	r24, r20
 792:	20 29       	or	r18, r0
 794:	31 29       	or	r19, r1
 796:	4a 2b       	or	r20, r26
 798:	a6 95       	lsr	r26
 79a:	17 94       	ror	r1
 79c:	07 94       	ror	r0
 79e:	20 25       	eor	r18, r0
 7a0:	31 25       	eor	r19, r1
 7a2:	4a 27       	eor	r20, r26
 7a4:	58 f7       	brcc	.-42     	; 0x77c <sqrt+0x24>
 7a6:	66 0f       	add	r22, r22
 7a8:	77 1f       	adc	r23, r23
 7aa:	88 1f       	adc	r24, r24
 7ac:	20 f0       	brcs	.+8      	; 0x7b6 <sqrt+0x5e>
 7ae:	26 17       	cp	r18, r22
 7b0:	37 07       	cpc	r19, r23
 7b2:	48 07       	cpc	r20, r24
 7b4:	30 f4       	brcc	.+12     	; 0x7c2 <sqrt+0x6a>
 7b6:	62 0b       	sbc	r22, r18
 7b8:	73 0b       	sbc	r23, r19
 7ba:	84 0b       	sbc	r24, r20
 7bc:	20 0d       	add	r18, r0
 7be:	31 1d       	adc	r19, r1
 7c0:	41 1d       	adc	r20, r1
 7c2:	a0 95       	com	r26
 7c4:	81 f7       	brne	.-32     	; 0x7a6 <sqrt+0x4e>
 7c6:	b9 01       	movw	r22, r18
 7c8:	84 2f       	mov	r24, r20
 7ca:	91 58       	subi	r25, 0x81	; 129
 7cc:	88 0f       	add	r24, r24
 7ce:	96 95       	lsr	r25
 7d0:	87 95       	ror	r24
 7d2:	08 95       	ret

000007d4 <__fp_mpack>:
 7d4:	9f 3f       	cpi	r25, 0xFF	; 255
 7d6:	31 f0       	breq	.+12     	; 0x7e4 <__fp_mpack_finite+0xc>

000007d8 <__fp_mpack_finite>:
 7d8:	91 50       	subi	r25, 0x01	; 1
 7da:	20 f4       	brcc	.+8      	; 0x7e4 <__fp_mpack_finite+0xc>
 7dc:	87 95       	ror	r24
 7de:	77 95       	ror	r23
 7e0:	67 95       	ror	r22
 7e2:	b7 95       	ror	r27
 7e4:	88 0f       	add	r24, r24
 7e6:	91 1d       	adc	r25, r1
 7e8:	96 95       	lsr	r25
 7ea:	87 95       	ror	r24
 7ec:	97 f9       	bld	r25, 7
 7ee:	08 95       	ret

000007f0 <__fp_norm2>:
 7f0:	91 50       	subi	r25, 0x01	; 1
 7f2:	50 40       	sbci	r21, 0x00	; 0
 7f4:	66 0f       	add	r22, r22
 7f6:	77 1f       	adc	r23, r23
 7f8:	88 1f       	adc	r24, r24
 7fa:	d2 f7       	brpl	.-12     	; 0x7f0 <__fp_norm2>
 7fc:	08 95       	ret

000007fe <__tablejump2__>:
 7fe:	ee 0f       	add	r30, r30
 800:	ff 1f       	adc	r31, r31
 802:	88 1f       	adc	r24, r24
 804:	8b bf       	out	0x3b, r24	; 59
 806:	07 90       	elpm	r0, Z+
 808:	f6 91       	elpm	r31, Z
 80a:	e0 2d       	mov	r30, r0
 80c:	19 94       	eijmp

0000080e <_exit>:
 80e:	f8 94       	cli

00000810 <__stop_program>:
 810:	ff cf       	rjmp	.-2      	; 0x810 <__stop_program>
