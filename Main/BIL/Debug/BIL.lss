
BIL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000898  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000824  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  00000898  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001287  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e9f  00000000  00000000  00001c47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000852  00000000  00000000  00002ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00003338  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000695  00000000  00000000  00003488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027d  00000000  00000000  00003b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003d9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7c c0       	rjmp	.+248    	; 0xfa <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
   a:	00 00       	nop
   c:	03 c1       	rjmp	.+518    	; 0x214 <__vector_3>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	7c c0       	rjmp	.+248    	; 0x11e <__bad_interrupt>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	6c c0       	rjmp	.+216    	; 0x11e <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	5c c0       	rjmp	.+184    	; 0x11e <__bad_interrupt>
  66:	00 00       	nop
  68:	5a c0       	rjmp	.+180    	; 0x11e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	46 c0       	rjmp	.+140    	; 0x11e <__bad_interrupt>
  92:	00 00       	nop
  94:	44 c0       	rjmp	.+136    	; 0x11e <__bad_interrupt>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	40 c0       	rjmp	.+128    	; 0x11e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
  e2:	00 00       	nop
  e4:	aa 00       	.word	0x00aa	; ????
  e6:	af 00       	.word	0x00af	; ????
  e8:	b4 00       	.word	0x00b4	; ????
  ea:	b9 00       	.word	0x00b9	; ????
  ec:	c8 00       	.word	0x00c8	; ????
  ee:	cd 00       	.word	0x00cd	; ????
  f0:	d2 00       	.word	0x00d2	; ????
  f2:	d7 00       	.word	0x00d7	; ????
  f4:	dc 00       	.word	0x00dc	; ????
  f6:	e1 00       	.word	0x00e1	; ????
  f8:	e6 00       	.word	0x00e6	; ????

000000fa <__ctors_end>:
  fa:	11 24       	eor	r1, r1
  fc:	1f be       	out	0x3f, r1	; 63
  fe:	cf ef       	ldi	r28, 0xFF	; 255
 100:	d1 e2       	ldi	r29, 0x21	; 33
 102:	de bf       	out	0x3e, r29	; 62
 104:	cd bf       	out	0x3d, r28	; 61
 106:	00 e0       	ldi	r16, 0x00	; 0
 108:	0c bf       	out	0x3c, r16	; 60

0000010a <__do_clear_bss>:
 10a:	22 e0       	ldi	r18, 0x02	; 2
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a1 30       	cpi	r26, 0x01	; 1
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	8d d0       	rcall	.+282    	; 0x236 <main>
 11c:	81 c3       	rjmp	.+1794   	; 0x820 <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <initSystem>:
{
// 	initFrontLight();
// 	initRearLight();
// 	initUnderglow();
// 	initMP3();
	initMotor();
 120:	99 d0       	rcall	.+306    	; 0x254 <initMotor>
	initSwitchPort();
 122:	67 c0       	rjmp	.+206    	; 0x1f2 <initSwitchPort>
 124:	08 95       	ret

00000126 <driveControl>:
 126:	cf 93       	push	r28
	
}

void driveControl()
{
 128:	df 93       	push	r29
	
	PORTB |= 0b00000001;
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	85 b9       	out	0x05, r24	; 5
	PORTB &= 0b11111110;
 130:	85 b1       	in	r24, 0x05	; 5
 132:	8e 7f       	andi	r24, 0xFE	; 254
 134:	85 b9       	out	0x05, r24	; 5
	int ned_af_bakke = 0;
 136:	c0 e0       	ldi	r28, 0x00	; 0
 138:	d0 e0       	ldi	r29, 0x00	; 0
	//_delay_ms(5000);
	//turnOnFront();
	//turnOnRear();
	//
	do{
		switch (counter)
 13a:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 13e:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__bss_end>
 142:	eb 30       	cpi	r30, 0x0B	; 11
 144:	f1 05       	cpc	r31, r1
 146:	08 f0       	brcs	.+2      	; 0x14a <driveControl+0x24>
 148:	45 c0       	rjmp	.+138    	; 0x1d4 <driveControl+0xae>
 14a:	88 27       	eor	r24, r24
 14c:	ee 58       	subi	r30, 0x8E	; 142
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	8f 4f       	sbci	r24, 0xFF	; 255
 152:	5e c3       	rjmp	.+1724   	; 0x810 <__tablejump2__>
		{
		case 0:
			carDrive(30,2);
 154:	62 e0       	ldi	r22, 0x02	; 2
 156:	8e e1       	ldi	r24, 0x1E	; 30
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	b5 d0       	rcall	.+362    	; 0x2c6 <carDrive>
			break;
 15c:	3b c0       	rjmp	.+118    	; 0x1d4 <driveControl+0xae>
		
		case 1: //Brik 1
			carDrive(50, 4); //Nedsæt hastigheden lidt (Bakke snart)
 15e:	64 e0       	ldi	r22, 0x04	; 4
 160:	82 e3       	ldi	r24, 0x32	; 50
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	b0 d0       	rcall	.+352    	; 0x2c6 <carDrive>
			break;
 166:	36 c0       	rjmp	.+108    	; 0x1d4 <driveControl+0xae>
			
		case 2: //Brik 2
			carDrive(80, 2); //Bakke start - hastighed ydeligere ned
 168:	62 e0       	ldi	r22, 0x02	; 2
 16a:	80 e5       	ldi	r24, 0x50	; 80
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	ab d0       	rcall	.+342    	; 0x2c6 <carDrive>
			break;
 170:	31 c0       	rjmp	.+98     	; 0x1d4 <driveControl+0xae>
			
		case 3: //Brik 3
			if (ned_af_bakke < 500)
 172:	c4 3f       	cpi	r28, 0xF4	; 244
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	d8 07       	cpc	r29, r24
			{
				carDrive(-17, 1); //Hastighed ned inden bakken kører ned
 178:	34 f4       	brge	.+12     	; 0x186 <driveControl+0x60>
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	8f ee       	ldi	r24, 0xEF	; 239
 17e:	9f ef       	ldi	r25, 0xFF	; 255
 180:	a2 d0       	rcall	.+324    	; 0x2c6 <carDrive>
				ned_af_bakke++;
 182:	21 96       	adiw	r28, 0x01	; 1
				
			}else{
				carDrive(30, 7);
 184:	27 c0       	rjmp	.+78     	; 0x1d4 <driveControl+0xae>
 186:	67 e0       	ldi	r22, 0x07	; 7
 188:	8e e1       	ldi	r24, 0x1E	; 30
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	9c d0       	rcall	.+312    	; 0x2c6 <carDrive>
			
			break;
		
			
		case 4: //Brik 4
			carDrive(70, 2); //HAstigheden op - bunden af bakken
 18e:	22 c0       	rjmp	.+68     	; 0x1d4 <driveControl+0xae>
 190:	62 e0       	ldi	r22, 0x02	; 2
 192:	86 e4       	ldi	r24, 0x46	; 70
 194:	90 e0       	ldi	r25, 0x00	; 0
			break;
 196:	97 d0       	rcall	.+302    	; 0x2c6 <carDrive>
			
		case 5: //Brik 5
			carDrive(50, 8); //hastigheden lidt ned - gør klar til snart at stoppe
 198:	1d c0       	rjmp	.+58     	; 0x1d4 <driveControl+0xae>
 19a:	68 e0       	ldi	r22, 0x08	; 8
 19c:	82 e3       	ldi	r24, 0x32	; 50
 19e:	90 e0       	ldi	r25, 0x00	; 0
			break;
 1a0:	92 d0       	rcall	.+292    	; 0x2c6 <carDrive>
			
		case 6: //Brik 6
			carDrive(-40, 1); //Kør tilbage til refleksbrik 5
 1a2:	18 c0       	rjmp	.+48     	; 0x1d4 <driveControl+0xae>
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	88 ed       	ldi	r24, 0xD8	; 216
 1a8:	9f ef       	ldi	r25, 0xFF	; 255
			break;
			
		case 7: //Brik 6
			carDrive(-50, 2); //Refelksbrik 6 igen
 1aa:	8d d0       	rcall	.+282    	; 0x2c6 <carDrive>
 1ac:	13 c0       	rjmp	.+38     	; 0x1d4 <driveControl+0xae>
 1ae:	62 e0       	ldi	r22, 0x02	; 2
 1b0:	8e ec       	ldi	r24, 0xCE	; 206
			break;
 1b2:	9f ef       	ldi	r25, 0xFF	; 255
			
		case 8: //Brik 5
			carDrive(70, 1); //Kør frem igen
 1b4:	88 d0       	rcall	.+272    	; 0x2c6 <carDrive>
 1b6:	0e c0       	rjmp	.+28     	; 0x1d4 <driveControl+0xae>
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	86 e4       	ldi	r24, 0x46	; 70
			break;
 1bc:	90 e0       	ldi	r25, 0x00	; 0
			
		case 9: //Brik 5
			carDrive(70, 2); //Kør frem igen
 1be:	83 d0       	rcall	.+262    	; 0x2c6 <carDrive>
 1c0:	09 c0       	rjmp	.+18     	; 0x1d4 <driveControl+0xae>
 1c2:	62 e0       	ldi	r22, 0x02	; 2
 1c4:	86 e4       	ldi	r24, 0x46	; 70
 1c6:	90 e0       	ldi	r25, 0x00	; 0
			break;
			
		case 10: //Brik 6
			carDrive(50, 7); //Kør frem igen	
 1c8:	7e d0       	rcall	.+252    	; 0x2c6 <carDrive>
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <driveControl+0xae>
 1cc:	67 e0       	ldi	r22, 0x07	; 7
 1ce:	82 e3       	ldi	r24, 0x32	; 50
 1d0:	90 e0       	ldi	r25, 0x00	; 0
			
			
			
		}

	}while (counter < 11); //Går ud af do-while når refliksbrik 7 er nået
 1d2:	79 d0       	rcall	.+242    	; 0x2c6 <carDrive>
 1d4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1d8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__bss_end>
 1dc:	0b 97       	sbiw	r24, 0x0b	; 11
 1de:	0c f4       	brge	.+2      	; 0x1e2 <driveControl+0xbc>
	
	carStop();
 1e0:	ac cf       	rjmp	.-168    	; 0x13a <driveControl+0x14>
 1e2:	4b d0       	rcall	.+150    	; 0x27a <carStop>
	//playStop();
	//
	//turnOffUnder();
	//turnOffFront();
	//turnOffRear();
	counter = 0;
 1e4:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__bss_end>
 1e8:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <initSwitchPort>:

// Læser alle switches samtidigt
unsigned char switchStatus()
{
  return (~PINA);
}
 1f2:	11 b8       	out	0x01, r1	; 1
 1f4:	08 95       	ret

000001f6 <switchOn>:
// Returnerer TRUE, hvis switchen med nummeret
// "switch_nr" er aktiveret - ellers returneres FALSE
unsigned char switchOn(unsigned char switch_nr)
{
unsigned char mask;
  if (switch_nr <= MAX_SWITCH_NR)
 1f6:	88 30       	cpi	r24, 0x08	; 8
 1f8:	58 f4       	brcc	.+22     	; 0x210 <switchOn+0x1a>
  {
    mask = 0b00000001 << switch_nr;
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <switchOn+0xe>
 200:	22 0f       	add	r18, r18
 202:	33 1f       	adc	r19, r19
 204:	8a 95       	dec	r24
 206:	e2 f7       	brpl	.-8      	; 0x200 <switchOn+0xa>
    return (~PINA & mask);
 208:	80 b1       	in	r24, 0x00	; 0
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	08 95       	ret
  }
  else
    return 0;
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	08 95       	ret

00000214 <__vector_3>:
unsigned char detection = 0;


//Initialiser interrupt counter - husk playReflex();
ISR(INT2_vect) //refleks registreret
{
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	8f 93       	push	r24
	counter++;
 220:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 224:	8f 5f       	subi	r24, 0xFF	; 255
 226:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>

	//}else
	//{
		
	//}
}
 22a:	8f 91       	pop	r24
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <main>:



int main(void)
{
	sei();
 236:	78 94       	sei
	EIMSK=0b00000100;
 238:	84 e0       	ldi	r24, 0x04	; 4
 23a:	8d bb       	out	0x1d, r24	; 29
	EICRA=0b00110000;
 23c:	80 e3       	ldi	r24, 0x30	; 48
 23e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
	
	//Timer til reflex
	//TCCR1A = 0b00000000;
	//TCCR1B = 0b00000000;
	
	initSystem();
 242:	6e df       	rcall	.-292    	; 0x120 <initSystem>
	counter = 0;
 244:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
	
    while (1) 
    {
		if (switchOn(1) != 0)
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	d5 df       	rcall	.-86     	; 0x1f6 <switchOn>
 24c:	88 23       	and	r24, r24
		{
			driveControl(); //start driveControl / System
 24e:	e1 f3       	breq	.-8      	; 0x248 <main+0x12>
 250:	6a df       	rcall	.-300    	; 0x126 <driveControl>
 252:	fa cf       	rjmp	.-12     	; 0x248 <main+0x12>

00000254 <initMotor>:
#define F_CPU 16000000
#include <util/delay.h>

void initMotor(void)
{
	OCR1A = 0x3FF;
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	93 e0       	ldi	r25, 0x03	; 3
 258:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 25c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	TCCR1A = 0b11000011;
 260:	83 ec       	ldi	r24, 0xC3	; 195
 262:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = 0b00000000;
 266:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	DDRB = 0b11111111;
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00001001;
 26e:	89 e0       	ldi	r24, 0x09	; 9
 270:	85 b9       	out	0x05, r24	; 5
	PORTB &= 0b11111110;
 272:	85 b1       	in	r24, 0x05	; 5
 274:	8e 7f       	andi	r24, 0xFE	; 254
 276:	85 b9       	out	0x05, r24	; 5
 278:	08 95       	ret

0000027a <carStop>:
}


void carStop()
{
	while (OCR1A != 0x3FF)
 27a:	0d c0       	rjmp	.+26     	; 0x296 <carStop+0x1c>
	{
		OCR1A++;
 27c:	e8 e8       	ldi	r30, 0x88	; 136
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	91 81       	ldd	r25, Z+1	; 0x01
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	91 83       	std	Z+1, r25	; 0x01
 288:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28a:	8f e9       	ldi	r24, 0x9F	; 159
 28c:	9f e0       	ldi	r25, 0x0F	; 15
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <carStop+0x14>
 292:	00 c0       	rjmp	.+0      	; 0x294 <carStop+0x1a>
 294:	00 00       	nop
}


void carStop()
{
	while (OCR1A != 0x3FF)
 296:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 29a:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 29e:	8f 3f       	cpi	r24, 0xFF	; 255
 2a0:	93 40       	sbci	r25, 0x03	; 3
 2a2:	61 f7       	brne	.-40     	; 0x27c <carStop+0x2>
	{
		OCR1A++;
		_delay_ms(1);
	}
	TCCR1B = (0b11111000 & TCCR1B);
 2a4:	e1 e8       	ldi	r30, 0x81	; 129
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	88 7f       	andi	r24, 0xF8	; 248
 2ac:	80 83       	st	Z, r24
 2ae:	08 95       	ret

000002b0 <delay_ms>:
	return;
}

void delay_ms(unsigned char milliseconds)
{
	while(milliseconds > 0)
 2b0:	07 c0       	rjmp	.+14     	; 0x2c0 <delay_ms+0x10>
	{
		milliseconds--;
 2b2:	81 50       	subi	r24, 0x01	; 1
 2b4:	ef e9       	ldi	r30, 0x9F	; 159
 2b6:	ff e0       	ldi	r31, 0x0F	; 15
 2b8:	31 97       	sbiw	r30, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <delay_ms+0x8>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <delay_ms+0xe>
 2be:	00 00       	nop
	return;
}

void delay_ms(unsigned char milliseconds)
{
	while(milliseconds > 0)
 2c0:	81 11       	cpse	r24, r1
 2c2:	f7 cf       	rjmp	.-18     	; 0x2b2 <delay_ms+0x2>
	{
		milliseconds--;
		_delay_ms(1);
	}
 2c4:	08 95       	ret

000002c6 <carDrive>:
	
}


void carDrive(int speed, char acceleration)
{
 2c6:	bf 92       	push	r11
 2c8:	cf 92       	push	r12
 2ca:	df 92       	push	r13
 2cc:	ef 92       	push	r14
 2ce:	ff 92       	push	r15
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	1f 92       	push	r1
 2da:	1f 92       	push	r1
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
 2e0:	8c 01       	movw	r16, r24
 2e2:	b6 2e       	mov	r11, r22

	if(speed == 100){
 2e4:	84 36       	cpi	r24, 0x64	; 100
 2e6:	91 05       	cpc	r25, r1
 2e8:	11 f4       	brne	.+4      	; 0x2ee <carDrive+0x28>
	speed = 99;
 2ea:	03 e6       	ldi	r16, 0x63	; 99
 2ec:	10 e0       	ldi	r17, 0x00	; 0
	}
	volatile int requestedSpeed = (1023-((sqrt(speed * speed))*(1023/100))); 
 2ee:	00 9f       	mul	r16, r16
 2f0:	60 01       	movw	r12, r0
 2f2:	01 9f       	mul	r16, r17
 2f4:	d0 0c       	add	r13, r0
 2f6:	d0 0c       	add	r13, r0
 2f8:	11 24       	eor	r1, r1
 2fa:	0d 2c       	mov	r0, r13
 2fc:	00 0c       	add	r0, r0
 2fe:	ee 08       	sbc	r14, r14
 300:	ff 08       	sbc	r15, r15
 302:	c7 01       	movw	r24, r14
 304:	b6 01       	movw	r22, r12
 306:	3e d1       	rcall	.+636    	; 0x584 <__floatsisf>
 308:	30 d2       	rcall	.+1120   	; 0x76a <sqrt>
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	40 e2       	ldi	r20, 0x20	; 32
 310:	51 e4       	ldi	r21, 0x41	; 65
 312:	c4 d1       	rcall	.+904    	; 0x69c <__mulsf3>
 314:	9b 01       	movw	r18, r22
 316:	ac 01       	movw	r20, r24
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	70 ec       	ldi	r23, 0xC0	; 192
 31c:	8f e7       	ldi	r24, 0x7F	; 127
 31e:	94 e4       	ldi	r25, 0x44	; 68
 320:	99 d0       	rcall	.+306    	; 0x454 <__subsf3>
 322:	fd d0       	rcall	.+506    	; 0x51e <__fixsfsi>
 324:	7a 83       	std	Y+2, r23	; 0x02
 326:	69 83       	std	Y+1, r22	; 0x01
	
	if (speed == 0) //bilen skal holde stille.
 328:	01 15       	cp	r16, r1
 32a:	11 05       	cpc	r17, r1
 32c:	11 f4       	brne	.+4      	; 0x332 <carDrive+0x6c>
	{
		carStop();
 32e:	a5 df       	rcall	.-182    	; 0x27a <carStop>
 330:	85 c0       	rjmp	.+266    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		return;
 332:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	}
	if ((TCCR1B & 0b00000010) == 0)
 336:	81 fd       	sbrc	r24, 1
 338:	05 c0       	rjmp	.+10     	; 0x344 <carDrive+0x7e>
 33a:	e1 e8       	ldi	r30, 0x81	; 129
	{
		TCCR1B = TCCR1B | 0b00000010;
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	82 60       	ori	r24, 0x02	; 2
 342:	80 83       	st	Z, r24
 344:	11 23       	and	r17, r17
	}
	if (speed < 0) //bilen skal køre baglæns.
 346:	0c f0       	brlt	.+2      	; 0x34a <carDrive+0x84>
 348:	3d c0       	rjmp	.+122    	; 0x3c4 <carDrive+0xfe>
 34a:	85 b1       	in	r24, 0x05	; 5
	{
		if (PORTB == 0b00001000) //hvis bit 3 er sat, kører bilen fremad.
 34c:	88 30       	cpi	r24, 0x08	; 8
 34e:	99 f4       	brne	.+38     	; 0x376 <carDrive+0xb0>
 350:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		{
			if (OCR1A == 0x3FF) //tjekker om bilen holder stille.
 354:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 358:	8f 3f       	cpi	r24, 0xFF	; 255
 35a:	93 40       	sbci	r25, 0x03	; 3
 35c:	11 f4       	brne	.+4      	; 0x362 <carDrive+0x9c>
 35e:	15 b8       	out	0x05, r1	; 5
			{
				PORTB = 0b00000000; //clearer bit 3, så bilen bakker. 
 360:	6d c0       	rjmp	.+218    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 362:	e8 e8       	ldi	r30, 0x88	; 136
			}
			else
			{
				OCR1A++;
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	91 81       	ldd	r25, Z+1	; 0x01
 36a:	01 96       	adiw	r24, 0x01	; 1
 36c:	91 83       	std	Z+1, r25	; 0x01
 36e:	80 83       	st	Z, r24
				delay_ms(acceleration);
 370:	8b 2d       	mov	r24, r11
 372:	9e df       	rcall	.-196    	; 0x2b0 <delay_ms>
 374:	63 c0       	rjmp	.+198    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 376:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			}
		}
		
		else //bilen kører allerede baglæns.
		{
			if (OCR1A < requestedSpeed) //hvis bilen kører for hurtigt.
 37a:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 37e:	89 81       	ldd	r24, Y+1	; 0x01
 380:	9a 81       	ldd	r25, Y+2	; 0x02
 382:	28 17       	cp	r18, r24
 384:	39 07       	cpc	r19, r25
 386:	50 f4       	brcc	.+20     	; 0x39c <carDrive+0xd6>
 388:	e8 e8       	ldi	r30, 0x88	; 136
			{
				OCR1A++;
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	91 81       	ldd	r25, Z+1	; 0x01
 390:	01 96       	adiw	r24, 0x01	; 1
 392:	91 83       	std	Z+1, r25	; 0x01
 394:	80 83       	st	Z, r24
				delay_ms(acceleration);
 396:	8b 2d       	mov	r24, r11
 398:	8b df       	rcall	.-234    	; 0x2b0 <delay_ms>
 39a:	50 c0       	rjmp	.+160    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 39c:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			}
			else if (OCR1A > requestedSpeed) //hvis bilen kører for langsomt.
 3a0:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3a4:	89 81       	ldd	r24, Y+1	; 0x01
 3a6:	9a 81       	ldd	r25, Y+2	; 0x02
 3a8:	82 17       	cp	r24, r18
 3aa:	93 07       	cpc	r25, r19
 3ac:	08 f0       	brcs	.+2      	; 0x3b0 <carDrive+0xea>
 3ae:	46 c0       	rjmp	.+140    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 3b0:	e8 e8       	ldi	r30, 0x88	; 136
			{
				OCR1A--;
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	91 81       	ldd	r25, Z+1	; 0x01
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	91 83       	std	Z+1, r25	; 0x01
 3bc:	80 83       	st	Z, r24
				delay_ms(acceleration);
 3be:	8b 2d       	mov	r24, r11
 3c0:	77 df       	rcall	.-274    	; 0x2b0 <delay_ms>
 3c2:	3c c0       	rjmp	.+120    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 3c4:	85 b1       	in	r24, 0x05	; 5
		}
	}
	
	else //bilen skal køre forlæns.
	{
		if (PORTB == 0b00001000) //hvis bit 3 er sat, kører bilen fremad.
 3c6:	88 30       	cpi	r24, 0x08	; 8
 3c8:	31 f5       	brne	.+76     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3ca:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		{
			if (OCR1A < requestedSpeed) //hvis bilen kører for hurtigt.
 3ce:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
 3d4:	9a 81       	ldd	r25, Y+2	; 0x02
 3d6:	28 17       	cp	r18, r24
 3d8:	39 07       	cpc	r19, r25
 3da:	50 f4       	brcc	.+20     	; 0x3f0 <carDrive+0x12a>
			{
				OCR1A++;
 3dc:	e8 e8       	ldi	r30, 0x88	; 136
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	91 81       	ldd	r25, Z+1	; 0x01
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	91 83       	std	Z+1, r25	; 0x01
 3e8:	80 83       	st	Z, r24
				delay_ms(acceleration);
 3ea:	8b 2d       	mov	r24, r11
 3ec:	61 df       	rcall	.-318    	; 0x2b0 <delay_ms>
 3ee:	26 c0       	rjmp	.+76     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 3f0:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			}
			else if (OCR1A > requestedSpeed) //hvis bilen kører for langsomt.
 3f4:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3f8:	89 81       	ldd	r24, Y+1	; 0x01
 3fa:	9a 81       	ldd	r25, Y+2	; 0x02
 3fc:	82 17       	cp	r24, r18
 3fe:	93 07       	cpc	r25, r19
 400:	e8 f4       	brcc	.+58     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			{
				OCR1A = OCR1A-1;
 402:	e8 e8       	ldi	r30, 0x88	; 136
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	91 81       	ldd	r25, Z+1	; 0x01
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	91 83       	std	Z+1, r25	; 0x01
 40e:	80 83       	st	Z, r24
				delay_ms(acceleration);
 410:	8b 2d       	mov	r24, r11
 412:	4e df       	rcall	.-356    	; 0x2b0 <delay_ms>
 414:	13 c0       	rjmp	.+38     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 416:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
				return;
			}	
		}
		else //bilen køererer baglæns.
		{
			if (OCR1A == 0x3FF) //tjekker om bilen holder stille.
 41a:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 41e:	8f 3f       	cpi	r24, 0xFF	; 255
 420:	93 40       	sbci	r25, 0x03	; 3
 422:	19 f4       	brne	.+6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 424:	88 e0       	ldi	r24, 0x08	; 8
			{
				PORTB = 0b00001000; //setter bit 3, så bilen køererererer forlæns.
 426:	85 b9       	out	0x05, r24	; 5
 428:	09 c0       	rjmp	.+18     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			}
			else
			{
				OCR1A++;
 42a:	e8 e8       	ldi	r30, 0x88	; 136
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	91 81       	ldd	r25, Z+1	; 0x01
 432:	01 96       	adiw	r24, 0x01	; 1
 434:	91 83       	std	Z+1, r25	; 0x01
 436:	80 83       	st	Z, r24
				delay_ms(acceleration);
 438:	8b 2d       	mov	r24, r11
 43a:	3a df       	rcall	.-396    	; 0x2b0 <delay_ms>
 43c:	0f 90       	pop	r0
			}
		}

	}
}
 43e:	0f 90       	pop	r0
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	ff 90       	pop	r15
 44a:	ef 90       	pop	r14
 44c:	df 90       	pop	r13
 44e:	cf 90       	pop	r12
 450:	bf 90       	pop	r11
 452:	08 95       	ret

00000454 <__subsf3>:
 454:	50 58       	subi	r21, 0x80	; 128

00000456 <__addsf3>:
 456:	bb 27       	eor	r27, r27
 458:	aa 27       	eor	r26, r26
 45a:	0e d0       	rcall	.+28     	; 0x478 <__addsf3x>
 45c:	e5 c0       	rjmp	.+458    	; 0x628 <__fp_round>
 45e:	d6 d0       	rcall	.+428    	; 0x60c <__fp_pscA>
 460:	30 f0       	brcs	.+12     	; 0x46e <__addsf3+0x18>
 462:	db d0       	rcall	.+438    	; 0x61a <__fp_pscB>
 464:	20 f0       	brcs	.+8      	; 0x46e <__addsf3+0x18>
 466:	31 f4       	brne	.+12     	; 0x474 <__addsf3+0x1e>
 468:	9f 3f       	cpi	r25, 0xFF	; 255
 46a:	11 f4       	brne	.+4      	; 0x470 <__addsf3+0x1a>
 46c:	1e f4       	brtc	.+6      	; 0x474 <__addsf3+0x1e>
 46e:	cb c0       	rjmp	.+406    	; 0x606 <__fp_nan>
 470:	0e f4       	brtc	.+2      	; 0x474 <__addsf3+0x1e>
 472:	e0 95       	com	r30
 474:	e7 fb       	bst	r30, 7
 476:	c1 c0       	rjmp	.+386    	; 0x5fa <__fp_inf>

00000478 <__addsf3x>:
 478:	e9 2f       	mov	r30, r25
 47a:	e7 d0       	rcall	.+462    	; 0x64a <__fp_split3>
 47c:	80 f3       	brcs	.-32     	; 0x45e <__addsf3+0x8>
 47e:	ba 17       	cp	r27, r26
 480:	62 07       	cpc	r22, r18
 482:	73 07       	cpc	r23, r19
 484:	84 07       	cpc	r24, r20
 486:	95 07       	cpc	r25, r21
 488:	18 f0       	brcs	.+6      	; 0x490 <__addsf3x+0x18>
 48a:	71 f4       	brne	.+28     	; 0x4a8 <__addsf3x+0x30>
 48c:	9e f5       	brtc	.+102    	; 0x4f4 <__addsf3x+0x7c>
 48e:	ff c0       	rjmp	.+510    	; 0x68e <__fp_zero>
 490:	0e f4       	brtc	.+2      	; 0x494 <__addsf3x+0x1c>
 492:	e0 95       	com	r30
 494:	0b 2e       	mov	r0, r27
 496:	ba 2f       	mov	r27, r26
 498:	a0 2d       	mov	r26, r0
 49a:	0b 01       	movw	r0, r22
 49c:	b9 01       	movw	r22, r18
 49e:	90 01       	movw	r18, r0
 4a0:	0c 01       	movw	r0, r24
 4a2:	ca 01       	movw	r24, r20
 4a4:	a0 01       	movw	r20, r0
 4a6:	11 24       	eor	r1, r1
 4a8:	ff 27       	eor	r31, r31
 4aa:	59 1b       	sub	r21, r25
 4ac:	99 f0       	breq	.+38     	; 0x4d4 <__addsf3x+0x5c>
 4ae:	59 3f       	cpi	r21, 0xF9	; 249
 4b0:	50 f4       	brcc	.+20     	; 0x4c6 <__addsf3x+0x4e>
 4b2:	50 3e       	cpi	r21, 0xE0	; 224
 4b4:	68 f1       	brcs	.+90     	; 0x510 <__addsf3x+0x98>
 4b6:	1a 16       	cp	r1, r26
 4b8:	f0 40       	sbci	r31, 0x00	; 0
 4ba:	a2 2f       	mov	r26, r18
 4bc:	23 2f       	mov	r18, r19
 4be:	34 2f       	mov	r19, r20
 4c0:	44 27       	eor	r20, r20
 4c2:	58 5f       	subi	r21, 0xF8	; 248
 4c4:	f3 cf       	rjmp	.-26     	; 0x4ac <__addsf3x+0x34>
 4c6:	46 95       	lsr	r20
 4c8:	37 95       	ror	r19
 4ca:	27 95       	ror	r18
 4cc:	a7 95       	ror	r26
 4ce:	f0 40       	sbci	r31, 0x00	; 0
 4d0:	53 95       	inc	r21
 4d2:	c9 f7       	brne	.-14     	; 0x4c6 <__addsf3x+0x4e>
 4d4:	7e f4       	brtc	.+30     	; 0x4f4 <__addsf3x+0x7c>
 4d6:	1f 16       	cp	r1, r31
 4d8:	ba 0b       	sbc	r27, r26
 4da:	62 0b       	sbc	r22, r18
 4dc:	73 0b       	sbc	r23, r19
 4de:	84 0b       	sbc	r24, r20
 4e0:	ba f0       	brmi	.+46     	; 0x510 <__addsf3x+0x98>
 4e2:	91 50       	subi	r25, 0x01	; 1
 4e4:	a1 f0       	breq	.+40     	; 0x50e <__addsf3x+0x96>
 4e6:	ff 0f       	add	r31, r31
 4e8:	bb 1f       	adc	r27, r27
 4ea:	66 1f       	adc	r22, r22
 4ec:	77 1f       	adc	r23, r23
 4ee:	88 1f       	adc	r24, r24
 4f0:	c2 f7       	brpl	.-16     	; 0x4e2 <__addsf3x+0x6a>
 4f2:	0e c0       	rjmp	.+28     	; 0x510 <__addsf3x+0x98>
 4f4:	ba 0f       	add	r27, r26
 4f6:	62 1f       	adc	r22, r18
 4f8:	73 1f       	adc	r23, r19
 4fa:	84 1f       	adc	r24, r20
 4fc:	48 f4       	brcc	.+18     	; 0x510 <__addsf3x+0x98>
 4fe:	87 95       	ror	r24
 500:	77 95       	ror	r23
 502:	67 95       	ror	r22
 504:	b7 95       	ror	r27
 506:	f7 95       	ror	r31
 508:	9e 3f       	cpi	r25, 0xFE	; 254
 50a:	08 f0       	brcs	.+2      	; 0x50e <__addsf3x+0x96>
 50c:	b3 cf       	rjmp	.-154    	; 0x474 <__addsf3+0x1e>
 50e:	93 95       	inc	r25
 510:	88 0f       	add	r24, r24
 512:	08 f0       	brcs	.+2      	; 0x516 <__addsf3x+0x9e>
 514:	99 27       	eor	r25, r25
 516:	ee 0f       	add	r30, r30
 518:	97 95       	ror	r25
 51a:	87 95       	ror	r24
 51c:	08 95       	ret

0000051e <__fixsfsi>:
 51e:	04 d0       	rcall	.+8      	; 0x528 <__fixunssfsi>
 520:	68 94       	set
 522:	b1 11       	cpse	r27, r1
 524:	b5 c0       	rjmp	.+362    	; 0x690 <__fp_szero>
 526:	08 95       	ret

00000528 <__fixunssfsi>:
 528:	98 d0       	rcall	.+304    	; 0x65a <__fp_splitA>
 52a:	88 f0       	brcs	.+34     	; 0x54e <__fixunssfsi+0x26>
 52c:	9f 57       	subi	r25, 0x7F	; 127
 52e:	90 f0       	brcs	.+36     	; 0x554 <__fixunssfsi+0x2c>
 530:	b9 2f       	mov	r27, r25
 532:	99 27       	eor	r25, r25
 534:	b7 51       	subi	r27, 0x17	; 23
 536:	a0 f0       	brcs	.+40     	; 0x560 <__fixunssfsi+0x38>
 538:	d1 f0       	breq	.+52     	; 0x56e <__fixunssfsi+0x46>
 53a:	66 0f       	add	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	88 1f       	adc	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	1a f0       	brmi	.+6      	; 0x54a <__fixunssfsi+0x22>
 544:	ba 95       	dec	r27
 546:	c9 f7       	brne	.-14     	; 0x53a <__fixunssfsi+0x12>
 548:	12 c0       	rjmp	.+36     	; 0x56e <__fixunssfsi+0x46>
 54a:	b1 30       	cpi	r27, 0x01	; 1
 54c:	81 f0       	breq	.+32     	; 0x56e <__fixunssfsi+0x46>
 54e:	9f d0       	rcall	.+318    	; 0x68e <__fp_zero>
 550:	b1 e0       	ldi	r27, 0x01	; 1
 552:	08 95       	ret
 554:	9c c0       	rjmp	.+312    	; 0x68e <__fp_zero>
 556:	67 2f       	mov	r22, r23
 558:	78 2f       	mov	r23, r24
 55a:	88 27       	eor	r24, r24
 55c:	b8 5f       	subi	r27, 0xF8	; 248
 55e:	39 f0       	breq	.+14     	; 0x56e <__fixunssfsi+0x46>
 560:	b9 3f       	cpi	r27, 0xF9	; 249
 562:	cc f3       	brlt	.-14     	; 0x556 <__fixunssfsi+0x2e>
 564:	86 95       	lsr	r24
 566:	77 95       	ror	r23
 568:	67 95       	ror	r22
 56a:	b3 95       	inc	r27
 56c:	d9 f7       	brne	.-10     	; 0x564 <__fixunssfsi+0x3c>
 56e:	3e f4       	brtc	.+14     	; 0x57e <__fixunssfsi+0x56>
 570:	90 95       	com	r25
 572:	80 95       	com	r24
 574:	70 95       	com	r23
 576:	61 95       	neg	r22
 578:	7f 4f       	sbci	r23, 0xFF	; 255
 57a:	8f 4f       	sbci	r24, 0xFF	; 255
 57c:	9f 4f       	sbci	r25, 0xFF	; 255
 57e:	08 95       	ret

00000580 <__floatunsisf>:
 580:	e8 94       	clt
 582:	09 c0       	rjmp	.+18     	; 0x596 <__floatsisf+0x12>

00000584 <__floatsisf>:
 584:	97 fb       	bst	r25, 7
 586:	3e f4       	brtc	.+14     	; 0x596 <__floatsisf+0x12>
 588:	90 95       	com	r25
 58a:	80 95       	com	r24
 58c:	70 95       	com	r23
 58e:	61 95       	neg	r22
 590:	7f 4f       	sbci	r23, 0xFF	; 255
 592:	8f 4f       	sbci	r24, 0xFF	; 255
 594:	9f 4f       	sbci	r25, 0xFF	; 255
 596:	99 23       	and	r25, r25
 598:	a9 f0       	breq	.+42     	; 0x5c4 <__floatsisf+0x40>
 59a:	f9 2f       	mov	r31, r25
 59c:	96 e9       	ldi	r25, 0x96	; 150
 59e:	bb 27       	eor	r27, r27
 5a0:	93 95       	inc	r25
 5a2:	f6 95       	lsr	r31
 5a4:	87 95       	ror	r24
 5a6:	77 95       	ror	r23
 5a8:	67 95       	ror	r22
 5aa:	b7 95       	ror	r27
 5ac:	f1 11       	cpse	r31, r1
 5ae:	f8 cf       	rjmp	.-16     	; 0x5a0 <__floatsisf+0x1c>
 5b0:	fa f4       	brpl	.+62     	; 0x5f0 <__floatsisf+0x6c>
 5b2:	bb 0f       	add	r27, r27
 5b4:	11 f4       	brne	.+4      	; 0x5ba <__floatsisf+0x36>
 5b6:	60 ff       	sbrs	r22, 0
 5b8:	1b c0       	rjmp	.+54     	; 0x5f0 <__floatsisf+0x6c>
 5ba:	6f 5f       	subi	r22, 0xFF	; 255
 5bc:	7f 4f       	sbci	r23, 0xFF	; 255
 5be:	8f 4f       	sbci	r24, 0xFF	; 255
 5c0:	9f 4f       	sbci	r25, 0xFF	; 255
 5c2:	16 c0       	rjmp	.+44     	; 0x5f0 <__floatsisf+0x6c>
 5c4:	88 23       	and	r24, r24
 5c6:	11 f0       	breq	.+4      	; 0x5cc <__floatsisf+0x48>
 5c8:	96 e9       	ldi	r25, 0x96	; 150
 5ca:	11 c0       	rjmp	.+34     	; 0x5ee <__floatsisf+0x6a>
 5cc:	77 23       	and	r23, r23
 5ce:	21 f0       	breq	.+8      	; 0x5d8 <__floatsisf+0x54>
 5d0:	9e e8       	ldi	r25, 0x8E	; 142
 5d2:	87 2f       	mov	r24, r23
 5d4:	76 2f       	mov	r23, r22
 5d6:	05 c0       	rjmp	.+10     	; 0x5e2 <__floatsisf+0x5e>
 5d8:	66 23       	and	r22, r22
 5da:	71 f0       	breq	.+28     	; 0x5f8 <__floatsisf+0x74>
 5dc:	96 e8       	ldi	r25, 0x86	; 134
 5de:	86 2f       	mov	r24, r22
 5e0:	70 e0       	ldi	r23, 0x00	; 0
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	2a f0       	brmi	.+10     	; 0x5f0 <__floatsisf+0x6c>
 5e6:	9a 95       	dec	r25
 5e8:	66 0f       	add	r22, r22
 5ea:	77 1f       	adc	r23, r23
 5ec:	88 1f       	adc	r24, r24
 5ee:	da f7       	brpl	.-10     	; 0x5e6 <__floatsisf+0x62>
 5f0:	88 0f       	add	r24, r24
 5f2:	96 95       	lsr	r25
 5f4:	87 95       	ror	r24
 5f6:	97 f9       	bld	r25, 7
 5f8:	08 95       	ret

000005fa <__fp_inf>:
 5fa:	97 f9       	bld	r25, 7
 5fc:	9f 67       	ori	r25, 0x7F	; 127
 5fe:	80 e8       	ldi	r24, 0x80	; 128
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	08 95       	ret

00000606 <__fp_nan>:
 606:	9f ef       	ldi	r25, 0xFF	; 255
 608:	80 ec       	ldi	r24, 0xC0	; 192
 60a:	08 95       	ret

0000060c <__fp_pscA>:
 60c:	00 24       	eor	r0, r0
 60e:	0a 94       	dec	r0
 610:	16 16       	cp	r1, r22
 612:	17 06       	cpc	r1, r23
 614:	18 06       	cpc	r1, r24
 616:	09 06       	cpc	r0, r25
 618:	08 95       	ret

0000061a <__fp_pscB>:
 61a:	00 24       	eor	r0, r0
 61c:	0a 94       	dec	r0
 61e:	12 16       	cp	r1, r18
 620:	13 06       	cpc	r1, r19
 622:	14 06       	cpc	r1, r20
 624:	05 06       	cpc	r0, r21
 626:	08 95       	ret

00000628 <__fp_round>:
 628:	09 2e       	mov	r0, r25
 62a:	03 94       	inc	r0
 62c:	00 0c       	add	r0, r0
 62e:	11 f4       	brne	.+4      	; 0x634 <__fp_round+0xc>
 630:	88 23       	and	r24, r24
 632:	52 f0       	brmi	.+20     	; 0x648 <__fp_round+0x20>
 634:	bb 0f       	add	r27, r27
 636:	40 f4       	brcc	.+16     	; 0x648 <__fp_round+0x20>
 638:	bf 2b       	or	r27, r31
 63a:	11 f4       	brne	.+4      	; 0x640 <__fp_round+0x18>
 63c:	60 ff       	sbrs	r22, 0
 63e:	04 c0       	rjmp	.+8      	; 0x648 <__fp_round+0x20>
 640:	6f 5f       	subi	r22, 0xFF	; 255
 642:	7f 4f       	sbci	r23, 0xFF	; 255
 644:	8f 4f       	sbci	r24, 0xFF	; 255
 646:	9f 4f       	sbci	r25, 0xFF	; 255
 648:	08 95       	ret

0000064a <__fp_split3>:
 64a:	57 fd       	sbrc	r21, 7
 64c:	90 58       	subi	r25, 0x80	; 128
 64e:	44 0f       	add	r20, r20
 650:	55 1f       	adc	r21, r21
 652:	59 f0       	breq	.+22     	; 0x66a <__fp_splitA+0x10>
 654:	5f 3f       	cpi	r21, 0xFF	; 255
 656:	71 f0       	breq	.+28     	; 0x674 <__fp_splitA+0x1a>
 658:	47 95       	ror	r20

0000065a <__fp_splitA>:
 65a:	88 0f       	add	r24, r24
 65c:	97 fb       	bst	r25, 7
 65e:	99 1f       	adc	r25, r25
 660:	61 f0       	breq	.+24     	; 0x67a <__fp_splitA+0x20>
 662:	9f 3f       	cpi	r25, 0xFF	; 255
 664:	79 f0       	breq	.+30     	; 0x684 <__fp_splitA+0x2a>
 666:	87 95       	ror	r24
 668:	08 95       	ret
 66a:	12 16       	cp	r1, r18
 66c:	13 06       	cpc	r1, r19
 66e:	14 06       	cpc	r1, r20
 670:	55 1f       	adc	r21, r21
 672:	f2 cf       	rjmp	.-28     	; 0x658 <__fp_split3+0xe>
 674:	46 95       	lsr	r20
 676:	f1 df       	rcall	.-30     	; 0x65a <__fp_splitA>
 678:	08 c0       	rjmp	.+16     	; 0x68a <__fp_splitA+0x30>
 67a:	16 16       	cp	r1, r22
 67c:	17 06       	cpc	r1, r23
 67e:	18 06       	cpc	r1, r24
 680:	99 1f       	adc	r25, r25
 682:	f1 cf       	rjmp	.-30     	; 0x666 <__fp_splitA+0xc>
 684:	86 95       	lsr	r24
 686:	71 05       	cpc	r23, r1
 688:	61 05       	cpc	r22, r1
 68a:	08 94       	sec
 68c:	08 95       	ret

0000068e <__fp_zero>:
 68e:	e8 94       	clt

00000690 <__fp_szero>:
 690:	bb 27       	eor	r27, r27
 692:	66 27       	eor	r22, r22
 694:	77 27       	eor	r23, r23
 696:	cb 01       	movw	r24, r22
 698:	97 f9       	bld	r25, 7
 69a:	08 95       	ret

0000069c <__mulsf3>:
 69c:	0b d0       	rcall	.+22     	; 0x6b4 <__mulsf3x>
 69e:	c4 cf       	rjmp	.-120    	; 0x628 <__fp_round>
 6a0:	b5 df       	rcall	.-150    	; 0x60c <__fp_pscA>
 6a2:	28 f0       	brcs	.+10     	; 0x6ae <__mulsf3+0x12>
 6a4:	ba df       	rcall	.-140    	; 0x61a <__fp_pscB>
 6a6:	18 f0       	brcs	.+6      	; 0x6ae <__mulsf3+0x12>
 6a8:	95 23       	and	r25, r21
 6aa:	09 f0       	breq	.+2      	; 0x6ae <__mulsf3+0x12>
 6ac:	a6 cf       	rjmp	.-180    	; 0x5fa <__fp_inf>
 6ae:	ab cf       	rjmp	.-170    	; 0x606 <__fp_nan>
 6b0:	11 24       	eor	r1, r1
 6b2:	ee cf       	rjmp	.-36     	; 0x690 <__fp_szero>

000006b4 <__mulsf3x>:
 6b4:	ca df       	rcall	.-108    	; 0x64a <__fp_split3>
 6b6:	a0 f3       	brcs	.-24     	; 0x6a0 <__mulsf3+0x4>

000006b8 <__mulsf3_pse>:
 6b8:	95 9f       	mul	r25, r21
 6ba:	d1 f3       	breq	.-12     	; 0x6b0 <__mulsf3+0x14>
 6bc:	95 0f       	add	r25, r21
 6be:	50 e0       	ldi	r21, 0x00	; 0
 6c0:	55 1f       	adc	r21, r21
 6c2:	62 9f       	mul	r22, r18
 6c4:	f0 01       	movw	r30, r0
 6c6:	72 9f       	mul	r23, r18
 6c8:	bb 27       	eor	r27, r27
 6ca:	f0 0d       	add	r31, r0
 6cc:	b1 1d       	adc	r27, r1
 6ce:	63 9f       	mul	r22, r19
 6d0:	aa 27       	eor	r26, r26
 6d2:	f0 0d       	add	r31, r0
 6d4:	b1 1d       	adc	r27, r1
 6d6:	aa 1f       	adc	r26, r26
 6d8:	64 9f       	mul	r22, r20
 6da:	66 27       	eor	r22, r22
 6dc:	b0 0d       	add	r27, r0
 6de:	a1 1d       	adc	r26, r1
 6e0:	66 1f       	adc	r22, r22
 6e2:	82 9f       	mul	r24, r18
 6e4:	22 27       	eor	r18, r18
 6e6:	b0 0d       	add	r27, r0
 6e8:	a1 1d       	adc	r26, r1
 6ea:	62 1f       	adc	r22, r18
 6ec:	73 9f       	mul	r23, r19
 6ee:	b0 0d       	add	r27, r0
 6f0:	a1 1d       	adc	r26, r1
 6f2:	62 1f       	adc	r22, r18
 6f4:	83 9f       	mul	r24, r19
 6f6:	a0 0d       	add	r26, r0
 6f8:	61 1d       	adc	r22, r1
 6fa:	22 1f       	adc	r18, r18
 6fc:	74 9f       	mul	r23, r20
 6fe:	33 27       	eor	r19, r19
 700:	a0 0d       	add	r26, r0
 702:	61 1d       	adc	r22, r1
 704:	23 1f       	adc	r18, r19
 706:	84 9f       	mul	r24, r20
 708:	60 0d       	add	r22, r0
 70a:	21 1d       	adc	r18, r1
 70c:	82 2f       	mov	r24, r18
 70e:	76 2f       	mov	r23, r22
 710:	6a 2f       	mov	r22, r26
 712:	11 24       	eor	r1, r1
 714:	9f 57       	subi	r25, 0x7F	; 127
 716:	50 40       	sbci	r21, 0x00	; 0
 718:	8a f0       	brmi	.+34     	; 0x73c <__mulsf3_pse+0x84>
 71a:	e1 f0       	breq	.+56     	; 0x754 <__mulsf3_pse+0x9c>
 71c:	88 23       	and	r24, r24
 71e:	4a f0       	brmi	.+18     	; 0x732 <__mulsf3_pse+0x7a>
 720:	ee 0f       	add	r30, r30
 722:	ff 1f       	adc	r31, r31
 724:	bb 1f       	adc	r27, r27
 726:	66 1f       	adc	r22, r22
 728:	77 1f       	adc	r23, r23
 72a:	88 1f       	adc	r24, r24
 72c:	91 50       	subi	r25, 0x01	; 1
 72e:	50 40       	sbci	r21, 0x00	; 0
 730:	a9 f7       	brne	.-22     	; 0x71c <__mulsf3_pse+0x64>
 732:	9e 3f       	cpi	r25, 0xFE	; 254
 734:	51 05       	cpc	r21, r1
 736:	70 f0       	brcs	.+28     	; 0x754 <__mulsf3_pse+0x9c>
 738:	60 cf       	rjmp	.-320    	; 0x5fa <__fp_inf>
 73a:	aa cf       	rjmp	.-172    	; 0x690 <__fp_szero>
 73c:	5f 3f       	cpi	r21, 0xFF	; 255
 73e:	ec f3       	brlt	.-6      	; 0x73a <__mulsf3_pse+0x82>
 740:	98 3e       	cpi	r25, 0xE8	; 232
 742:	dc f3       	brlt	.-10     	; 0x73a <__mulsf3_pse+0x82>
 744:	86 95       	lsr	r24
 746:	77 95       	ror	r23
 748:	67 95       	ror	r22
 74a:	b7 95       	ror	r27
 74c:	f7 95       	ror	r31
 74e:	e7 95       	ror	r30
 750:	9f 5f       	subi	r25, 0xFF	; 255
 752:	c1 f7       	brne	.-16     	; 0x744 <__mulsf3_pse+0x8c>
 754:	fe 2b       	or	r31, r30
 756:	88 0f       	add	r24, r24
 758:	91 1d       	adc	r25, r1
 75a:	96 95       	lsr	r25
 75c:	87 95       	ror	r24
 75e:	97 f9       	bld	r25, 7
 760:	08 95       	ret
 762:	11 f4       	brne	.+4      	; 0x768 <__mulsf3_pse+0xb0>
 764:	0e f4       	brtc	.+2      	; 0x768 <__mulsf3_pse+0xb0>
 766:	4f cf       	rjmp	.-354    	; 0x606 <__fp_nan>
 768:	3e c0       	rjmp	.+124    	; 0x7e6 <__fp_mpack>

0000076a <sqrt>:
 76a:	77 df       	rcall	.-274    	; 0x65a <__fp_splitA>
 76c:	d0 f3       	brcs	.-12     	; 0x762 <__mulsf3_pse+0xaa>
 76e:	99 23       	and	r25, r25
 770:	d9 f3       	breq	.-10     	; 0x768 <__mulsf3_pse+0xb0>
 772:	ce f3       	brts	.-14     	; 0x766 <__mulsf3_pse+0xae>
 774:	9f 57       	subi	r25, 0x7F	; 127
 776:	55 0b       	sbc	r21, r21
 778:	87 ff       	sbrs	r24, 7
 77a:	43 d0       	rcall	.+134    	; 0x802 <__fp_norm2>
 77c:	00 24       	eor	r0, r0
 77e:	a0 e6       	ldi	r26, 0x60	; 96
 780:	40 ea       	ldi	r20, 0xA0	; 160
 782:	90 01       	movw	r18, r0
 784:	80 58       	subi	r24, 0x80	; 128
 786:	56 95       	lsr	r21
 788:	97 95       	ror	r25
 78a:	28 f4       	brcc	.+10     	; 0x796 <sqrt+0x2c>
 78c:	80 5c       	subi	r24, 0xC0	; 192
 78e:	66 0f       	add	r22, r22
 790:	77 1f       	adc	r23, r23
 792:	88 1f       	adc	r24, r24
 794:	20 f0       	brcs	.+8      	; 0x79e <sqrt+0x34>
 796:	26 17       	cp	r18, r22
 798:	37 07       	cpc	r19, r23
 79a:	48 07       	cpc	r20, r24
 79c:	30 f4       	brcc	.+12     	; 0x7aa <sqrt+0x40>
 79e:	62 1b       	sub	r22, r18
 7a0:	73 0b       	sbc	r23, r19
 7a2:	84 0b       	sbc	r24, r20
 7a4:	20 29       	or	r18, r0
 7a6:	31 29       	or	r19, r1
 7a8:	4a 2b       	or	r20, r26
 7aa:	a6 95       	lsr	r26
 7ac:	17 94       	ror	r1
 7ae:	07 94       	ror	r0
 7b0:	20 25       	eor	r18, r0
 7b2:	31 25       	eor	r19, r1
 7b4:	4a 27       	eor	r20, r26
 7b6:	58 f7       	brcc	.-42     	; 0x78e <sqrt+0x24>
 7b8:	66 0f       	add	r22, r22
 7ba:	77 1f       	adc	r23, r23
 7bc:	88 1f       	adc	r24, r24
 7be:	20 f0       	brcs	.+8      	; 0x7c8 <sqrt+0x5e>
 7c0:	26 17       	cp	r18, r22
 7c2:	37 07       	cpc	r19, r23
 7c4:	48 07       	cpc	r20, r24
 7c6:	30 f4       	brcc	.+12     	; 0x7d4 <sqrt+0x6a>
 7c8:	62 0b       	sbc	r22, r18
 7ca:	73 0b       	sbc	r23, r19
 7cc:	84 0b       	sbc	r24, r20
 7ce:	20 0d       	add	r18, r0
 7d0:	31 1d       	adc	r19, r1
 7d2:	41 1d       	adc	r20, r1
 7d4:	a0 95       	com	r26
 7d6:	81 f7       	brne	.-32     	; 0x7b8 <sqrt+0x4e>
 7d8:	b9 01       	movw	r22, r18
 7da:	84 2f       	mov	r24, r20
 7dc:	91 58       	subi	r25, 0x81	; 129
 7de:	88 0f       	add	r24, r24
 7e0:	96 95       	lsr	r25
 7e2:	87 95       	ror	r24
 7e4:	08 95       	ret

000007e6 <__fp_mpack>:
 7e6:	9f 3f       	cpi	r25, 0xFF	; 255
 7e8:	31 f0       	breq	.+12     	; 0x7f6 <__fp_mpack_finite+0xc>

000007ea <__fp_mpack_finite>:
 7ea:	91 50       	subi	r25, 0x01	; 1
 7ec:	20 f4       	brcc	.+8      	; 0x7f6 <__fp_mpack_finite+0xc>
 7ee:	87 95       	ror	r24
 7f0:	77 95       	ror	r23
 7f2:	67 95       	ror	r22
 7f4:	b7 95       	ror	r27
 7f6:	88 0f       	add	r24, r24
 7f8:	91 1d       	adc	r25, r1
 7fa:	96 95       	lsr	r25
 7fc:	87 95       	ror	r24
 7fe:	97 f9       	bld	r25, 7
 800:	08 95       	ret

00000802 <__fp_norm2>:
 802:	91 50       	subi	r25, 0x01	; 1
 804:	50 40       	sbci	r21, 0x00	; 0
 806:	66 0f       	add	r22, r22
 808:	77 1f       	adc	r23, r23
 80a:	88 1f       	adc	r24, r24
 80c:	d2 f7       	brpl	.-12     	; 0x802 <__fp_norm2>
 80e:	08 95       	ret

00000810 <__tablejump2__>:
 810:	ee 0f       	add	r30, r30
 812:	ff 1f       	adc	r31, r31
 814:	88 1f       	adc	r24, r24
 816:	8b bf       	out	0x3b, r24	; 59
 818:	07 90       	elpm	r0, Z+
 81a:	f6 91       	elpm	r31, Z
 81c:	e0 2d       	mov	r30, r0
 81e:	19 94       	eijmp

00000820 <_exit>:
 820:	f8 94       	cli

00000822 <__stop_program>:
 822:	ff cf       	rjmp	.-2      	; 0x822 <__stop_program>
