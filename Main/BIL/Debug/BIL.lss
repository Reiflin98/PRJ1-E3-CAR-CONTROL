
BIL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000009aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000936  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  000009aa  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000009aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016e5  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fa7  00000000  00000000  00002271  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb6  00000000  00000000  00003218  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  00003dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d1  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000385  00000000  00000000  00004815  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004b9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7c c0       	rjmp	.+248    	; 0xfa <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
   a:	00 00       	nop
   c:	1d c1       	rjmp	.+570    	; 0x248 <__vector_3>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	7c c0       	rjmp	.+248    	; 0x11e <__bad_interrupt>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	6c c0       	rjmp	.+216    	; 0x11e <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	5c c0       	rjmp	.+184    	; 0x11e <__bad_interrupt>
  66:	00 00       	nop
  68:	5a c0       	rjmp	.+180    	; 0x11e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	46 c0       	rjmp	.+140    	; 0x11e <__bad_interrupt>
  92:	00 00       	nop
  94:	44 c0       	rjmp	.+136    	; 0x11e <__bad_interrupt>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	40 c0       	rjmp	.+128    	; 0x11e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	da c0       	rjmp	.+436    	; 0x26a <__vector_45>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
  e2:	00 00       	nop
  e4:	af 00       	.word	0x00af	; ????
  e6:	b5 00       	.word	0x00b5	; ????
  e8:	bb 00       	.word	0x00bb	; ????
  ea:	c1 00       	.word	0x00c1	; ????
  ec:	d2 00       	.word	0x00d2	; ????
  ee:	d8 00       	.word	0x00d8	; ????
  f0:	de 00       	.word	0x00de	; ????
  f2:	e4 00       	.word	0x00e4	; ????
  f4:	ea 00       	.word	0x00ea	; ????
  f6:	f0 00       	.word	0x00f0	; ????
  f8:	f6 00       	.word	0x00f6	; ????

000000fa <__ctors_end>:
  fa:	11 24       	eor	r1, r1
  fc:	1f be       	out	0x3f, r1	; 63
  fe:	cf ef       	ldi	r28, 0xFF	; 255
 100:	d1 e2       	ldi	r29, 0x21	; 33
 102:	de bf       	out	0x3e, r29	; 62
 104:	cd bf       	out	0x3d, r28	; 61
 106:	00 e0       	ldi	r16, 0x00	; 0
 108:	0c bf       	out	0x3c, r16	; 60

0000010a <__do_clear_bss>:
 10a:	22 e0       	ldi	r18, 0x02	; 2
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a1 30       	cpi	r26, 0x01	; 1
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	d0 d0       	rcall	.+416    	; 0x2bc <main>
 11c:	0a c4       	rjmp	.+2068   	; 0x932 <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <initSystem>:

extern counter;

void initSystem()
{
 	initFrontLight();
 120:	8c d0       	rcall	.+280    	; 0x23a <initFrontLight>
 	initRearLight();
 122:	e4 d1       	rcall	.+968    	; 0x4ec <initRearLight>
// 	initUnderglow();
// 	initMP3();
	initMotor();
 124:	dc d0       	rcall	.+440    	; 0x2de <initMotor>
 126:	78 c0       	rjmp	.+240    	; 0x218 <initSwitchPort>
	initSwitchPort();
 128:	08 95       	ret

0000012a <driveControl>:
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
}

void driveControl()
{
	
	PORTB |= 0b00000100;
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	84 60       	ori	r24, 0x04	; 4
 132:	85 b9       	out	0x05, r24	; 5
	PORTB &= 0b11111011;
 134:	85 b1       	in	r24, 0x05	; 5
 136:	8b 7f       	andi	r24, 0xFB	; 251
 138:	85 b9       	out	0x05, r24	; 5
	int ned_af_bakke = 0;
	//turnOnUnder();
	//_delay_ms(5000);
	//playStart();
	//_delay_ms(5000);
	turnOnFront();
 13a:	82 d0       	rcall	.+260    	; 0x240 <turnOnFront>
	turnOnRearLightDrive();
 13c:	fd d1       	rcall	.+1018   	; 0x538 <turnOnRearLightDrive>
	initRearLight();
 13e:	d6 d1       	rcall	.+940    	; 0x4ec <initRearLight>
 140:	c0 e0       	ldi	r28, 0x00	; 0
void driveControl()
{
	
	PORTB |= 0b00000100;
	PORTB &= 0b11111011;
	int ned_af_bakke = 0;
 142:	d0 e0       	ldi	r29, 0x00	; 0
 144:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
	turnOnFront();
	turnOnRearLightDrive();
	initRearLight();
	//
	do{
		switch (counter)
 148:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__bss_end>
 14c:	eb 30       	cpi	r30, 0x0B	; 11
 14e:	f1 05       	cpc	r31, r1
 150:	08 f0       	brcs	.+2      	; 0x154 <driveControl+0x2a>
 152:	51 c0       	rjmp	.+162    	; 0x1f6 <driveControl+0xcc>
 154:	88 27       	eor	r24, r24
 156:	ee 58       	subi	r30, 0x8E	; 142
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	8f 4f       	sbci	r24, 0xFF	; 255
 15c:	e2 c3       	rjmp	.+1988   	; 0x922 <__tablejump2__>
 15e:	6c ed       	ldi	r22, 0xDC	; 220
		{
		case 0:
			carDrive(50,1500);
 160:	75 e0       	ldi	r23, 0x05	; 5
 162:	82 e3       	ldi	r24, 0x32	; 50
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	f0 d0       	rcall	.+480    	; 0x348 <carDrive>
 168:	46 c0       	rjmp	.+140    	; 0x1f6 <driveControl+0xcc>
			break;
		
		case 1: //Brik 1
			carDrive(60, 2500); //Nedsæt hastigheden lidt (Bakke snart)
 16a:	64 ec       	ldi	r22, 0xC4	; 196
 16c:	79 e0       	ldi	r23, 0x09	; 9
 16e:	8c e3       	ldi	r24, 0x3C	; 60
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	ea d0       	rcall	.+468    	; 0x348 <carDrive>
			break;
 174:	40 c0       	rjmp	.+128    	; 0x1f6 <driveControl+0xcc>
			
		case 2: //Brik 2
			carDrive(90, 3000); //Bakke start - hastighed ydeligere ned
 176:	68 eb       	ldi	r22, 0xB8	; 184
 178:	7b e0       	ldi	r23, 0x0B	; 11
 17a:	8a e5       	ldi	r24, 0x5A	; 90
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	e4 d0       	rcall	.+456    	; 0x348 <carDrive>
 180:	3a c0       	rjmp	.+116    	; 0x1f6 <driveControl+0xcc>
			break;
 182:	c2 35       	cpi	r28, 0x52	; 82
			
		case 3: //Brik 3
			if (ned_af_bakke < 850)
 184:	83 e0       	ldi	r24, 0x03	; 3
 186:	d8 07       	cpc	r29, r24
 188:	3c f4       	brge	.+14     	; 0x198 <driveControl+0x6e>
			{
				carDrive(-80, 0); //Hastighed ned inden bakken kører ned
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	80 eb       	ldi	r24, 0xB0	; 176
 190:	9f ef       	ldi	r25, 0xFF	; 255
 192:	da d0       	rcall	.+436    	; 0x348 <carDrive>
				ned_af_bakke++;
 194:	21 96       	adiw	r28, 0x01	; 1
 196:	2f c0       	rjmp	.+94     	; 0x1f6 <driveControl+0xcc>
				
			}else{
				carDrive(30, 4500);
 198:	64 e9       	ldi	r22, 0x94	; 148
 19a:	71 e1       	ldi	r23, 0x11	; 17
 19c:	8e e1       	ldi	r24, 0x1E	; 30
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	d3 d0       	rcall	.+422    	; 0x348 <carDrive>
 1a2:	29 c0       	rjmp	.+82     	; 0x1f6 <driveControl+0xcc>
			
			break;
		
			
		case 4: //Brik 4
			carDrive(70, 1500); //HAstigheden op - bunden af bakken
 1a4:	6c ed       	ldi	r22, 0xDC	; 220
 1a6:	75 e0       	ldi	r23, 0x05	; 5
 1a8:	86 e4       	ldi	r24, 0x46	; 70
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	cd d0       	rcall	.+410    	; 0x348 <carDrive>
			break;
 1ae:	23 c0       	rjmp	.+70     	; 0x1f6 <driveControl+0xcc>
			
		case 5: //Brik 5
			carDrive(40, 6000); //hastigheden lidt ned - gør klar til snart at stoppe
 1b0:	60 e7       	ldi	r22, 0x70	; 112
 1b2:	77 e1       	ldi	r23, 0x17	; 23
 1b4:	88 e2       	ldi	r24, 0x28	; 40
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	c7 d0       	rcall	.+398    	; 0x348 <carDrive>
			break;
			
		case 6: //Brik 6
			carDrive(-60, 100); //Kør tilbage til refleksbrik 5
 1ba:	1d c0       	rjmp	.+58     	; 0x1f6 <driveControl+0xcc>
 1bc:	64 e6       	ldi	r22, 0x64	; 100
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	84 ec       	ldi	r24, 0xC4	; 196
 1c2:	9f ef       	ldi	r25, 0xFF	; 255
			break;
 1c4:	c1 d0       	rcall	.+386    	; 0x348 <carDrive>
			
		case 7: //Brik 6
			carDrive(-60, 1500); //Refelksbrik 6 igen
 1c6:	17 c0       	rjmp	.+46     	; 0x1f6 <driveControl+0xcc>
 1c8:	6c ed       	ldi	r22, 0xDC	; 220
 1ca:	75 e0       	ldi	r23, 0x05	; 5
 1cc:	84 ec       	ldi	r24, 0xC4	; 196
 1ce:	9f ef       	ldi	r25, 0xFF	; 255
			break;
 1d0:	bb d0       	rcall	.+374    	; 0x348 <carDrive>
			
		case 8: //Brik 5
			carDrive(70, 200); //Kør frem igen
 1d2:	11 c0       	rjmp	.+34     	; 0x1f6 <driveControl+0xcc>
 1d4:	68 ec       	ldi	r22, 0xC8	; 200
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	86 e4       	ldi	r24, 0x46	; 70
 1da:	90 e0       	ldi	r25, 0x00	; 0
			break;
 1dc:	b5 d0       	rcall	.+362    	; 0x348 <carDrive>
			
		case 9: //Brik 5
			carDrive(70, 1000); //Kør frem igen
 1de:	0b c0       	rjmp	.+22     	; 0x1f6 <driveControl+0xcc>
 1e0:	68 ee       	ldi	r22, 0xE8	; 232
 1e2:	73 e0       	ldi	r23, 0x03	; 3
 1e4:	86 e4       	ldi	r24, 0x46	; 70
 1e6:	90 e0       	ldi	r25, 0x00	; 0
			break;
			
		case 10: //Brik 6
			carDrive(50, 6000); //Kør frem igen	
 1e8:	af d0       	rcall	.+350    	; 0x348 <carDrive>
 1ea:	05 c0       	rjmp	.+10     	; 0x1f6 <driveControl+0xcc>
 1ec:	60 e7       	ldi	r22, 0x70	; 112
 1ee:	77 e1       	ldi	r23, 0x17	; 23
 1f0:	82 e3       	ldi	r24, 0x32	; 50
 1f2:	90 e0       	ldi	r25, 0x00	; 0
			
			
			
		}

	}while (counter < 11); //Går ud af do-while når refliksbrik 7 er nået
 1f4:	a9 d0       	rcall	.+338    	; 0x348 <carDrive>
 1f6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1fa:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__bss_end>
 1fe:	0b 97       	sbiw	r24, 0x0b	; 11
 200:	0c f4       	brge	.+2      	; 0x204 <driveControl+0xda>
	
	carStop();
 202:	a0 cf       	rjmp	.-192    	; 0x144 <driveControl+0x1a>
 204:	7f d0       	rcall	.+254    	; 0x304 <carStop>
	
	//playStop();
	//
	//turnOffUnder();
	turnOnFront();
 206:	1c d0       	rcall	.+56     	; 0x240 <turnOnFront>
 208:	a3 d1       	rcall	.+838    	; 0x550 <turnOffRear>
	turnOffRear();
 20a:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__bss_end>
	counter = 0;
 20e:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <initSwitchPort>:
 218:	11 b8       	out	0x01, r1	; 1
 21a:	08 95       	ret

0000021c <switchOn>:
// Returnerer TRUE, hvis switchen med nummeret
// "switch_nr" er aktiveret - ellers returneres FALSE
unsigned char switchOn(unsigned char switch_nr)
{
unsigned char mask;
  if (switch_nr <= MAX_SWITCH_NR)
 21c:	88 30       	cpi	r24, 0x08	; 8
 21e:	58 f4       	brcc	.+22     	; 0x236 <switchOn+0x1a>
  {
    mask = 0b00000001 << switch_nr;
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <switchOn+0xe>
 226:	22 0f       	add	r18, r18
 228:	33 1f       	adc	r19, r19
 22a:	8a 95       	dec	r24
 22c:	e2 f7       	brpl	.-8      	; 0x226 <switchOn+0xa>
    return (~PINA & mask);
 22e:	80 b1       	in	r24, 0x00	; 0
 230:	80 95       	com	r24
 232:	82 23       	and	r24, r18
 234:	08 95       	ret
  }
  else
    return 0;
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	08 95       	ret

0000023a <initFrontLight>:
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	87 b9       	out	0x07, r24	; 7
 23e:	08 95       	ret

00000240 <turnOnFront>:
 240:	88 b1       	in	r24, 0x08	; 8
 242:	81 60       	ori	r24, 0x01	; 1
 244:	88 b9       	out	0x08, r24	; 8
 246:	08 95       	ret

00000248 <__vector_3>:
unsigned char detection = 0;


//Initialiser interrupt counter - husk playReflex();
ISR(INT2_vect) //refleks registreret
{
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	8f 93       	push	r24
	counter++;
 254:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 258:	8f 5f       	subi	r24, 0xFF	; 255
 25a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>

	//}else
	//{
		
	//}
}
 25e:	8f 91       	pop	r24
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <__vector_45>:

ISR(TIMER4_OVF_vect)
{
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	0b b6       	in	r0, 0x3b	; 59
 276:	0f 92       	push	r0
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
	turnOnRearLightDrive();
 290:	53 d1       	rcall	.+678    	; 0x538 <turnOnRearLightDrive>
	TCCR4B = 0b00000000;
 292:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
}
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	7f 91       	pop	r23
 2a4:	6f 91       	pop	r22
 2a6:	5f 91       	pop	r21
 2a8:	4f 91       	pop	r20
 2aa:	3f 91       	pop	r19
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0b be       	out	0x3b, r0	; 59
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <main>:



int main(void)
{
	sei();
 2bc:	78 94       	sei
	EIMSK=0b00000100;
 2be:	84 e0       	ldi	r24, 0x04	; 4
 2c0:	8d bb       	out	0x1d, r24	; 29
	EICRA=0b00110000;
 2c2:	80 e3       	ldi	r24, 0x30	; 48
 2c4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
	
	//Timer til reflex
	//TCCR1A = 0b00000000;
	//TCCR1B = 0b00000000;
	
	initSystem();
 2c8:	2b df       	rcall	.-426    	; 0x120 <initSystem>
	counter = 0;
 2ca:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
	
    while (1) 
    {
		if (switchOn(1) != 0 || (PINB & 0b00000001) != 0)
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	a5 df       	rcall	.-182    	; 0x21c <switchOn>
 2d2:	81 11       	cpse	r24, r1
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <main+0x1e>
 2d6:	18 9b       	sbis	0x03, 0	; 3
		{
			driveControl(); //start driveControl / System
 2d8:	fa cf       	rjmp	.-12     	; 0x2ce <main+0x12>
 2da:	27 df       	rcall	.-434    	; 0x12a <driveControl>
 2dc:	f8 cf       	rjmp	.-16     	; 0x2ce <main+0x12>

000002de <initMotor>:
	while(milliseconds > 0)
	{
		milliseconds--;
		_delay_ms(1);
	}
}
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	93 e0       	ldi	r25, 0x03	; 3
 2e2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 2e6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 2ea:	83 ec       	ldi	r24, 0xC3	; 195
 2ec:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 2f0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 2f4:	8f ef       	ldi	r24, 0xFF	; 255
 2f6:	84 b9       	out	0x04, r24	; 4
 2f8:	8c e0       	ldi	r24, 0x0C	; 12
 2fa:	85 b9       	out	0x05, r24	; 5
 2fc:	85 b1       	in	r24, 0x05	; 5
 2fe:	8b 7f       	andi	r24, 0xFB	; 251
 300:	85 b9       	out	0x05, r24	; 5
 302:	08 95       	ret

00000304 <carStop>:
 304:	08 c0       	rjmp	.+16     	; 0x316 <carStop+0x12>
 306:	e8 e8       	ldi	r30, 0x88	; 136
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	91 81       	ldd	r25, Z+1	; 0x01
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	91 83       	std	Z+1, r25	; 0x01
 312:	80 83       	st	Z, r24
 314:	fa d0       	rcall	.+500    	; 0x50a <turnOnRearLightBreak>
 316:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 31a:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 31e:	8f 3f       	cpi	r24, 0xFF	; 255
 320:	93 40       	sbci	r25, 0x03	; 3
 322:	89 f7       	brne	.-30     	; 0x306 <carStop+0x2>
 324:	2b 99       	sbic	0x05, 3	; 5
 326:	1b d1       	rcall	.+566    	; 0x55e <turnOffReverse>
 328:	e1 e8       	ldi	r30, 0x81	; 129
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	88 7f       	andi	r24, 0xF8	; 248
 330:	80 83       	st	Z, r24
 332:	08 95       	ret

00000334 <delay_us>:

void delay_us(int mikrosekunder)
{
	while(mikrosekunder > 0)
 334:	05 c0       	rjmp	.+10     	; 0x340 <delay_us+0xc>
	{
		mikrosekunder--;
 336:	01 97       	sbiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 338:	25 e0       	ldi	r18, 0x05	; 5
 33a:	2a 95       	dec	r18
 33c:	f1 f7       	brne	.-4      	; 0x33a <delay_us+0x6>
 33e:	00 00       	nop
	}
}

void delay_us(int mikrosekunder)
{
	while(mikrosekunder > 0)
 340:	18 16       	cp	r1, r24
 342:	19 06       	cpc	r1, r25
 344:	c4 f3       	brlt	.-16     	; 0x336 <delay_us+0x2>
	{
		mikrosekunder--;
		_delay_us(1);
	}
 346:	08 95       	ret

00000348 <carDrive>:
	
}


void carDrive(int speed, int acceleration)
{
 348:	af 92       	push	r10
 34a:	bf 92       	push	r11
 34c:	cf 92       	push	r12
 34e:	df 92       	push	r13
 350:	ef 92       	push	r14
 352:	ff 92       	push	r15
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	1f 92       	push	r1
 35e:	1f 92       	push	r1
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
 364:	8c 01       	movw	r16, r24
 366:	5b 01       	movw	r10, r22

	if(speed == 100){
 368:	84 36       	cpi	r24, 0x64	; 100
 36a:	91 05       	cpc	r25, r1
 36c:	11 f4       	brne	.+4      	; 0x372 <carDrive+0x2a>
	speed = 99;
 36e:	03 e6       	ldi	r16, 0x63	; 99
 370:	10 e0       	ldi	r17, 0x00	; 0
	}
	volatile int requestedSpeed = (1023-((sqrt(speed * speed))*(1023/100))); 
 372:	00 9f       	mul	r16, r16
 374:	60 01       	movw	r12, r0
 376:	01 9f       	mul	r16, r17
 378:	d0 0c       	add	r13, r0
 37a:	d0 0c       	add	r13, r0
 37c:	11 24       	eor	r1, r1
 37e:	0d 2c       	mov	r0, r13
 380:	00 0c       	add	r0, r0
 382:	ee 08       	sbc	r14, r14
 384:	ff 08       	sbc	r15, r15
 386:	c7 01       	movw	r24, r14
 388:	b6 01       	movw	r22, r12
 38a:	85 d1       	rcall	.+778    	; 0x696 <__floatsisf>
 38c:	77 d2       	rcall	.+1262   	; 0x87c <sqrt>
 38e:	20 e0       	ldi	r18, 0x00	; 0
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	40 e2       	ldi	r20, 0x20	; 32
 394:	51 e4       	ldi	r21, 0x41	; 65
 396:	0b d2       	rcall	.+1046   	; 0x7ae <__mulsf3>
 398:	9b 01       	movw	r18, r22
 39a:	ac 01       	movw	r20, r24
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	70 ec       	ldi	r23, 0xC0	; 192
 3a0:	8f e7       	ldi	r24, 0x7F	; 127
 3a2:	94 e4       	ldi	r25, 0x44	; 68
 3a4:	e0 d0       	rcall	.+448    	; 0x566 <__subsf3>
 3a6:	44 d1       	rcall	.+648    	; 0x630 <__fixsfsi>
 3a8:	7a 83       	std	Y+2, r23	; 0x02
 3aa:	69 83       	std	Y+1, r22	; 0x01
	
	if (speed == 0) //bilen skal holde stille.
 3ac:	01 15       	cp	r16, r1
 3ae:	11 05       	cpc	r17, r1
 3b0:	11 f4       	brne	.+4      	; 0x3b6 <carDrive+0x6e>
	{
		carStop();
 3b2:	a8 df       	rcall	.-176    	; 0x304 <carStop>
 3b4:	8e c0       	rjmp	.+284    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
		return;
 3b6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	}
	if ((TCCR1B & 0b00000010) == 0)
 3ba:	81 fd       	sbrc	r24, 1
 3bc:	05 c0       	rjmp	.+10     	; 0x3c8 <carDrive+0x80>
 3be:	e1 e8       	ldi	r30, 0x81	; 129
	{
		TCCR1B = TCCR1B | 0b00000010;
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	82 60       	ori	r24, 0x02	; 2
 3c6:	80 83       	st	Z, r24
 3c8:	11 23       	and	r17, r17
	}
	if (speed < 0) //bilen skal køre baglæns.
 3ca:	0c f0       	brlt	.+2      	; 0x3ce <carDrive+0x86>
 3cc:	42 c0       	rjmp	.+132    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 3ce:	85 b1       	in	r24, 0x05	; 5
	{
		if (PORTB == 0b00001000) //hvis bit 3 er sat, kører bilen fremad.
 3d0:	88 30       	cpi	r24, 0x08	; 8
 3d2:	b9 f4       	brne	.+46     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3d4:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		{
			if (OCR1A == 0x3FF) //tjekker om bilen holder stille.
 3d8:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3dc:	8f 3f       	cpi	r24, 0xFF	; 255
 3de:	93 40       	sbci	r25, 0x03	; 3
 3e0:	29 f4       	brne	.+10     	; 0x3ec <carDrive+0xa4>
			{
				PORTB &= 0b11110111; //clearer bit 3, så bilen bakker. 
 3e2:	85 b1       	in	r24, 0x05	; 5
 3e4:	87 7f       	andi	r24, 0xF7	; 247
 3e6:	85 b9       	out	0x05, r24	; 5
				turnOnReverse();
 3e8:	b6 d0       	rcall	.+364    	; 0x556 <turnOnReverse>
 3ea:	73 c0       	rjmp	.+230    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 3ec:	e8 e8       	ldi	r30, 0x88	; 136
			}
			else
			{
				OCR1A++;
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	91 81       	ldd	r25, Z+1	; 0x01
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	91 83       	std	Z+1, r25	; 0x01
				turnOnRearLightBreak();
 3f8:	80 83       	st	Z, r24
 3fa:	87 d0       	rcall	.+270    	; 0x50a <turnOnRearLightBreak>
				delay_us(acceleration);
 3fc:	c5 01       	movw	r24, r10
 3fe:	9a df       	rcall	.-204    	; 0x334 <delay_us>
 400:	68 c0       	rjmp	.+208    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 402:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			}
		}
		
		else //bilen kører allerede baglæns.
		{
			if (OCR1A < requestedSpeed) //hvis bilen kører for hurtigt.
 406:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 40a:	89 81       	ldd	r24, Y+1	; 0x01
 40c:	9a 81       	ldd	r25, Y+2	; 0x02
 40e:	28 17       	cp	r18, r24
 410:	39 07       	cpc	r19, r25
 412:	58 f4       	brcc	.+22     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			{
				OCR1A++;
 414:	e8 e8       	ldi	r30, 0x88	; 136
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	91 81       	ldd	r25, Z+1	; 0x01
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	91 83       	std	Z+1, r25	; 0x01
				turnOnRearLightBreak();
 420:	80 83       	st	Z, r24
 422:	73 d0       	rcall	.+230    	; 0x50a <turnOnRearLightBreak>
				delay_us(acceleration);
 424:	c5 01       	movw	r24, r10
 426:	86 df       	rcall	.-244    	; 0x334 <delay_us>
 428:	54 c0       	rjmp	.+168    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 42a:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			}
			else if (OCR1A > requestedSpeed) //hvis bilen kører for langsomt.
 42e:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 432:	89 81       	ldd	r24, Y+1	; 0x01
 434:	9a 81       	ldd	r25, Y+2	; 0x02
 436:	82 17       	cp	r24, r18
 438:	93 07       	cpc	r25, r19
 43a:	08 f0       	brcs	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43c:	4a c0       	rjmp	.+148    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
			{
				OCR1A--;
 43e:	e8 e8       	ldi	r30, 0x88	; 136
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	80 81       	ld	r24, Z
 444:	91 81       	ldd	r25, Z+1	; 0x01
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	91 83       	std	Z+1, r25	; 0x01
 44a:	80 83       	st	Z, r24
				delay_us(acceleration);
 44c:	c5 01       	movw	r24, r10
 44e:	72 df       	rcall	.-284    	; 0x334 <delay_us>
 450:	40 c0       	rjmp	.+128    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 452:	85 b1       	in	r24, 0x05	; 5
		}
	}
	
	else //bilen skal køre forlæns.
	{
		if (PORTB == 0b00001000) //hvis bit 3 er sat, kører bilen fremad.
 454:	88 30       	cpi	r24, 0x08	; 8
 456:	39 f5       	brne	.+78     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 458:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		{
			if (OCR1A < requestedSpeed) //hvis bilen kører for hurtigt.
 45c:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 460:	89 81       	ldd	r24, Y+1	; 0x01
 462:	9a 81       	ldd	r25, Y+2	; 0x02
 464:	28 17       	cp	r18, r24
 466:	39 07       	cpc	r19, r25
			{
				OCR1A++;
 468:	58 f4       	brcc	.+22     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 46a:	e8 e8       	ldi	r30, 0x88	; 136
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	91 81       	ldd	r25, Z+1	; 0x01
 472:	01 96       	adiw	r24, 0x01	; 1
 474:	91 83       	std	Z+1, r25	; 0x01
				turnOnRearLightBreak();
 476:	80 83       	st	Z, r24
 478:	48 d0       	rcall	.+144    	; 0x50a <turnOnRearLightBreak>
				delay_us(acceleration);
 47a:	c5 01       	movw	r24, r10
 47c:	5b df       	rcall	.-330    	; 0x334 <delay_us>
 47e:	29 c0       	rjmp	.+82     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 480:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			}
			else if (OCR1A > requestedSpeed) //hvis bilen kører for langsomt.
 484:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 488:	89 81       	ldd	r24, Y+1	; 0x01
 48a:	9a 81       	ldd	r25, Y+2	; 0x02
 48c:	82 17       	cp	r24, r18
 48e:	93 07       	cpc	r25, r19
 490:	00 f5       	brcc	.+64     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
			{
				OCR1A = OCR1A-1;
 492:	e8 e8       	ldi	r30, 0x88	; 136
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	91 81       	ldd	r25, Z+1	; 0x01
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	91 83       	std	Z+1, r25	; 0x01
				delay_us(acceleration);
 49e:	80 83       	st	Z, r24
 4a0:	c5 01       	movw	r24, r10
 4a2:	48 df       	rcall	.-368    	; 0x334 <delay_us>
 4a4:	16 c0       	rjmp	.+44     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
				return;
			}	
		}
		else //bilen køererer baglæns.
		{
			if (OCR1A == 0x3FF) //tjekker om bilen holder stille.
 4a6:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 4aa:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 4ae:	8f 3f       	cpi	r24, 0xFF	; 255
 4b0:	93 40       	sbci	r25, 0x03	; 3
			{
				PORTB |= 0b00001000; //setter bit 3, så bilen køererererer forlæns.
 4b2:	29 f4       	brne	.+10     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4b4:	85 b1       	in	r24, 0x05	; 5
 4b6:	88 60       	ori	r24, 0x08	; 8
				turnOffReverse();
 4b8:	85 b9       	out	0x05, r24	; 5
 4ba:	51 d0       	rcall	.+162    	; 0x55e <turnOffReverse>
 4bc:	0a c0       	rjmp	.+20     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
			}
			else
			{
				OCR1A++;
 4be:	e8 e8       	ldi	r30, 0x88	; 136
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	91 81       	ldd	r25, Z+1	; 0x01
 4c6:	01 96       	adiw	r24, 0x01	; 1
 4c8:	91 83       	std	Z+1, r25	; 0x01
 4ca:	80 83       	st	Z, r24
				turnOnRearLightBreak();
 4cc:	1e d0       	rcall	.+60     	; 0x50a <turnOnRearLightBreak>
 4ce:	c5 01       	movw	r24, r10
				delay_us(acceleration);
 4d0:	31 df       	rcall	.-414    	; 0x334 <delay_us>
 4d2:	0f 90       	pop	r0
 4d4:	0f 90       	pop	r0
			}
		}

	}
}
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	1f 91       	pop	r17
 4dc:	0f 91       	pop	r16
 4de:	ff 90       	pop	r15
 4e0:	ef 90       	pop	r14
 4e2:	df 90       	pop	r13
 4e4:	cf 90       	pop	r12
 4e6:	bf 90       	pop	r11
 4e8:	af 90       	pop	r10
 4ea:	08 95       	ret

000004ec <initRearLight>:
#include <avr/io.h>
#include <avr/interrupt.h>

void initRearLight (void)
{
	DDRE = 0xFF; //Sætter E til udgang da det er en E der sender PWM ud.
 4ec:	8f ef       	ldi	r24, 0xFF	; 255
 4ee:	8d b9       	out	0x0d, r24	; 13
	TCCR3A = 0b10000011; //Del A til timer 3
 4f0:	83 e8       	ldi	r24, 0x83	; 131
 4f2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
	TCCR3B = 0b00000000; //Del B til timer 3
 4f6:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
	
	TCCR4A = 0b00000000;
 4fa:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
	TCCR4B = 0b00000000;
 4fe:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
	TIMSK4 = 0b00000001;
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
 508:	08 95       	ret

0000050a <turnOnRearLightBreak>:
}

void turnOnRearLightBreak (void)
{
	TCCR3B |= 0b00000001; //Bruges kun indtil implementering på bil da ellers unødvendig
 50a:	e1 e9       	ldi	r30, 0x91	; 145
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	81 60       	ori	r24, 0x01	; 1
 512:	80 83       	st	Z, r24
	OCR3A=1023; //100% af 5V hvilket giver 50mA pr. ledsæt
 514:	8f ef       	ldi	r24, 0xFF	; 255
 516:	93 e0       	ldi	r25, 0x03	; 3
 518:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 51c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	
	TCCR4B |= 0b00000101;
 520:	e1 ea       	ldi	r30, 0xA1	; 161
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 81       	ld	r24, Z
 526:	85 60       	ori	r24, 0x05	; 5
 528:	80 83       	st	Z, r24
	TCNT4 = 57723;
 52a:	8b e7       	ldi	r24, 0x7B	; 123
 52c:	91 ee       	ldi	r25, 0xE1	; 225
 52e:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
 532:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
 536:	08 95       	ret

00000538 <turnOnRearLightDrive>:
}

void turnOnRearLightDrive (void)
{
	TCCR3B |= 0b00000001; // Sætter prescaleren for at tænde for PWM
 538:	e1 e9       	ldi	r30, 0x91	; 145
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	81 60       	ori	r24, 0x01	; 1
 540:	80 83       	st	Z, r24
	OCR3A = 205; // 20% af max (5V) hvilket giver 10mA pr. ledsæt
 542:	8d ec       	ldi	r24, 0xCD	; 205
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 54a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 54e:	08 95       	ret

00000550 <turnOffRear>:
}

void turnOffRear (void)
{
	TCCR3B = 0b00000000; // Slukker PWM til baglys
 550:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
 554:	08 95       	ret

00000556 <turnOnReverse>:
}

void turnOnReverse (void)
{
	PORTC = PORTC | 0b00000010; // Sender 5V ud til C1
 556:	88 b1       	in	r24, 0x08	; 8
 558:	82 60       	ori	r24, 0x02	; 2
 55a:	88 b9       	out	0x08, r24	; 8
 55c:	08 95       	ret

0000055e <turnOffReverse>:
}

void turnOffReverse (void)
{
	PORTC = PORTC & 0b11111101; // Sender 0V ud til C1
 55e:	88 b1       	in	r24, 0x08	; 8
 560:	8d 7f       	andi	r24, 0xFD	; 253
 562:	88 b9       	out	0x08, r24	; 8
 564:	08 95       	ret

00000566 <__subsf3>:
 566:	50 58       	subi	r21, 0x80	; 128

00000568 <__addsf3>:
 568:	bb 27       	eor	r27, r27
 56a:	aa 27       	eor	r26, r26
 56c:	0e d0       	rcall	.+28     	; 0x58a <__addsf3x>
 56e:	e5 c0       	rjmp	.+458    	; 0x73a <__fp_round>
 570:	d6 d0       	rcall	.+428    	; 0x71e <__fp_pscA>
 572:	30 f0       	brcs	.+12     	; 0x580 <__addsf3+0x18>
 574:	db d0       	rcall	.+438    	; 0x72c <__fp_pscB>
 576:	20 f0       	brcs	.+8      	; 0x580 <__addsf3+0x18>
 578:	31 f4       	brne	.+12     	; 0x586 <__addsf3+0x1e>
 57a:	9f 3f       	cpi	r25, 0xFF	; 255
 57c:	11 f4       	brne	.+4      	; 0x582 <__addsf3+0x1a>
 57e:	1e f4       	brtc	.+6      	; 0x586 <__addsf3+0x1e>
 580:	cb c0       	rjmp	.+406    	; 0x718 <__fp_nan>
 582:	0e f4       	brtc	.+2      	; 0x586 <__addsf3+0x1e>
 584:	e0 95       	com	r30
 586:	e7 fb       	bst	r30, 7
 588:	c1 c0       	rjmp	.+386    	; 0x70c <__fp_inf>

0000058a <__addsf3x>:
 58a:	e9 2f       	mov	r30, r25
 58c:	e7 d0       	rcall	.+462    	; 0x75c <__fp_split3>
 58e:	80 f3       	brcs	.-32     	; 0x570 <__addsf3+0x8>
 590:	ba 17       	cp	r27, r26
 592:	62 07       	cpc	r22, r18
 594:	73 07       	cpc	r23, r19
 596:	84 07       	cpc	r24, r20
 598:	95 07       	cpc	r25, r21
 59a:	18 f0       	brcs	.+6      	; 0x5a2 <__addsf3x+0x18>
 59c:	71 f4       	brne	.+28     	; 0x5ba <__addsf3x+0x30>
 59e:	9e f5       	brtc	.+102    	; 0x606 <__addsf3x+0x7c>
 5a0:	ff c0       	rjmp	.+510    	; 0x7a0 <__fp_zero>
 5a2:	0e f4       	brtc	.+2      	; 0x5a6 <__addsf3x+0x1c>
 5a4:	e0 95       	com	r30
 5a6:	0b 2e       	mov	r0, r27
 5a8:	ba 2f       	mov	r27, r26
 5aa:	a0 2d       	mov	r26, r0
 5ac:	0b 01       	movw	r0, r22
 5ae:	b9 01       	movw	r22, r18
 5b0:	90 01       	movw	r18, r0
 5b2:	0c 01       	movw	r0, r24
 5b4:	ca 01       	movw	r24, r20
 5b6:	a0 01       	movw	r20, r0
 5b8:	11 24       	eor	r1, r1
 5ba:	ff 27       	eor	r31, r31
 5bc:	59 1b       	sub	r21, r25
 5be:	99 f0       	breq	.+38     	; 0x5e6 <__addsf3x+0x5c>
 5c0:	59 3f       	cpi	r21, 0xF9	; 249
 5c2:	50 f4       	brcc	.+20     	; 0x5d8 <__addsf3x+0x4e>
 5c4:	50 3e       	cpi	r21, 0xE0	; 224
 5c6:	68 f1       	brcs	.+90     	; 0x622 <__addsf3x+0x98>
 5c8:	1a 16       	cp	r1, r26
 5ca:	f0 40       	sbci	r31, 0x00	; 0
 5cc:	a2 2f       	mov	r26, r18
 5ce:	23 2f       	mov	r18, r19
 5d0:	34 2f       	mov	r19, r20
 5d2:	44 27       	eor	r20, r20
 5d4:	58 5f       	subi	r21, 0xF8	; 248
 5d6:	f3 cf       	rjmp	.-26     	; 0x5be <__addsf3x+0x34>
 5d8:	46 95       	lsr	r20
 5da:	37 95       	ror	r19
 5dc:	27 95       	ror	r18
 5de:	a7 95       	ror	r26
 5e0:	f0 40       	sbci	r31, 0x00	; 0
 5e2:	53 95       	inc	r21
 5e4:	c9 f7       	brne	.-14     	; 0x5d8 <__addsf3x+0x4e>
 5e6:	7e f4       	brtc	.+30     	; 0x606 <__addsf3x+0x7c>
 5e8:	1f 16       	cp	r1, r31
 5ea:	ba 0b       	sbc	r27, r26
 5ec:	62 0b       	sbc	r22, r18
 5ee:	73 0b       	sbc	r23, r19
 5f0:	84 0b       	sbc	r24, r20
 5f2:	ba f0       	brmi	.+46     	; 0x622 <__addsf3x+0x98>
 5f4:	91 50       	subi	r25, 0x01	; 1
 5f6:	a1 f0       	breq	.+40     	; 0x620 <__addsf3x+0x96>
 5f8:	ff 0f       	add	r31, r31
 5fa:	bb 1f       	adc	r27, r27
 5fc:	66 1f       	adc	r22, r22
 5fe:	77 1f       	adc	r23, r23
 600:	88 1f       	adc	r24, r24
 602:	c2 f7       	brpl	.-16     	; 0x5f4 <__addsf3x+0x6a>
 604:	0e c0       	rjmp	.+28     	; 0x622 <__addsf3x+0x98>
 606:	ba 0f       	add	r27, r26
 608:	62 1f       	adc	r22, r18
 60a:	73 1f       	adc	r23, r19
 60c:	84 1f       	adc	r24, r20
 60e:	48 f4       	brcc	.+18     	; 0x622 <__addsf3x+0x98>
 610:	87 95       	ror	r24
 612:	77 95       	ror	r23
 614:	67 95       	ror	r22
 616:	b7 95       	ror	r27
 618:	f7 95       	ror	r31
 61a:	9e 3f       	cpi	r25, 0xFE	; 254
 61c:	08 f0       	brcs	.+2      	; 0x620 <__addsf3x+0x96>
 61e:	b3 cf       	rjmp	.-154    	; 0x586 <__addsf3+0x1e>
 620:	93 95       	inc	r25
 622:	88 0f       	add	r24, r24
 624:	08 f0       	brcs	.+2      	; 0x628 <__addsf3x+0x9e>
 626:	99 27       	eor	r25, r25
 628:	ee 0f       	add	r30, r30
 62a:	97 95       	ror	r25
 62c:	87 95       	ror	r24
 62e:	08 95       	ret

00000630 <__fixsfsi>:
 630:	04 d0       	rcall	.+8      	; 0x63a <__fixunssfsi>
 632:	68 94       	set
 634:	b1 11       	cpse	r27, r1
 636:	b5 c0       	rjmp	.+362    	; 0x7a2 <__fp_szero>
 638:	08 95       	ret

0000063a <__fixunssfsi>:
 63a:	98 d0       	rcall	.+304    	; 0x76c <__fp_splitA>
 63c:	88 f0       	brcs	.+34     	; 0x660 <__fixunssfsi+0x26>
 63e:	9f 57       	subi	r25, 0x7F	; 127
 640:	90 f0       	brcs	.+36     	; 0x666 <__fixunssfsi+0x2c>
 642:	b9 2f       	mov	r27, r25
 644:	99 27       	eor	r25, r25
 646:	b7 51       	subi	r27, 0x17	; 23
 648:	a0 f0       	brcs	.+40     	; 0x672 <__fixunssfsi+0x38>
 64a:	d1 f0       	breq	.+52     	; 0x680 <__fixunssfsi+0x46>
 64c:	66 0f       	add	r22, r22
 64e:	77 1f       	adc	r23, r23
 650:	88 1f       	adc	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	1a f0       	brmi	.+6      	; 0x65c <__fixunssfsi+0x22>
 656:	ba 95       	dec	r27
 658:	c9 f7       	brne	.-14     	; 0x64c <__fixunssfsi+0x12>
 65a:	12 c0       	rjmp	.+36     	; 0x680 <__fixunssfsi+0x46>
 65c:	b1 30       	cpi	r27, 0x01	; 1
 65e:	81 f0       	breq	.+32     	; 0x680 <__fixunssfsi+0x46>
 660:	9f d0       	rcall	.+318    	; 0x7a0 <__fp_zero>
 662:	b1 e0       	ldi	r27, 0x01	; 1
 664:	08 95       	ret
 666:	9c c0       	rjmp	.+312    	; 0x7a0 <__fp_zero>
 668:	67 2f       	mov	r22, r23
 66a:	78 2f       	mov	r23, r24
 66c:	88 27       	eor	r24, r24
 66e:	b8 5f       	subi	r27, 0xF8	; 248
 670:	39 f0       	breq	.+14     	; 0x680 <__fixunssfsi+0x46>
 672:	b9 3f       	cpi	r27, 0xF9	; 249
 674:	cc f3       	brlt	.-14     	; 0x668 <__fixunssfsi+0x2e>
 676:	86 95       	lsr	r24
 678:	77 95       	ror	r23
 67a:	67 95       	ror	r22
 67c:	b3 95       	inc	r27
 67e:	d9 f7       	brne	.-10     	; 0x676 <__fixunssfsi+0x3c>
 680:	3e f4       	brtc	.+14     	; 0x690 <__fixunssfsi+0x56>
 682:	90 95       	com	r25
 684:	80 95       	com	r24
 686:	70 95       	com	r23
 688:	61 95       	neg	r22
 68a:	7f 4f       	sbci	r23, 0xFF	; 255
 68c:	8f 4f       	sbci	r24, 0xFF	; 255
 68e:	9f 4f       	sbci	r25, 0xFF	; 255
 690:	08 95       	ret

00000692 <__floatunsisf>:
 692:	e8 94       	clt
 694:	09 c0       	rjmp	.+18     	; 0x6a8 <__floatsisf+0x12>

00000696 <__floatsisf>:
 696:	97 fb       	bst	r25, 7
 698:	3e f4       	brtc	.+14     	; 0x6a8 <__floatsisf+0x12>
 69a:	90 95       	com	r25
 69c:	80 95       	com	r24
 69e:	70 95       	com	r23
 6a0:	61 95       	neg	r22
 6a2:	7f 4f       	sbci	r23, 0xFF	; 255
 6a4:	8f 4f       	sbci	r24, 0xFF	; 255
 6a6:	9f 4f       	sbci	r25, 0xFF	; 255
 6a8:	99 23       	and	r25, r25
 6aa:	a9 f0       	breq	.+42     	; 0x6d6 <__floatsisf+0x40>
 6ac:	f9 2f       	mov	r31, r25
 6ae:	96 e9       	ldi	r25, 0x96	; 150
 6b0:	bb 27       	eor	r27, r27
 6b2:	93 95       	inc	r25
 6b4:	f6 95       	lsr	r31
 6b6:	87 95       	ror	r24
 6b8:	77 95       	ror	r23
 6ba:	67 95       	ror	r22
 6bc:	b7 95       	ror	r27
 6be:	f1 11       	cpse	r31, r1
 6c0:	f8 cf       	rjmp	.-16     	; 0x6b2 <__floatsisf+0x1c>
 6c2:	fa f4       	brpl	.+62     	; 0x702 <__floatsisf+0x6c>
 6c4:	bb 0f       	add	r27, r27
 6c6:	11 f4       	brne	.+4      	; 0x6cc <__floatsisf+0x36>
 6c8:	60 ff       	sbrs	r22, 0
 6ca:	1b c0       	rjmp	.+54     	; 0x702 <__floatsisf+0x6c>
 6cc:	6f 5f       	subi	r22, 0xFF	; 255
 6ce:	7f 4f       	sbci	r23, 0xFF	; 255
 6d0:	8f 4f       	sbci	r24, 0xFF	; 255
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	16 c0       	rjmp	.+44     	; 0x702 <__floatsisf+0x6c>
 6d6:	88 23       	and	r24, r24
 6d8:	11 f0       	breq	.+4      	; 0x6de <__floatsisf+0x48>
 6da:	96 e9       	ldi	r25, 0x96	; 150
 6dc:	11 c0       	rjmp	.+34     	; 0x700 <__floatsisf+0x6a>
 6de:	77 23       	and	r23, r23
 6e0:	21 f0       	breq	.+8      	; 0x6ea <__floatsisf+0x54>
 6e2:	9e e8       	ldi	r25, 0x8E	; 142
 6e4:	87 2f       	mov	r24, r23
 6e6:	76 2f       	mov	r23, r22
 6e8:	05 c0       	rjmp	.+10     	; 0x6f4 <__floatsisf+0x5e>
 6ea:	66 23       	and	r22, r22
 6ec:	71 f0       	breq	.+28     	; 0x70a <__floatsisf+0x74>
 6ee:	96 e8       	ldi	r25, 0x86	; 134
 6f0:	86 2f       	mov	r24, r22
 6f2:	70 e0       	ldi	r23, 0x00	; 0
 6f4:	60 e0       	ldi	r22, 0x00	; 0
 6f6:	2a f0       	brmi	.+10     	; 0x702 <__floatsisf+0x6c>
 6f8:	9a 95       	dec	r25
 6fa:	66 0f       	add	r22, r22
 6fc:	77 1f       	adc	r23, r23
 6fe:	88 1f       	adc	r24, r24
 700:	da f7       	brpl	.-10     	; 0x6f8 <__floatsisf+0x62>
 702:	88 0f       	add	r24, r24
 704:	96 95       	lsr	r25
 706:	87 95       	ror	r24
 708:	97 f9       	bld	r25, 7
 70a:	08 95       	ret

0000070c <__fp_inf>:
 70c:	97 f9       	bld	r25, 7
 70e:	9f 67       	ori	r25, 0x7F	; 127
 710:	80 e8       	ldi	r24, 0x80	; 128
 712:	70 e0       	ldi	r23, 0x00	; 0
 714:	60 e0       	ldi	r22, 0x00	; 0
 716:	08 95       	ret

00000718 <__fp_nan>:
 718:	9f ef       	ldi	r25, 0xFF	; 255
 71a:	80 ec       	ldi	r24, 0xC0	; 192
 71c:	08 95       	ret

0000071e <__fp_pscA>:
 71e:	00 24       	eor	r0, r0
 720:	0a 94       	dec	r0
 722:	16 16       	cp	r1, r22
 724:	17 06       	cpc	r1, r23
 726:	18 06       	cpc	r1, r24
 728:	09 06       	cpc	r0, r25
 72a:	08 95       	ret

0000072c <__fp_pscB>:
 72c:	00 24       	eor	r0, r0
 72e:	0a 94       	dec	r0
 730:	12 16       	cp	r1, r18
 732:	13 06       	cpc	r1, r19
 734:	14 06       	cpc	r1, r20
 736:	05 06       	cpc	r0, r21
 738:	08 95       	ret

0000073a <__fp_round>:
 73a:	09 2e       	mov	r0, r25
 73c:	03 94       	inc	r0
 73e:	00 0c       	add	r0, r0
 740:	11 f4       	brne	.+4      	; 0x746 <__fp_round+0xc>
 742:	88 23       	and	r24, r24
 744:	52 f0       	brmi	.+20     	; 0x75a <__fp_round+0x20>
 746:	bb 0f       	add	r27, r27
 748:	40 f4       	brcc	.+16     	; 0x75a <__fp_round+0x20>
 74a:	bf 2b       	or	r27, r31
 74c:	11 f4       	brne	.+4      	; 0x752 <__fp_round+0x18>
 74e:	60 ff       	sbrs	r22, 0
 750:	04 c0       	rjmp	.+8      	; 0x75a <__fp_round+0x20>
 752:	6f 5f       	subi	r22, 0xFF	; 255
 754:	7f 4f       	sbci	r23, 0xFF	; 255
 756:	8f 4f       	sbci	r24, 0xFF	; 255
 758:	9f 4f       	sbci	r25, 0xFF	; 255
 75a:	08 95       	ret

0000075c <__fp_split3>:
 75c:	57 fd       	sbrc	r21, 7
 75e:	90 58       	subi	r25, 0x80	; 128
 760:	44 0f       	add	r20, r20
 762:	55 1f       	adc	r21, r21
 764:	59 f0       	breq	.+22     	; 0x77c <__fp_splitA+0x10>
 766:	5f 3f       	cpi	r21, 0xFF	; 255
 768:	71 f0       	breq	.+28     	; 0x786 <__fp_splitA+0x1a>
 76a:	47 95       	ror	r20

0000076c <__fp_splitA>:
 76c:	88 0f       	add	r24, r24
 76e:	97 fb       	bst	r25, 7
 770:	99 1f       	adc	r25, r25
 772:	61 f0       	breq	.+24     	; 0x78c <__fp_splitA+0x20>
 774:	9f 3f       	cpi	r25, 0xFF	; 255
 776:	79 f0       	breq	.+30     	; 0x796 <__fp_splitA+0x2a>
 778:	87 95       	ror	r24
 77a:	08 95       	ret
 77c:	12 16       	cp	r1, r18
 77e:	13 06       	cpc	r1, r19
 780:	14 06       	cpc	r1, r20
 782:	55 1f       	adc	r21, r21
 784:	f2 cf       	rjmp	.-28     	; 0x76a <__fp_split3+0xe>
 786:	46 95       	lsr	r20
 788:	f1 df       	rcall	.-30     	; 0x76c <__fp_splitA>
 78a:	08 c0       	rjmp	.+16     	; 0x79c <__fp_splitA+0x30>
 78c:	16 16       	cp	r1, r22
 78e:	17 06       	cpc	r1, r23
 790:	18 06       	cpc	r1, r24
 792:	99 1f       	adc	r25, r25
 794:	f1 cf       	rjmp	.-30     	; 0x778 <__fp_splitA+0xc>
 796:	86 95       	lsr	r24
 798:	71 05       	cpc	r23, r1
 79a:	61 05       	cpc	r22, r1
 79c:	08 94       	sec
 79e:	08 95       	ret

000007a0 <__fp_zero>:
 7a0:	e8 94       	clt

000007a2 <__fp_szero>:
 7a2:	bb 27       	eor	r27, r27
 7a4:	66 27       	eor	r22, r22
 7a6:	77 27       	eor	r23, r23
 7a8:	cb 01       	movw	r24, r22
 7aa:	97 f9       	bld	r25, 7
 7ac:	08 95       	ret

000007ae <__mulsf3>:
 7ae:	0b d0       	rcall	.+22     	; 0x7c6 <__mulsf3x>
 7b0:	c4 cf       	rjmp	.-120    	; 0x73a <__fp_round>
 7b2:	b5 df       	rcall	.-150    	; 0x71e <__fp_pscA>
 7b4:	28 f0       	brcs	.+10     	; 0x7c0 <__mulsf3+0x12>
 7b6:	ba df       	rcall	.-140    	; 0x72c <__fp_pscB>
 7b8:	18 f0       	brcs	.+6      	; 0x7c0 <__mulsf3+0x12>
 7ba:	95 23       	and	r25, r21
 7bc:	09 f0       	breq	.+2      	; 0x7c0 <__mulsf3+0x12>
 7be:	a6 cf       	rjmp	.-180    	; 0x70c <__fp_inf>
 7c0:	ab cf       	rjmp	.-170    	; 0x718 <__fp_nan>
 7c2:	11 24       	eor	r1, r1
 7c4:	ee cf       	rjmp	.-36     	; 0x7a2 <__fp_szero>

000007c6 <__mulsf3x>:
 7c6:	ca df       	rcall	.-108    	; 0x75c <__fp_split3>
 7c8:	a0 f3       	brcs	.-24     	; 0x7b2 <__mulsf3+0x4>

000007ca <__mulsf3_pse>:
 7ca:	95 9f       	mul	r25, r21
 7cc:	d1 f3       	breq	.-12     	; 0x7c2 <__mulsf3+0x14>
 7ce:	95 0f       	add	r25, r21
 7d0:	50 e0       	ldi	r21, 0x00	; 0
 7d2:	55 1f       	adc	r21, r21
 7d4:	62 9f       	mul	r22, r18
 7d6:	f0 01       	movw	r30, r0
 7d8:	72 9f       	mul	r23, r18
 7da:	bb 27       	eor	r27, r27
 7dc:	f0 0d       	add	r31, r0
 7de:	b1 1d       	adc	r27, r1
 7e0:	63 9f       	mul	r22, r19
 7e2:	aa 27       	eor	r26, r26
 7e4:	f0 0d       	add	r31, r0
 7e6:	b1 1d       	adc	r27, r1
 7e8:	aa 1f       	adc	r26, r26
 7ea:	64 9f       	mul	r22, r20
 7ec:	66 27       	eor	r22, r22
 7ee:	b0 0d       	add	r27, r0
 7f0:	a1 1d       	adc	r26, r1
 7f2:	66 1f       	adc	r22, r22
 7f4:	82 9f       	mul	r24, r18
 7f6:	22 27       	eor	r18, r18
 7f8:	b0 0d       	add	r27, r0
 7fa:	a1 1d       	adc	r26, r1
 7fc:	62 1f       	adc	r22, r18
 7fe:	73 9f       	mul	r23, r19
 800:	b0 0d       	add	r27, r0
 802:	a1 1d       	adc	r26, r1
 804:	62 1f       	adc	r22, r18
 806:	83 9f       	mul	r24, r19
 808:	a0 0d       	add	r26, r0
 80a:	61 1d       	adc	r22, r1
 80c:	22 1f       	adc	r18, r18
 80e:	74 9f       	mul	r23, r20
 810:	33 27       	eor	r19, r19
 812:	a0 0d       	add	r26, r0
 814:	61 1d       	adc	r22, r1
 816:	23 1f       	adc	r18, r19
 818:	84 9f       	mul	r24, r20
 81a:	60 0d       	add	r22, r0
 81c:	21 1d       	adc	r18, r1
 81e:	82 2f       	mov	r24, r18
 820:	76 2f       	mov	r23, r22
 822:	6a 2f       	mov	r22, r26
 824:	11 24       	eor	r1, r1
 826:	9f 57       	subi	r25, 0x7F	; 127
 828:	50 40       	sbci	r21, 0x00	; 0
 82a:	8a f0       	brmi	.+34     	; 0x84e <__mulsf3_pse+0x84>
 82c:	e1 f0       	breq	.+56     	; 0x866 <__mulsf3_pse+0x9c>
 82e:	88 23       	and	r24, r24
 830:	4a f0       	brmi	.+18     	; 0x844 <__mulsf3_pse+0x7a>
 832:	ee 0f       	add	r30, r30
 834:	ff 1f       	adc	r31, r31
 836:	bb 1f       	adc	r27, r27
 838:	66 1f       	adc	r22, r22
 83a:	77 1f       	adc	r23, r23
 83c:	88 1f       	adc	r24, r24
 83e:	91 50       	subi	r25, 0x01	; 1
 840:	50 40       	sbci	r21, 0x00	; 0
 842:	a9 f7       	brne	.-22     	; 0x82e <__mulsf3_pse+0x64>
 844:	9e 3f       	cpi	r25, 0xFE	; 254
 846:	51 05       	cpc	r21, r1
 848:	70 f0       	brcs	.+28     	; 0x866 <__mulsf3_pse+0x9c>
 84a:	60 cf       	rjmp	.-320    	; 0x70c <__fp_inf>
 84c:	aa cf       	rjmp	.-172    	; 0x7a2 <__fp_szero>
 84e:	5f 3f       	cpi	r21, 0xFF	; 255
 850:	ec f3       	brlt	.-6      	; 0x84c <__mulsf3_pse+0x82>
 852:	98 3e       	cpi	r25, 0xE8	; 232
 854:	dc f3       	brlt	.-10     	; 0x84c <__mulsf3_pse+0x82>
 856:	86 95       	lsr	r24
 858:	77 95       	ror	r23
 85a:	67 95       	ror	r22
 85c:	b7 95       	ror	r27
 85e:	f7 95       	ror	r31
 860:	e7 95       	ror	r30
 862:	9f 5f       	subi	r25, 0xFF	; 255
 864:	c1 f7       	brne	.-16     	; 0x856 <__mulsf3_pse+0x8c>
 866:	fe 2b       	or	r31, r30
 868:	88 0f       	add	r24, r24
 86a:	91 1d       	adc	r25, r1
 86c:	96 95       	lsr	r25
 86e:	87 95       	ror	r24
 870:	97 f9       	bld	r25, 7
 872:	08 95       	ret
 874:	11 f4       	brne	.+4      	; 0x87a <__mulsf3_pse+0xb0>
 876:	0e f4       	brtc	.+2      	; 0x87a <__mulsf3_pse+0xb0>
 878:	4f cf       	rjmp	.-354    	; 0x718 <__fp_nan>
 87a:	3e c0       	rjmp	.+124    	; 0x8f8 <__fp_mpack>

0000087c <sqrt>:
 87c:	77 df       	rcall	.-274    	; 0x76c <__fp_splitA>
 87e:	d0 f3       	brcs	.-12     	; 0x874 <__mulsf3_pse+0xaa>
 880:	99 23       	and	r25, r25
 882:	d9 f3       	breq	.-10     	; 0x87a <__mulsf3_pse+0xb0>
 884:	ce f3       	brts	.-14     	; 0x878 <__mulsf3_pse+0xae>
 886:	9f 57       	subi	r25, 0x7F	; 127
 888:	55 0b       	sbc	r21, r21
 88a:	87 ff       	sbrs	r24, 7
 88c:	43 d0       	rcall	.+134    	; 0x914 <__fp_norm2>
 88e:	00 24       	eor	r0, r0
 890:	a0 e6       	ldi	r26, 0x60	; 96
 892:	40 ea       	ldi	r20, 0xA0	; 160
 894:	90 01       	movw	r18, r0
 896:	80 58       	subi	r24, 0x80	; 128
 898:	56 95       	lsr	r21
 89a:	97 95       	ror	r25
 89c:	28 f4       	brcc	.+10     	; 0x8a8 <sqrt+0x2c>
 89e:	80 5c       	subi	r24, 0xC0	; 192
 8a0:	66 0f       	add	r22, r22
 8a2:	77 1f       	adc	r23, r23
 8a4:	88 1f       	adc	r24, r24
 8a6:	20 f0       	brcs	.+8      	; 0x8b0 <sqrt+0x34>
 8a8:	26 17       	cp	r18, r22
 8aa:	37 07       	cpc	r19, r23
 8ac:	48 07       	cpc	r20, r24
 8ae:	30 f4       	brcc	.+12     	; 0x8bc <sqrt+0x40>
 8b0:	62 1b       	sub	r22, r18
 8b2:	73 0b       	sbc	r23, r19
 8b4:	84 0b       	sbc	r24, r20
 8b6:	20 29       	or	r18, r0
 8b8:	31 29       	or	r19, r1
 8ba:	4a 2b       	or	r20, r26
 8bc:	a6 95       	lsr	r26
 8be:	17 94       	ror	r1
 8c0:	07 94       	ror	r0
 8c2:	20 25       	eor	r18, r0
 8c4:	31 25       	eor	r19, r1
 8c6:	4a 27       	eor	r20, r26
 8c8:	58 f7       	brcc	.-42     	; 0x8a0 <sqrt+0x24>
 8ca:	66 0f       	add	r22, r22
 8cc:	77 1f       	adc	r23, r23
 8ce:	88 1f       	adc	r24, r24
 8d0:	20 f0       	brcs	.+8      	; 0x8da <sqrt+0x5e>
 8d2:	26 17       	cp	r18, r22
 8d4:	37 07       	cpc	r19, r23
 8d6:	48 07       	cpc	r20, r24
 8d8:	30 f4       	brcc	.+12     	; 0x8e6 <sqrt+0x6a>
 8da:	62 0b       	sbc	r22, r18
 8dc:	73 0b       	sbc	r23, r19
 8de:	84 0b       	sbc	r24, r20
 8e0:	20 0d       	add	r18, r0
 8e2:	31 1d       	adc	r19, r1
 8e4:	41 1d       	adc	r20, r1
 8e6:	a0 95       	com	r26
 8e8:	81 f7       	brne	.-32     	; 0x8ca <sqrt+0x4e>
 8ea:	b9 01       	movw	r22, r18
 8ec:	84 2f       	mov	r24, r20
 8ee:	91 58       	subi	r25, 0x81	; 129
 8f0:	88 0f       	add	r24, r24
 8f2:	96 95       	lsr	r25
 8f4:	87 95       	ror	r24
 8f6:	08 95       	ret

000008f8 <__fp_mpack>:
 8f8:	9f 3f       	cpi	r25, 0xFF	; 255
 8fa:	31 f0       	breq	.+12     	; 0x908 <__fp_mpack_finite+0xc>

000008fc <__fp_mpack_finite>:
 8fc:	91 50       	subi	r25, 0x01	; 1
 8fe:	20 f4       	brcc	.+8      	; 0x908 <__fp_mpack_finite+0xc>
 900:	87 95       	ror	r24
 902:	77 95       	ror	r23
 904:	67 95       	ror	r22
 906:	b7 95       	ror	r27
 908:	88 0f       	add	r24, r24
 90a:	91 1d       	adc	r25, r1
 90c:	96 95       	lsr	r25
 90e:	87 95       	ror	r24
 910:	97 f9       	bld	r25, 7
 912:	08 95       	ret

00000914 <__fp_norm2>:
 914:	91 50       	subi	r25, 0x01	; 1
 916:	50 40       	sbci	r21, 0x00	; 0
 918:	66 0f       	add	r22, r22
 91a:	77 1f       	adc	r23, r23
 91c:	88 1f       	adc	r24, r24
 91e:	d2 f7       	brpl	.-12     	; 0x914 <__fp_norm2>
 920:	08 95       	ret

00000922 <__tablejump2__>:
 922:	ee 0f       	add	r30, r30
 924:	ff 1f       	adc	r31, r31
 926:	88 1f       	adc	r24, r24
 928:	8b bf       	out	0x3b, r24	; 59
 92a:	07 90       	elpm	r0, Z+
 92c:	f6 91       	elpm	r31, Z
 92e:	e0 2d       	mov	r30, r0
 930:	19 94       	eijmp

00000932 <_exit>:
 932:	f8 94       	cli

00000934 <__stop_program>:
 934:	ff cf       	rjmp	.-2      	; 0x934 <__stop_program>
